using System;
using System.Data;
using System.Configuration;
using System.Collections;
using HROne.Lib.Entities;
using HROne.Lib;
using HROne.LeaveCalc;
using HROne.DataAccess;
using HROne.CommonLib;

namespace HROne.Payroll
{
    /// <summary>
    /// Summary description for FinalPayment
    /// </summary>
    public class FinalPaymentProcess
    {
        public const string PAYMENTCODE_LONGSERVICE = "LSP";
        public const string PAYMENTCODE_SEVERANCE = "SP";


        private int m_EmpID;
        private string m_OverridePaymentMethod;
        public string defaultPayMethd = string.Empty;
        public int defaultEmpAccID = 0;

        //private EEmpTermination empTerm = null;
        //private EEmpPositionInfo position = null;
        private EPayrollGroup payrollGroup = null;
        private EPayrollPeriod dummyPayPeriod = null;
        //private DateTime asOfDate;
        protected DatabaseConnection dbConn = null;

        protected DateTime resignNoticeDate;
        protected DateTime lastEmploymentDate;
        protected DateTime expectedLastEmploymentDate;
        protected int CessationReasonID;
        protected int noticePeriod ;
        protected string noticeUnit ;

        public FinalPaymentProcess(DatabaseConnection dbConn, int EmpID, string OverridePaymentMethod)
            : this(dbConn, EmpID, AppUtils.ServerDateTime().Date, OverridePaymentMethod)
        {
        }

        public FinalPaymentProcess(DatabaseConnection dbConn, int EmpID, DateTime asOfDate, string OverridePaymentMethod)
        {
            this.dbConn = dbConn;
            this.m_EmpID = EmpID;
            this.m_OverridePaymentMethod = OverridePaymentMethod;
            EEmpTermination empTerm = EEmpTermination.GetObjectByEmpID(dbConn, EmpID);
            if (empTerm == null)
            {
                this.resignNoticeDate = asOfDate;
                this.lastEmploymentDate = asOfDate;
                this.expectedLastEmploymentDate = asOfDate;
                this.CessationReasonID = 0;
                EEmpPersonalInfo empInfo = new EEmpPersonalInfo();
                empInfo.EmpID = EmpID;
                if (EEmpPersonalInfo.db.select(dbConn, empInfo))
                {
                    this.noticePeriod = empInfo.EmpNoticePeriod;
                    this.noticeUnit = empInfo.EmpNoticeUnit;
                }
                else
                {
                    this.noticePeriod = 0;
                    this.noticeUnit = "D";
                }
            }
            else
            {
                this.resignNoticeDate = empTerm.EmpTermResignDate;
                this.lastEmploymentDate = empTerm.EmpTermLastDate;
                this.expectedLastEmploymentDate = empTerm.GetExpectedLastEmploymentDate();
                this.CessationReasonID = empTerm.CessationReasonID;
                this.noticePeriod = empTerm.EmpTermNoticePeriod;
                this.noticeUnit = empTerm.EmpTermNoticeUnit;
                asOfDate = lastEmploymentDate;
            }
            EEmpPositionInfo position = AppUtils.GetLastPositionInfo(dbConn, asOfDate, EmpID);
            if (position != null)
            {
                payrollGroup = new EPayrollGroup();
                payrollGroup.PayGroupID = position.PayGroupID;
                if (EPayrollGroup.db.select(dbConn, payrollGroup))
                    dummyPayPeriod = PayrollProcess.GenerateDummyPayrollPeriod(dbConn, payrollGroup.PayGroupID, asOfDate);
                else
                    dummyPayPeriod = null;
            }
            else
            {
                payrollGroup = null;
                dummyPayPeriod = null;
            }
        }

        public void UpdateAutoGeneratedFinalPayment()
        {
            ArrayList finalPaymentList = GetFinalPaymentList();

            if (finalPaymentList != null)
            {
                DBFilter dbFilter = new DBFilter();
                dbFilter.add(new Match("EmpID", m_EmpID));
                dbFilter.add(new Match("EmpFinalPayIsAutoGen", true));
                ArrayList deleteFinalPaymentList = EEmpFinalPayment.db.select(dbConn, dbFilter);
                foreach (EEmpFinalPayment finalPayment in deleteFinalPaymentList)
                {
                    EEmpFinalPayment.db.delete(dbConn, finalPayment);
                }
                foreach (EEmpFinalPayment finalPayment in finalPaymentList)
                {
                    if (!string.IsNullOrEmpty(m_OverridePaymentMethod))
                    {
                        finalPayment.EmpFinalPayMethod = m_OverridePaymentMethod;
                        if (finalPayment.EmpFinalPayMethod.Equals("A"))
                        {
                            //EEmpBankAccount bankAccount = EEmpBankAccount.GetDefaultBankAccount(dbConn, m_EmpID);
                            //if (bankAccount != null)
                            //    finalPayment.EmpAccID = bankAccount.EmpBankAccountID;
                        }
                        else
                            finalPayment.EmpAccID = 0;
                    }
                    EEmpFinalPayment.db.insert(dbConn, finalPayment);
                }
            }
            else
                throw new Exception("No final payment has been generated!");
        }

        public ArrayList GetFinalPaymentList()
        {
            if (dummyPayPeriod != null)
            {
                ECessationReason reason = new ECessationReason();
                reason.CessationReasonID = CessationReasonID;
                ECessationReason.db.select(dbConn, reason);

                DBFilter filter = new DBFilter();
                filter.add(new Match("EmpID", m_EmpID));
                filter.add(new Match("PayGroupID", dummyPayPeriod.PayGroupID));
                filter.add(new Match("EmpPosEffFr", "<=", dummyPayPeriod.PayPeriodTo));

                OR orFilter = new OR();
                orFilter.add(new Match("EmpPosEffTo", ">=", dummyPayPeriod.PayPeriodFr));
                orFilter.add(new NullTerm("EmpPosEffTo"));
                filter.add(orFilter);

                filter.add("EmpPosEffFr", true);
                ArrayList positions = EEmpPositionInfo.db.select(dbConn, filter);

                //  If no position record found, assume the trial run parameter is incorrected
                if (positions.Count == 0)
                    return null;

                ArrayList mergePositionList = new ArrayList();

                foreach (EEmpPositionInfo empPos in positions)
                {
                    if (mergePositionList.Count <= 0)
                        mergePositionList.Add(empPos);
                    else
                    {
                        EEmpPositionInfo lastPosition = (EEmpPositionInfo)mergePositionList[mergePositionList.Count - 1];
                        if (lastPosition.EmpPosEffTo.AddDays(1).Equals(empPos.EmpPosEffFr))
                            lastPosition.EmpPosEffTo = empPos.EmpPosEffTo;
                        else
                            mergePositionList.Add(empPos);
                    }
                }

                ArrayList dummyPaymentRecordList = new ArrayList();
                PayrollProcess payrollProcess = new PayrollProcess(dbConn);

                foreach (EEmpPositionInfo empPos in mergePositionList)
                {
                    DateTime dateFrom, dateTo;

                    dateFrom = (empPos.EmpPosEffFr > dummyPayPeriod.PayPeriodFr ? empPos.EmpPosEffFr : dummyPayPeriod.PayPeriodFr);
                    if (empPos.EmpPosEffTo.Ticks.Equals(0))
                        dateTo = dummyPayPeriod.PayPeriodTo;
                    else
                        dateTo = (empPos.EmpPosEffTo < dummyPayPeriod.PayPeriodTo ? empPos.EmpPosEffTo : dummyPayPeriod.PayPeriodTo);

                    if (lastEmploymentDate < dateTo)
                        dateTo = lastEmploymentDate;
                    EEmpPersonalInfo empInfo = new EEmpPersonalInfo();
                    empInfo.EmpID = m_EmpID;
                    EEmpPersonalInfo.db.select(dbConn, empInfo);
                    if (empInfo.EmpDateOfJoin > dateFrom)
                        dateFrom = empInfo.EmpDateOfJoin;

                    ArrayList dummyRPRecordList = payrollProcess.RecurringPaymentTrialRun(m_EmpID, dummyPayPeriod, dateFrom, dateTo, true);
                    ArrayList dummyContractGratuityRecordList = payrollProcess.ContractGratuityTrialRun(m_EmpID, dateFrom, dateTo);
                    ArrayList dummyYEBRecordList = payrollProcess.YearEndBonusTrialRun(m_EmpID, dummyPayPeriod, dateFrom, dateTo, true);
                    dummyPaymentRecordList.AddRange(dummyRPRecordList);
                    dummyPaymentRecordList.AddRange(dummyContractGratuityRecordList);
                    dummyPaymentRecordList.AddRange(dummyYEBRecordList);
                    //  Leave Deduction is calculated AFTER CND to prevent insuffectient amount to deduct for payroll calculated by CND.
                    ArrayList dummyLeaveAndStatutoryRecordList = payrollProcess.LeaveAndStatutoryHolidayTrialRun(m_EmpID, dummyPayPeriod, dateFrom, dateTo, dummyPaymentRecordList, true);
                    dummyPaymentRecordList.AddRange(dummyLeaveAndStatutoryRecordList);
                }


                dummyPaymentRecordList.AddRange(payrollProcess.GetRoundingDifferencePaymentList(m_EmpID, dummyPaymentRecordList));

                ArrayList finalPaymentList = new ArrayList();


                foreach (EPaymentRecord payRecord in dummyPaymentRecordList)
                {
                    if (payRecord != null)
                    {
                        if (payRecord.PaymentCodeID > 0)
                        {
                            EEmpFinalPayment finalPayment = new EEmpFinalPayment();
                            finalPayment.EmpID = m_EmpID;
                            finalPayment.PayCodeID = payRecord.PaymentCodeID;
                            finalPayment.CurrencyID = payRecord.CurrencyID;
                            finalPayment.EmpFinalPayAmount = payRecord.PayRecActAmount;
                            finalPayment.EmpFinalPayMethod = payRecord.PayRecMethod;
                            finalPayment.EmpAccID = payRecord.EmpAccID;
                            finalPayment.CostCenterID = payRecord.CostCenterID;
                            finalPayment.EmpFinalPayRemark = payRecord.PayRecRemark;
                            finalPayment.EmpFinalPayNumOfDayAdj = payRecord.PayRecNumOfDayAdj;
                            finalPayment.LeaveAppID = payRecord.LeaveAppID;
                            finalPayment.LeaveAppIDList = payRecord.LeaveAppIDList;
                            //                finalPayment.m_PayRecID = 0;
                            finalPayment.EmpFinalPayIsAutoGen = true;
                            finalPayment.EmpFinalPayIsRestDayPayment = payRecord.PayRecIsRestDayPayment;
                            finalPaymentList.Add(finalPayment);
                        }
                    }
                }
                ArrayList MergedPaymentRecord = GetMergePaymentRecordByPaymentMethod(dummyPaymentRecordList);
                if (MergedPaymentRecord.Count > 0)
                {
                    defaultPayMethd = ((EPaymentRecord)MergedPaymentRecord[0]).PayRecMethod;
                    defaultEmpAccID = ((EPaymentRecord)MergedPaymentRecord[0]).EmpAccID;
                }
                EEmpFinalPayment annualPayment = GetAnnualLeavePayment();
                if (annualPayment != null)
                    finalPaymentList.Add(annualPayment);

                EEmpFinalPayment restDayPayment = GetRestDayPayment();
                if (restDayPayment != null)
                    finalPaymentList.Add(restDayPayment);

                EEmpFinalPayment statutoryHolidayPayment = GetStatutoryHolidayPayment();
                if (statutoryHolidayPayment != null)
                    finalPaymentList.Add(statutoryHolidayPayment);

                EEmpFinalPayment paymentInLieuPayment = GetPaymentInLieuPayment(true);
                if (paymentInLieuPayment != null)
                    finalPaymentList.Add(paymentInLieuPayment);

                paymentInLieuPayment = GetPaymentInLieuPayment(false);
                if (paymentInLieuPayment != null)
                    finalPaymentList.Add(paymentInLieuPayment);

                if (reason.CessationReasonIsLongServicePay)
                {
                    EEmpFinalPayment longServicePayment = GetLongServicePaymentSeverancePayment(true);
                    if (longServicePayment != null)
                        finalPaymentList.Add(longServicePayment);
                }
                if (reason.CessationReasonIsSeverancePay)
                {
                    EEmpFinalPayment severancePayment = GetLongServicePaymentSeverancePayment(false);
                    if (severancePayment != null)
                        finalPaymentList.Add(severancePayment);
                }
                return finalPaymentList;
            }
            return null;
        }
        private EEmpFinalPayment GetAnnualLeavePayment()
        {
            EEmpPersonalInfo empInfo = new EEmpPersonalInfo();
            empInfo.EmpID = m_EmpID;
            if (EEmpPersonalInfo.db.select(dbConn, empInfo))
            {
                DateTime eligibleLastEmploymentDate = empInfo.EmpServiceDate;
                if (payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod > 0)
                    if (payrollGroup.PayGroupTerminatedALCompensationProrataEligibleUnit.Equals("M"))
                    {
                        // Start 000161, Ricky So, 2015-02-13
                        eligibleLastEmploymentDate =
                            eligibleLastEmploymentDate.AddMonths(
                                payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod).AddDays(1);
                        //eligibleLastEmploymentDate = eligibleLastEmploymentDate.AddMonths(payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod);
                        // End 000161, Ricky So, 2015-02-13
                    }
                    else
                    {
                        // Start 000161, Ricky So, 2015-02-13
                        eligibleLastEmploymentDate =
                            eligibleLastEmploymentDate.AddDays(
                                payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod).AddDays(1);
//                        eligibleLastEmploymentDate = eligibleLastEmploymentDate.AddDays(payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod);
                        // End 000161, Ricky So, 2015-02-13
                    }
            eligibleLastEmploymentDate = eligibleLastEmploymentDate.AddDays(-1);

                if (payrollGroup.PayGroupTerminatedALCompensationEligibleAfterProbation)
                    if (eligibleLastEmploymentDate < empInfo.EmpProbaLastDate)
                        eligibleLastEmploymentDate = empInfo.EmpProbaLastDate;

                if (lastEmploymentDate < eligibleLastEmploymentDate)
                    return null;


                double numberOfDay = 0;
                AnnualLeaveBalanceProcess calc = new AnnualLeaveBalanceProcess(dbConn, m_EmpID);
                // do NOT apply skip rounding to prevent invalid result for balance calculation on previous years
                calc.LoadData(lastEmploymentDate);

                //  Apply skip rounding and refresh the balance 
                calc.skipALRoundingRule = payrollGroup.PayGroupTerminatedALCompensationIsSkipRoundingRule;
                calc.LoadData(lastEmploymentDate);
                ELeaveBalance leaveBalance = calc.getLatestLeaveBalance();
                if (leaveBalance != null)
                {
                    if (payrollGroup.PayGroupTerminatedALCompensationProrataEligibleCheckEveryLeaveYear)
                    {
                        eligibleLastEmploymentDate = leaveBalance.LeaveBalanceEffectiveDate;
                        if (payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod > 0)
                            if (payrollGroup.PayGroupTerminatedALCompensationProrataEligibleUnit.Equals("M"))
                            {
                                // Start 000161, Ricky So, 2015-02-13
                                eligibleLastEmploymentDate =
                                    eligibleLastEmploymentDate.AddMonths(
                                        payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod).AddDays(1);
                                //eligibleLastEmploymentDate = eligibleLastEmploymentDate.AddMonths(payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod);
                                // End 000161, Ricky So, 2015-02-13
                            }
                            else
                            {
                                // Start 000161, Ricky So, 2015-02-13
                                eligibleLastEmploymentDate =
                                    eligibleLastEmploymentDate.AddDays(
                                        payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod).AddDays(1);
                                //eligibleLastEmploymentDate = eligibleLastEmploymentDate.AddDays(payrollGroup.PayGroupTerminatedALCompensationProrataEligiblePeriod);
                                // End 000161, Ricky So, 2015-02-13
                            }
                            eligibleLastEmploymentDate = eligibleLastEmploymentDate.AddDays(-1);

                        if (lastEmploymentDate < eligibleLastEmploymentDate)
                            numberOfDay += leaveBalance.getBalance() - leaveBalance.LeaveBalanceEntitled;
                        else
                            numberOfDay += leaveBalance.getBalance();
                    }
                    else
                        numberOfDay += leaveBalance.getBalance();
                    ////  Get Leave Payment ID
                    //DBFilter leaveCodeFilter = new DBFilter();
                    //leaveCodeFilter.add(new Match("LeaveTypeID", leaveType.LeaveTypeID));
                    //ArrayList leaveCodeList = ELeaveCode.db.select(dbConn, leaveCodeFilter);
                    //if (leaveCodeList.Count > 0)
                    //{
                    //    PaymentCodeID = ((ELeaveCode)leaveCodeList[0]).LeaveCodeLeaveAllowPaymentCodeID;
                    //}
                }

                // fix the precision problem caused by too many math operation on floating point number
                numberOfDay = HROne.CommonLib.GenericRoundingFunctions.RoundingTo(numberOfDay, 9, 9);
                //if (Math.Abs(numberOfDay) >= 0.01)
                {

                    double periodRPAmount = PayrollProcess.GetTotalPeriodPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny);
                    double dailyRPAmount = PayrollProcess.GetTotalDailyPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, dummyPayPeriod);
                    //  Use last Employment for calculating daily wages
                    string formulaRemark = string.Empty;
                    bool IsDAW = false;
                    string formulaRemarkAlternative = string.Empty;
                    bool IsDAWAlternative = false;
                    double dailyWages = PayrollFormula.DailyProrataCaluclation(dbConn, payrollGroup.PayGroupTerminatedALCompensationDailyFormula, payrollGroup.PayGroupDefaultProrataFormula, m_EmpID, periodRPAmount, dummyPayPeriod.PayPeriodFr, dummyPayPeriod.PayPeriodTo, payrollGroup.NumOfPeriodPerYear(), lastEmploymentDate, out formulaRemark, out IsDAW);
                    double dailyWagesAlternative = PayrollFormula.DailyProrataCaluclation(dbConn, payrollGroup.PayGroupTerminatedALCompensationDailyFormulaAlternative, payrollGroup.PayGroupTerminatedALCompensationDailyFormula, m_EmpID, periodRPAmount, dummyPayPeriod.PayPeriodFr, dummyPayPeriod.PayPeriodTo, payrollGroup.NumOfPeriodPerYear(), lastEmploymentDate, out formulaRemarkAlternative, out IsDAWAlternative);
                    if (dailyWagesAlternative > 0)
                        if (numberOfDay > 0)
                        {
                            if (dailyWagesAlternative > dailyWages)
                            {
                                dailyWages = dailyWagesAlternative;
                                formulaRemark = formulaRemarkAlternative;
                                IsDAW = IsDAWAlternative;
                            }
                        }
                        else if (numberOfDay < 0)
                        {
                            if (dailyWagesAlternative < dailyWages)
                            {
                                dailyWages = dailyWagesAlternative;
                                formulaRemark = formulaRemarkAlternative;
                                IsDAW = IsDAWAlternative;
                            }
                        }
                    if (!IsDAW)
                        if (dailyWages.Equals(0))
                        {
                            formulaRemark = string.Empty;
                            if (!dailyRPAmount.Equals(0))
                            {
                                dailyWages = dailyRPAmount;
                                formulaRemark = dailyRPAmount.ToString("$#,##0.00##");
                            }
                        }
                        else
                        {
                            if (!dailyRPAmount.Equals(0))
                            {
                                dailyWages += dailyRPAmount;
                                formulaRemark += " + " + dailyRPAmount.ToString("$#,##0.00##");
                            }
                        }

                    int PaymentCodeID = payrollGroup.PayGroupTerminatedALCompensationPaymentCodeID;
                    if (numberOfDay < 0)
                    {
                        numberOfDay = -numberOfDay;
                        dailyWages = -dailyWages;
                        formulaRemark = "-" + formulaRemark;
                        PaymentCodeID = payrollGroup.PayGroupTerminatedALCompensationByEEPaymentCodeID;
                    }
                    if (Math.Abs(dailyWages * numberOfDay) >= 0.005)
                    {
                        EEmpFinalPayment finalPayment = CreateFinalPaymentRecord(PaymentCodeID, dailyWages * numberOfDay, formulaRemark + " x " + Math.Round(numberOfDay, 4));
                        return finalPayment;
                    }
                }
            }
            return null;
        }

        private EEmpFinalPayment GetRestDayPayment()
        {

            double numberOfDay = 0;
            LeaveBalanceCalc calc = new LeaveBalanceCalc(dbConn, m_EmpID, lastEmploymentDate);
            ArrayList balanceItems = calc.getCurrentBalanceList();
            foreach (ELeaveBalance leaveBalance in balanceItems)
            {
                ELeaveType leaveType = new ELeaveType();
                leaveType.LeaveTypeID = leaveBalance.LeaveTypeID;
                if (ELeaveType.db.select(dbConn, leaveType))
                    if (leaveType.LeaveType.Equals(ELeaveType.LEAVETYPECODE_RESTDAY))
                    {
                        numberOfDay += leaveBalance.getBalance();
                    }
            }

            if (Math.Abs(numberOfDay) >= 0.01)
            {

                double periodRPAmount = PayrollProcess.GetTotalPeriodPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly);
                double dailyRPAmount = PayrollProcess.GetTotalDailyPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, dummyPayPeriod);
                //  Use last Employment for calculating daily wages
                string formulaRemark = string.Empty;
                bool IsDAW = false;
                double dailyWages = PayrollFormula.DailyProrataCaluclation(dbConn, payrollGroup.PayGroupTerminatedRestDayCompensationDailyFormula, payrollGroup.PayGroupDefaultProrataFormula, m_EmpID, periodRPAmount, dummyPayPeriod.PayPeriodFr, dummyPayPeriod.PayPeriodTo, payrollGroup.NumOfPeriodPerYear(), lastEmploymentDate, out formulaRemark, out IsDAW);
                if (!IsDAW)
                    if (dailyWages.Equals(0))
                    {
                        formulaRemark = string.Empty;
                        if (!dailyRPAmount.Equals(0))
                        {
                            dailyWages = dailyRPAmount;
                            formulaRemark = dailyRPAmount.ToString("$#,##0.00##");
                        }
                    }
                    else
                    {
                        if (!dailyRPAmount.Equals(0))
                        {
                            dailyWages += dailyRPAmount;
                            formulaRemark += " + " + dailyRPAmount.ToString("$#,##0.00##");
                        }
                    }

                int PaymentCodeID = payrollGroup.PayGroupTerminatedRestDayCompensationPaymentCodeID;
                //if (numberOfDay < 0)
                //{
                //    numberOfDay = -numberOfDay;
                //    dailyWages = -dailyWages;
                //    formulaRemark = "-" + formulaRemark;
                //    PaymentCodeID = payrollGroup.PayGroupTerminatedRestDayCompensationByEEPaymentCodeID;
                //}
                if (Math.Abs(dailyWages * numberOfDay) >= 0.005)
                {
                    EEmpFinalPayment finalPayment = CreateFinalPaymentRecord(PaymentCodeID, dailyWages * numberOfDay, formulaRemark + " x " + Math.Round(numberOfDay, 4));
                    return finalPayment;
                }
            }
            return null;
        }

        private EEmpFinalPayment GetStatutoryHolidayPayment()
        {

            double numberOfDay = 0;
            LeaveBalanceCalc calc = new LeaveBalanceCalc(dbConn, m_EmpID, lastEmploymentDate);
            ArrayList balanceItems = calc.getCurrentBalanceList();
            foreach (ELeaveBalance leaveBalance in balanceItems)
            {
                ELeaveType leaveType = new ELeaveType();
                leaveType.LeaveTypeID = leaveBalance.LeaveTypeID;
                if (ELeaveType.db.select(dbConn, leaveType))
                    if (leaveType.LeaveType.Equals(ELeaveType.LEAVETYPECODE_STATUTORYHOLIDAY))
                    {
                        numberOfDay += leaveBalance.getBalance();
                    }
            }

            if (Math.Abs(numberOfDay) >= 0.01)
            {

                double periodRPAmount = PayrollProcess.GetTotalPeriodPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly);
                double dailyRPAmount = PayrollProcess.GetTotalDailyPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, dummyPayPeriod);
                //  Use last Employment for calculating daily wages
                string formulaRemark = string.Empty;
                bool IsDAW = false;
                double dailyWages = PayrollFormula.DailyProrataCaluclation(dbConn, payrollGroup.PayGroupTerminatedStatutoryHolidayCompensationDailyFormula, payrollGroup.PayGroupDefaultProrataFormula, m_EmpID, periodRPAmount, dummyPayPeriod.PayPeriodFr, dummyPayPeriod.PayPeriodTo, payrollGroup.NumOfPeriodPerYear(), lastEmploymentDate, out formulaRemark, out IsDAW);
                if (!IsDAW)
                    if (dailyWages.Equals(0))
                    {
                        formulaRemark = string.Empty;
                        if (!dailyRPAmount.Equals(0))
                        {
                            dailyWages = dailyRPAmount;
                            formulaRemark = dailyRPAmount.ToString("$#,##0.00##");
                        }
                    }
                    else
                    {
                        if (!dailyRPAmount.Equals(0))
                        {
                            dailyWages += dailyRPAmount;
                            formulaRemark += " + " + dailyRPAmount.ToString("$#,##0.00##");
                        }
                    }

                int PaymentCodeID = payrollGroup.PayGroupTerminatedStatutoryHolidayCompensationPaymentCodeID;
                //if (numberOfDay < 0)
                //{
                //    numberOfDay = -numberOfDay;
                //    dailyWages = -dailyWages;
                //    formulaRemark = "-" + formulaRemark;
                //    PaymentCodeID = payrollGroup.PayGroupTerminatedStatutoryHolidayCompensationByEEPaymentCodeID;
                //}
                if (Math.Abs(dailyWages * numberOfDay) >= 0.005)
                {
                    EEmpFinalPayment finalPayment = CreateFinalPaymentRecord(PaymentCodeID, dailyWages * numberOfDay, formulaRemark + " x " + Math.Round(numberOfDay, 4));
                    return finalPayment;
                }
            }
            return null;
        }

        private EEmpFinalPayment GetPaymentInLieuPayment(bool EmployerPayment)
        {
            //  Use last employment date for recurring payment result
            double periodRPAmount = PayrollProcess.GetTotalPeriodPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate , true, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny);
            double dailyRPAmount = PayrollProcess.GetTotalDailyPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, dummyPayPeriod);


            //  Use Notice Date for calculating daily average wages
            string formulaRemark = string.Empty;
            bool IsDAW = false;
            double dailyWages = PayrollFormula.DailyProrataCaluclation(dbConn, payrollGroup.PayGroupTerminatedPaymentInLieuDailyFormula, payrollGroup.PayGroupDefaultProrataFormula, m_EmpID, periodRPAmount, dummyPayPeriod.PayPeriodFr, dummyPayPeriod.PayPeriodTo, payrollGroup.NumOfPeriodPerYear(), resignNoticeDate, out formulaRemark, out IsDAW);
            {
                string formulaRemarkAlternative = string.Empty;
                bool IsDAWAlternative = false;
                double dailyWagesAlternative = PayrollFormula.DailyProrataCaluclation(dbConn, payrollGroup.PayGroupTerminatedPaymentInLieuDailyFormulaAlternative, payrollGroup.PayGroupTerminatedPaymentInLieuDailyFormula, m_EmpID, periodRPAmount, dummyPayPeriod.PayPeriodFr, dummyPayPeriod.PayPeriodTo, payrollGroup.NumOfPeriodPerYear(), resignNoticeDate, out formulaRemarkAlternative, out IsDAWAlternative);
                if (dailyWagesAlternative > 0)
                    if (EmployerPayment)
                    {
                        if (dailyWagesAlternative > dailyWages)
                        {
                            dailyWages = dailyWagesAlternative;
                            formulaRemark = formulaRemarkAlternative;
                            IsDAW = IsDAWAlternative;
                        }
                    }
                    else
                    {
                        if (dailyWagesAlternative < dailyWages)
                        {
                            dailyWages = dailyWagesAlternative;
                            formulaRemark = formulaRemarkAlternative;
                            IsDAW = IsDAWAlternative;
                        }
                    }
            }
            if (!IsDAW)
                if (dailyWages.Equals(0))
                {
                    formulaRemark = string.Empty;
                    if (!dailyRPAmount.Equals(0))
                    {
                        dailyWages = dailyRPAmount;
                        formulaRemark = dailyRPAmount.ToString("$#,##0.00##");
                    }
                }
                else
                {
                    if (!dailyRPAmount.Equals(0))
                    {
                        dailyWages += dailyRPAmount;
                        formulaRemark += " + " + dailyRPAmount.ToString("$#,##0.00##");
                    }
                }

            double monthlyWages = 0;
            {
                if (payrollGroup.PayGroupTerminatedPaymentInLieuMonthlyBaseMethod.Equals(Values.PAYMENT_BASE_MONTHLY_AVERAGE_WAGES))
                {
                    //  Get start date of payroll cycle as As Of date
                    AverageWages averageWages = new AverageWages(dbConn, m_EmpID, resignNoticeDate);
                    monthlyWages = averageWages.MonthlyWages();
                }
                else if (payrollGroup.PayGroupTerminatedPaymentInLieuMonthlyBaseMethod.Equals(Values.PAYMENT_BASE_RECURRING_BASIC_SALARY))
                {
                    monthlyWages = periodRPAmount;
                }
                double monthlyWagesAlternative = 0;
                if (payrollGroup.PayGroupTerminatedPaymentInLieuMonthlyBaseMethodAlternative.Equals(Values.PAYMENT_BASE_MONTHLY_AVERAGE_WAGES))
                {
                    //  Get start date of payroll cycle as As Of date
                    AverageWages averageWages = new AverageWages(dbConn, m_EmpID, resignNoticeDate);
                    monthlyWagesAlternative = averageWages.MonthlyWages();
                }
                else if (payrollGroup.PayGroupTerminatedPaymentInLieuMonthlyBaseMethodAlternative.Equals(Values.PAYMENT_BASE_RECURRING_BASIC_SALARY))
                {
                    monthlyWagesAlternative = periodRPAmount;
                }
                if (monthlyWagesAlternative > 0)
                    if (EmployerPayment)
                    {
                        if (monthlyWagesAlternative > monthlyWages)
                        {
                            monthlyWages = monthlyWagesAlternative;
                        }
                    }
                    else
                    {
                        if (monthlyWagesAlternative < monthlyWages)
                        {
                            monthlyWages = monthlyWagesAlternative;
                        }
                    }
            }
            double shortNoticeAmount = 0;

            string shortNoticeRemark = string.Empty;
            int PaymentCodeID = 0;
            //if (noticeUnit.Equals("D"))
            //    expectedLastEmployDate = expectedLastEmployDate.AddDays(noticePeriod).AddDays(-1);
            //else if (noticeUnit.Equals("M"))
            //    expectedLastEmployDate = expectedLastEmployDate.AddMonths(noticePeriod).AddDays(-1);

            if (!EmployerPayment)
            {
                monthlyWages = -monthlyWages;
                dailyWages = -dailyWages;
                formulaRemark = "-" + formulaRemark;
                PaymentCodeID = GetPaymentInLieuCodeByEmployee().PaymentCodeID;
            }
            else
                PaymentCodeID = GetPaymentInLieuCodeByEmployer().PaymentCodeID;

            if (lastEmploymentDate >= expectedLastEmploymentDate)
                return null;
            else
            {
                double NoOfDay = ((TimeSpan)expectedLastEmploymentDate.Subtract(lastEmploymentDate)).Days;
                if (noticeUnit.Equals("M") && Math.Abs(monthlyWages) > 0)
                {
                    //int dayRemain= ((TimeSpan)expectedLastEmployDate.Subtract(lastEmployDate)).Days ;
                    //int dayProrata=((TimeSpan)expectedLastEmployDate.Subtract(resignDate)).Days;
                    //double prorata = Utility.MonthDifference(lastEmployDate, expectedLastEmployDate.AddDays(-1));
                    double totalNoticeDays = ((TimeSpan)expectedLastEmploymentDate.AddDays(1).Subtract(resignNoticeDate)).Days;
                    shortNoticeAmount = (monthlyWages * noticePeriod * NoOfDay) / totalNoticeDays;//prorata;//noticePeriod * dayRemain / dayProrata;
                    shortNoticeRemark = monthlyWages.ToString("$#,##0.00##")
                        + (noticePeriod.Equals(1) ? string.Empty : " x " + noticePeriod)
                        + (totalNoticeDays.Equals(NoOfDay) ? string.Empty : ((NoOfDay.Equals(1) ? string.Empty : " x " + NoOfDay) + (totalNoticeDays.Equals(1) ? string.Empty : " / " + totalNoticeDays)));
                }
                else
                {
                    shortNoticeAmount = dailyWages * NoOfDay;
                    shortNoticeRemark = formulaRemark
                        + (NoOfDay.Equals(1) ? "" : " x " + NoOfDay);
                }


            }

            EEmpFinalPayment finalPayment = CreateFinalPaymentRecord(PaymentCodeID, shortNoticeAmount, shortNoticeRemark);
            return finalPayment;
        }

        private EEmpFinalPayment GetLongServicePaymentSeverancePayment(bool IsLongServicePayment)
        {
            //  Use Notice Date -1 for As Of Date
            //DateTime asOfDate = dummyPayPeriod.PayPeriodFr.AddDays(-1);
            string Remark = "";
            double Amount = GetLongServicePaymentSeverancePaymentAmount(IsLongServicePayment, out Remark);

            if (Amount > 0)
            {
                int PaymentCodeID = 0;
                if (IsLongServicePayment)
                    PaymentCodeID = GetLongServicePaymentCode().PaymentCodeID;
                else
                    PaymentCodeID = GetSeverancePaymentCode().PaymentCodeID;
                EEmpFinalPayment finalPayment = CreateFinalPaymentRecord(PaymentCodeID, Amount, Remark);
                return finalPayment;
            }
            else
                return null;
        }
        public double GetLongServicePaymentSeverancePaymentAmount(bool IsLongServicePayment, out string Remark)
        {
            double monthlyWages = 0;
            if (payrollGroup != null && payrollGroup.PayGroupID > 0)
            {
                if (payrollGroup.PayGroupTerminatedLSPSPMonthlyBaseMethod.Equals(Values.PAYMENT_BASE_MONTHLY_AVERAGE_WAGES))
                {
                    //  Get start date of payroll cycle as As Of date
                    AverageWages averageWages = new AverageWages(dbConn, m_EmpID, resignNoticeDate);
                    monthlyWages = averageWages.MonthlyWages();
                }
                else if (payrollGroup.PayGroupTerminatedLSPSPMonthlyBaseMethod.Equals(Values.PAYMENT_BASE_RECURRING_BASIC_SALARY))
                {
                    monthlyWages = PayrollProcess.GetTotalPeriodPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny);
                }
                double monthlyWagesAlternative = 0;
                if (payrollGroup.PayGroupTerminatedLSPSPMonthlyBaseMethodAlternative.Equals(Values.PAYMENT_BASE_MONTHLY_AVERAGE_WAGES))
                {
                    //  Get start date of payroll cycle as As Of date
                    AverageWages averageWages = new AverageWages(dbConn, m_EmpID, resignNoticeDate);
                    monthlyWagesAlternative = averageWages.MonthlyWages();
                }
                else if (payrollGroup.PayGroupTerminatedLSPSPMonthlyBaseMethodAlternative.Equals(Values.PAYMENT_BASE_RECURRING_BASIC_SALARY))
                {
                    monthlyWagesAlternative = PayrollProcess.GetTotalPeriodPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny);
                }
                if (monthlyWagesAlternative > 0)
                    if (monthlyWagesAlternative > monthlyWages)
                    {
                        monthlyWages = monthlyWagesAlternative;
                    }

            }
            else
            {
                monthlyWages = PayrollProcess.GetTotalPeriodPayRecurringPayment(dbConn, m_EmpID, lastEmploymentDate, true, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataProrataOnly, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny, PayrollProcess.PaymentCodeProrataOptionEnum.PaymentCodeProrataAny);
                if (monthlyWages <= 0)
                {
                    AverageWages averageWages;
                    averageWages = new AverageWages(dbConn, m_EmpID, resignNoticeDate);
                    monthlyWages = averageWages.MonthlyWages();
                }
            }


            // As Labour Department descript, use last date of notice period as year of service.
            double yearOfService = 0;
            yearOfService = Payroll.PayrollProcess.GetYearOfServer(dbConn, m_EmpID, expectedLastEmploymentDate);
            if (yearOfService < 5 && IsLongServicePayment)
            {
                Remark = string.Empty;
                return 0;
            }
            else if (yearOfService < 2 && !IsLongServicePayment)
            {
                Remark = string.Empty;
                return 0;
            }

            if (monthlyWages > MaxBaseLongServicePayment())
                monthlyWages = MaxBaseLongServicePayment();
            double Amount = (monthlyWages * 2 * yearOfService) / 3;
            Remark = monthlyWages.ToString("$#,##0.00##") + " x 2 / 3 x " + Math.Round(yearOfService, 6);
            if (Amount > MaxTotalLongServicePayment())
            {
                Amount = MaxTotalLongServicePayment();
                Remark += " (Max $" + MaxTotalLongServicePayment() + ")";
            }
            return Amount;
        }

        //private EEmpFinalPayment GetSeverancePayment()
        //{
        //    //  Use Notice Date -1 for As Of Date

        //    DateTime asOfDate = dummyPayPeriod.PayPeriodAttnFr.AddDays(-1);
        //    double Amount = 0;
        //    string Remark = "";

        //    DBFilter filter = new DBFilter();
        //    filter.add(new Match("EmpID", m_EmpID));
        //    filter.add(new Match("EmpRPEffFr", "<", asOfDate));

        //    OR orFilter = new OR();
        //    orFilter.add(new Match("EmpRPEffTo", ">=", asOfDate));
        //    orFilter.add(new NullTerm("EmpRPEffTo"));
        //    filter.add(orFilter);
        //    DBFilter paymentCodeFilter = new DBFilter();
        //    paymentCodeFilter.add(new Match("PaymentTypeID", EPaymentType.SystemPaymentType.BasicSalaryPaymentType(dbConn).PaymentTypeID));

        //    filter.add("EmpRPEffFr", true);

        //    ArrayList recurringPaymentList = EEmpRecurringPayment.db.select(dbConn, filter);

        //    double monthlyWages = 0;

        //    foreach (EEmpRecurringPayment recurringPayment in recurringPaymentList)
        //    {
        //        monthlyWages += ExchangeCurrency.Exchange(recurringPayment.EmpRPAmount, recurringPayment.CurrencyID, false);
        //    }

        //    double yearOfService = Payroll.PayrollProcess.GetYearOfServer(dbConn, m_EmpID, empTerm.EmpTermLastDate);

        //    if (yearOfService < 2)
        //        return null;

        //    monthlyWages = monthlyWages * 2 / 3;
        //    if (monthlyWages > MaxBaseLongServicePayment())
        //        monthlyWages = MaxBaseLongServicePayment();
        //    Amount = monthlyWages * yearOfService;
        //    Remark = "$" + Math.Round(monthlyWages, 4) + " x " + Math.Round(yearOfService, 4);

        //    if (Amount > MaxTotalLongServicePayment())
        //    {
        //        Amount = MaxTotalLongServicePayment();
        //        Remark += " (Max $" + MaxTotalLongServicePayment() + ")";
        //    }
        //    EEmpFinalPayment finalPayment = CreateFinalPaymentRecord(GetSeverancePaymentCode().PaymentCodeID, Amount, Remark);
        //    return finalPayment;
        //}

        private EEmpFinalPayment CreateFinalPaymentRecord(int PaymentCodeID, double Amount, string Remark)
        {
            EPaymentCode paymentCode = new EPaymentCode();
            paymentCode.PaymentCodeID = PaymentCodeID;
            if (EPaymentCode.db.select(dbConn, paymentCode))
            {
                EEmpFinalPayment finalPayment = new EEmpFinalPayment();
                finalPayment.EmpID = m_EmpID;
                finalPayment.PayCodeID = PaymentCodeID;
                finalPayment.CurrencyID = ExchangeCurrency.DefaultCurrency();
                if (paymentCode.PaymentCodeRoundingRule.Equals(Values.ROUNDING_RULE_ROUND_TO))
                    finalPayment.EmpFinalPayAmount = HROne.CommonLib.GenericRoundingFunctions.RoundingTo(Amount, paymentCode.PaymentCodeDecimalPlace, ExchangeCurrency.DefaultCurrencyDecimalPlaces());
                else if (paymentCode.PaymentCodeRoundingRule.Equals(Values.ROUNDING_RULE_ROUND_DOWN))
                    finalPayment.EmpFinalPayAmount = HROne.CommonLib.GenericRoundingFunctions.RoundingDown(Amount, paymentCode.PaymentCodeDecimalPlace, ExchangeCurrency.DefaultCurrencyDecimalPlaces());
                else if (paymentCode.PaymentCodeRoundingRule.Equals(Values.ROUNDING_RULE_ROUND_UP))
                    finalPayment.EmpFinalPayAmount = HROne.CommonLib.GenericRoundingFunctions.RoundingUp(Amount, paymentCode.PaymentCodeDecimalPlace, ExchangeCurrency.DefaultCurrencyDecimalPlaces());

                finalPayment.EmpFinalPayMethod = defaultPayMethd;
                finalPayment.EmpAccID = defaultEmpAccID;
                finalPayment.EmpFinalPayRemark = Remark;
                finalPayment.EmpFinalPayIsAutoGen = true;
                return finalPayment;
            }
            else
                return null;
        }

        [Obsolete("Use EEmpTermination.GetObjectByEmpID(dbConn, int EmpID)")]
        public static EEmpTermination GetEmpTerminationObject(DatabaseConnection dbConn, int EmpID)
        {
            return EEmpTermination.GetObjectByEmpID(dbConn, EmpID);
        }

        //[Obsolete]
        //private static EPayrollPeriod GenerateDummyFinalPaymentPayrollPeriod(int PayrollGroupID, DateTime AsOfDate)
        //{
        //    return PayrollProcess.GenerateDummyPayrollPeriod(dbConn, PayrollGroupID, AsOfDate);
        //}

        private EPaymentCode GetPaymentInLieuCodeByEmployer()
        {
            EPaymentCode paymentCode = new EPaymentCode();
            paymentCode.PaymentCodeID = payrollGroup.PayGroupTerminatedPaymentInLieuERPaymentCodeID;
            if (EPaymentCode.db.select(dbConn, paymentCode))
                return paymentCode;


            const string PAYMENT_CODE = "PAYINLIEU";

            DBFilter paymentCodeFilter = new DBFilter();

            paymentCodeFilter.add(new Match("PaymentCode", PAYMENT_CODE));

            ArrayList paymentCodes = EPaymentCode.db.select(dbConn, paymentCodeFilter);

            if (paymentCodes.Count > 0)
                return (EPaymentCode)paymentCodes[0];
            else
            {
                paymentCode = new EPaymentCode();

                paymentCode.PaymentCode = PAYMENT_CODE;
                paymentCode.PaymentCodeDesc = "Payment In Lieu";

                paymentCode.PaymentCodeIsWages = false;
                paymentCode.PaymentCodeIsMPF = true;
                paymentCode.PaymentCodeIsProrata = false;
                paymentCode.PaymentCodeIsTopUp = false;
                paymentCode.PaymentTypeID = EPaymentType.SystemPaymentType.OthersPaymentType(dbConn).PaymentTypeID;
                EPaymentCode.db.insert(dbConn, paymentCode);
                return paymentCode;

            }
        }

        private EPaymentCode GetPaymentInLieuCodeByEmployee()
        {
            EPaymentCode paymentCode = new EPaymentCode();
            paymentCode.PaymentCodeID = payrollGroup.PayGroupTerminatedPaymentInLieuEEPaymentCodeID;
            if (EPaymentCode.db.select(dbConn, paymentCode))
                return paymentCode;


            const string PAYMENT_CODE = "PAYINLIEU";

            DBFilter paymentCodeFilter = new DBFilter();

            paymentCodeFilter.add(new Match("PaymentCode", PAYMENT_CODE));

            ArrayList paymentCodes = EPaymentCode.db.select(dbConn, paymentCodeFilter);

            if (paymentCodes.Count > 0)
                return (EPaymentCode)paymentCodes[0];
            else
            {
                paymentCode = new EPaymentCode();

                paymentCode.PaymentCode = PAYMENT_CODE;
                paymentCode.PaymentCodeDesc = "Payment In Lieu";

                paymentCode.PaymentCodeIsWages = false;
                paymentCode.PaymentCodeIsMPF = true;
                paymentCode.PaymentCodeIsProrata = false;
                paymentCode.PaymentCodeIsTopUp = false;
                paymentCode.PaymentTypeID = EPaymentType.SystemPaymentType.OthersPaymentType(dbConn).PaymentTypeID;
                EPaymentCode.db.insert(dbConn, paymentCode);
                return paymentCode;

            }
        }

        private EPaymentCode GetLongServicePaymentCode()
        {
            EPaymentCode paymentCode = new EPaymentCode();
            paymentCode.PaymentCodeID = payrollGroup.PayGroupTerminatedLSPPaymentCodeID;
            if (EPaymentCode.db.select(dbConn, paymentCode))
                return paymentCode;

            const string PAYMENT_CODE = PAYMENTCODE_LONGSERVICE;

            DBFilter paymentCodeFilter = new DBFilter();

            paymentCodeFilter.add(new Match("PaymentCode", PAYMENT_CODE));

            ArrayList paymentCodes = EPaymentCode.db.select(dbConn, paymentCodeFilter);

            if (paymentCodes.Count > 0)
                return (EPaymentCode)paymentCodes[0];
            else
            {
                paymentCode = new EPaymentCode();

                paymentCode.PaymentCode = PAYMENT_CODE;
                paymentCode.PaymentCodeDesc = "Long Service Payment";

                paymentCode.PaymentCodeIsWages = false;
                paymentCode.PaymentCodeIsMPF = false;
                paymentCode.PaymentCodeIsProrata = false;
                paymentCode.PaymentCodeIsTopUp = false;
                paymentCode.PaymentTypeID = EPaymentType.SystemPaymentType.LongServicePaymentSeverancePaymentType(dbConn).PaymentTypeID;
                EPaymentCode.db.insert(dbConn, paymentCode);
                return paymentCode;

            }
        }

        private EPaymentCode GetSeverancePaymentCode()
        {
            EPaymentCode paymentCode = new EPaymentCode();
            paymentCode.PaymentCodeID = payrollGroup.PayGroupTerminatedSPPaymentCodeID;
            if (EPaymentCode.db.select(dbConn, paymentCode))
                return paymentCode;


            const string PAYMENT_CODE = PAYMENTCODE_SEVERANCE;

            DBFilter paymentCodeFilter = new DBFilter();

            paymentCodeFilter.add(new Match("PaymentCode", PAYMENT_CODE));

            ArrayList paymentCodes = EPaymentCode.db.select(dbConn, paymentCodeFilter);

            if (paymentCodes.Count > 0)
                return (EPaymentCode)paymentCodes[0];
            else
            {
                paymentCode = new EPaymentCode();

                paymentCode.PaymentCode = PAYMENT_CODE;
                paymentCode.PaymentCodeDesc = "Severance Payment";

                paymentCode.PaymentCodeIsWages = false;
                paymentCode.PaymentCodeIsMPF = false;
                paymentCode.PaymentCodeIsProrata = false;
                paymentCode.PaymentCodeIsTopUp = false;
                paymentCode.PaymentTypeID = EPaymentType.SystemPaymentType.LongServicePaymentSeverancePaymentType(dbConn).PaymentTypeID;
                EPaymentCode.db.insert(dbConn, paymentCode);
                return paymentCode;

            }
        }
        public double MaxBaseLongServicePayment()
        {
            double value;
            if (double.TryParse(ESystemParameter.getParameter(dbConn, ESystemParameter.PARAM_CODE_PAYROLL_MAX_MONTHLY_LSPSP_AMOUNT), out value))
                return value;
            else
                return 22500;
        }
        public double MaxTotalLongServicePayment()
        {
            double value;
            if (double.TryParse(ESystemParameter.getParameter(dbConn, ESystemParameter.PARAM_CODE_PAYROLL_MAX_TOTAL_LSPSP_AMOUNT), out value))
                return value;
            else
                return 390000;
        }
        /* will be merged with HROne.Lib.Payroll.GetMergePaymentRecordByPaymentMethod after updated to 1.13.xxx */
        private static ArrayList GetMergePaymentRecordByPaymentMethod(ArrayList paymentRecords)
        {

            ArrayList mergePaymentRecord = new ArrayList();
            foreach (EPaymentRecord paymentRecord in paymentRecords)
            {
                double paymentAmount = ExchangeCurrency.Exchange(paymentRecord.PayRecActAmount, paymentRecord.CurrencyID, false);

                EPaymentRecord usedTotalPaymentRecordByPayMethod = null;
                foreach (EPaymentRecord totalPaymentRecordByPayMethod in mergePaymentRecord)
                {
                    if (totalPaymentRecordByPayMethod.PayRecMethod == paymentRecord.PayRecMethod && totalPaymentRecordByPayMethod.CurrencyID == paymentRecord.CurrencyID && (paymentRecord.PayRecMethod == "A" && totalPaymentRecordByPayMethod.EmpAccID == paymentRecord.EmpAccID || paymentRecord.PayRecMethod != "A"))
                    {
                        usedTotalPaymentRecordByPayMethod = totalPaymentRecordByPayMethod;
                        break;
                    }

                }
                if (usedTotalPaymentRecordByPayMethod == null)
                {
                    usedTotalPaymentRecordByPayMethod = new EPaymentRecord();
                    usedTotalPaymentRecordByPayMethod.CurrencyID = ExchangeCurrency.DefaultCurrency();
                    usedTotalPaymentRecordByPayMethod.PayRecStatus = PaymentRecordStatus.PAYRECORDSTATUS_ACTIVE;
                    usedTotalPaymentRecordByPayMethod.PayRecType = paymentRecord.PayRecType;
                    usedTotalPaymentRecordByPayMethod.PayRecMethod = paymentRecord.PayRecMethod;
                    usedTotalPaymentRecordByPayMethod.EmpAccID = paymentRecord.EmpAccID;
                    usedTotalPaymentRecordByPayMethod.PaymentCodeID = 0;

                    usedTotalPaymentRecordByPayMethod.PayRecCalAmount = 0;

                    mergePaymentRecord.Add(usedTotalPaymentRecordByPayMethod);
                }

                usedTotalPaymentRecordByPayMethod.PayRecCalAmount += paymentAmount;
                usedTotalPaymentRecordByPayMethod.PayRecActAmount = System.Math.Round(usedTotalPaymentRecordByPayMethod.PayRecCalAmount, ExchangeCurrency.DefaultCurrencyDecimalPlaces(), MidpointRounding.AwayFromZero);
            }

            mergePaymentRecord.Sort(new PaymentRecordCompareByAmount(false));
            return mergePaymentRecord;

        }

    }
}