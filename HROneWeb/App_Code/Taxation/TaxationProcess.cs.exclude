using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections;
using HROne.DataAccess;
using perspectivemind.validation;
using HROne.Lib.Entities;

namespace HRPlus.Taxation
{
    /// <summary>
    /// Summary description for TaxationProcess
    /// </summary>
    public class TaxationGeneration
    {
        public static int GetOrCreateTaxFormID(int TaxCompID, int TaxFormYear, string TaxFormType)
        {
            DBFilter taxFilter = new DBFilter();
            taxFilter.add(new Match("TaxCompID", TaxCompID));
            taxFilter.add(new Match("TaxFormYear", TaxFormYear));
            taxFilter.add(new Match("TaxFormType", TaxFormType));
            ArrayList taxForms = ETaxForm.db.select(taxFilter);

            ETaxForm taxForm = null;
            if (taxForms.Count > 0)
                taxForm = (ETaxForm)taxForms[0];
            else
                taxForm = new ETaxForm();

            ETaxCompany taxComp = new ETaxCompany();
            taxComp.TaxCompID = TaxCompID;
            ETaxCompany.db.select(taxComp);

            taxForm.TaxCompID = TaxCompID;
            taxForm.TaxFormBatchNo = 0;
            taxForm.TaxFormDesignation = taxComp.TaxCompDesignation;
            taxForm.TaxFormEmployerName = taxComp.TaxCompEmployerName;
            taxForm.TaxFormEmployerAddress = taxComp.TaxCompEmployerAddress;
            taxForm.TaxFormERN = taxComp.TaxCompERN;
            taxForm.TaxFormSection = taxComp.TaxCompSection;
            taxForm.TaxFormYear = TaxFormYear;
            taxForm.TaxFormSubmissionDate = AppUtils.ServerDateTime();
            taxForm.TaxFormType = TaxFormType;

            if (taxForm.TaxFormID == 0)
                ETaxForm.db.insert(dbConn, taxForm);
            else
                ETaxForm.db.update(taxForm);
            return taxForm.TaxFormID;
        }

        public static void GenerationFormTaxation(int TaxFormID, int EmpID)
        {
            ArrayList taxEmpPaymentList = new ArrayList();
            ArrayList taxEmpPoRList = new ArrayList();


            ETaxForm taxForm = new ETaxForm();
            taxForm.TaxFormID = TaxFormID;

            EEmpPersonalInfo empInfo = new EEmpPersonalInfo();
            empInfo.EmpID = EmpID;
            if (EEmpPersonalInfo.db.select(empInfo) && ETaxForm.db.select(taxForm))
            {
                DateTime dtStart = new DateTime(taxForm.TaxFormYear - 1, 4, 1);
                DateTime dtEnd = new DateTime(taxForm.TaxFormYear, 3, 31);


                ETaxEmp taxEmp = null;

                DBFilter taxEmpFilter = new DBFilter();
                taxEmpFilter.add(new Match("EmpID", empInfo.EmpID));
                taxEmpFilter.add(new Match("TaxFormID", TaxFormID));
                ArrayList tmpTaxEmps = ETaxEmp.db.select(taxEmpFilter);
                if (tmpTaxEmps.Count > 0)
                    taxEmp = (ETaxEmp)tmpTaxEmps[0];
                else
                    taxEmp = new ETaxEmp();

                taxEmp.EmpID = empInfo.EmpID;
                taxEmp.TaxEmpSheetNo = 0;
                taxEmp.TaxEmpHKID = empInfo.EmpHKID.Trim();//.Replace("(", "").Replace(")", "");
                //if (taxEmp.TaxEmpHKID.Length < 9)
                //    taxEmp.TaxEmpHKID = taxEmp.TaxEmpHKID.PadLeft(9);
                taxEmp.TaxEmpStatus = "O";
                taxEmp.TaxEmpSurname = empInfo.EmpEngSurname.ToUpper().Replace(" ", "");
                taxEmp.TaxEmpOtherName = empInfo.EmpEngOtherName.ToUpper().Replace("  ", " ");
                if (ESystemParameter.getParameter(ESystemParameter.PARAM_CODE_TAXATION_USE_CHINESE_NAME).Equals("Y"))
                    taxEmp.TaxEmpChineseName = empInfo.EmpChiFullName;
                else
                    taxEmp.TaxEmpChineseName = string.Empty;
                taxEmp.TaxEmpSex = empInfo.EmpGender;
                taxEmp.TaxEmpMartialStatus = empInfo.EmpMaritalStatus.Equals("Married", StringComparison.CurrentCultureIgnoreCase) ? "2" : "1";

                if (taxEmp.TaxEmpHKID.Replace("()", "").Trim().Length == 0)
                {
                    taxEmp.TaxEmpPassportNo = empInfo.EmpPassportNo;
                    taxEmp.TaxEmpIssuedCountry = empInfo.EmpPassportIssuedCountry;
                }

                DBFilter empSpouseFilter = new DBFilter();
                empSpouseFilter.add(new Match("EmpID", empInfo.EmpID));
                ArrayList empSpouseList = EEmpSpouse.db.select(empSpouseFilter);
                if (empSpouseList.Count > 0)
                {
                    EEmpSpouse empSpouse = (EEmpSpouse)empSpouseList[0];
                    taxEmp.TaxEmpSpouseName = empSpouse.EmpSpouseSurname.ToUpper().Replace(" ", "") + ' ' + empSpouse.EmpSpouseOtherName.ToUpper();
                    taxEmp.TaxEmpSpouseHKID = empSpouse.EmpSpouseHKID.Trim();//.Replace("(", "").Replace(")", "");
                    ////if (taxEmp.TaxEmpSpouseHKID.Length < 9)
                    ////    taxEmp.TaxEmpSpouseHKID = taxEmp.TaxEmpSpouseHKID.PadLeft(9 - taxEmp.TaxEmpHKID.Length, ' ');

                    if (taxEmp.TaxEmpSpouseHKID.Replace("()", "").Trim().Length == 0)
                    {
                        taxEmp.TaxEmpSpousePassportNo = empSpouse.EmpSpousePassportNo;
                        taxEmp.TaxEmpSpouseIssuedCountry = empSpouse.EmpSpousePassportIssuedCountry;
                    }
                }
                taxEmp.TaxEmpResAddr = empInfo.EmpResAddr.PadRight(90, ' ').Substring(0, 90).Trim();
                taxEmp.TaxEmpResAddrAreaCode = empInfo.EmpResAddrAreaCode;
                taxEmp.TaxEmpCorAddr = empInfo.EmpCorAddr.PadRight(60, ' ').Substring(0, 60).Trim();

                DBFilter empPosFilter = new DBFilter();
                empPosFilter.add(new Match("EmpID", empInfo.EmpID));
                empPosFilter.add(new Match("EmpPosEffFr", "<=", dtEnd));
                OR orPosEffTerms = new OR();
                orPosEffTerms.add(new Match("EmpPosEffTo", ">=", dtStart));
                orPosEffTerms.add(new NullTerm("EmpPosEffTo"));
                empPosFilter.add(orPosEffTerms);
                empPosFilter.add("EmpPosEffFr", false);
                ArrayList empPosList = EEmpPositionInfo.db.select(empPosFilter);

                if (empPosList.Count > 0)
                {
                    EEmpPositionInfo empPos = (EEmpPositionInfo)empPosList[0];
                    EPosition position = new EPosition();
                    position.PositionID = empPos.PositionID;
                    EPosition.db.select(position);
                    taxEmp.TaxEmpCapacity = position.PositionDesc;
                }
                taxEmp.TaxEmpPartTimeEmployer = string.Empty;

                taxEmp.TaxEmpStartDate = dtStart < empInfo.EmpDateOfJoin ? empInfo.EmpDateOfJoin : dtStart;

                DBFilter empTermFilter = new DBFilter();
                empTermFilter.add(new Match("EmpID", empInfo.EmpID));
                empTermFilter.add(new Match("EmpTermLastDate", "<=", dtEnd));
                empTermFilter.add(new Match("EmpTermLastDate", ">=", dtStart));
                empTermFilter.add("EmpTermLastDate", false);


                ArrayList empTermList = EEmpTermination.db.select(empTermFilter);
                if (empTermList.Count == 0)
                    taxEmp.TaxEmpEndDate = dtEnd;
                else
                {
                    EEmpTermination empTermation = (EEmpTermination)empTermList[0];
                    taxEmp.TaxEmpEndDate = empTermation.EmpTermLastDate;
                    ECessationReason reason = new ECessationReason();
                    reason.CessationReasonID = empTermation.CessationReasonID;
                    if (ECessationReason.db.select(reason))
                        taxEmp.TaxEmpCessationReason = reason.CessationReasonDesc;
                    else
                        taxEmp.TaxEmpCessationReason = string.Empty;



                }
                DBFilter empPlaceOfResidenceFilter = new DBFilter();
                empPlaceOfResidenceFilter.add(new Match("EmpID", empInfo.EmpID));
                empPlaceOfResidenceFilter.add(new Match("EmpPoRFrom", "<=", dtEnd));
                OR orPoRToTerms = new OR();
                orPoRToTerms.add(new Match("EmpPoRTo", ">=", dtStart));
                orPoRToTerms.add(new NullTerm("EmpPoRTo"));
                empPlaceOfResidenceFilter.add(orPoRToTerms);
                empPlaceOfResidenceFilter.add("EmpPoRFrom", true);

                ArrayList empPlaceOfResidenceList = EEmpPlaceOfResidence.db.select(empPlaceOfResidenceFilter);
                if (empPlaceOfResidenceList.Count > 0)
                {
                    foreach (EEmpPlaceOfResidence empPoR in empPlaceOfResidenceList)
                    {
                        taxEmp.TaxEmpPlaceOfResidenceIndicator = 1;
                        ETaxEmpPlaceOfResidence taxEmpPoR = new ETaxEmpPlaceOfResidence();
                        taxEmpPoR.TaxEmpPlaceAddress = empPoR.EmpPoRPropertyAddr;
                        taxEmpPoR.TaxEmpPlaceEERent = Convert.ToInt64(empPoR.EmpPoRPayToLandEE);
                        taxEmpPoR.TaxEmpPlaceEERentRefunded = Convert.ToInt64(empPoR.EmpPoRRefundToEE);
                        taxEmpPoR.TaxEmpPlaceERRent = Convert.ToInt64(empPoR.EmpPoRPayToLandER);
                        taxEmpPoR.TaxEmpPlaceERRentByEE = Convert.ToInt64(empPoR.EmpPoRPayToERByEE);
                        taxEmpPoR.TaxEmpPlaceNature = empPoR.EmpPoRNature;
                        taxEmpPoR.TaxEmpPlacePeriodFr = empPoR.EmpPoRFrom < taxEmp.TaxEmpStartDate ? taxEmp.TaxEmpStartDate : empPoR.EmpPoRFrom;
                        if (empPoR.EmpPoRTo.Ticks != 0)
                            taxEmpPoR.TaxEmpPlacePeriodTo = empPoR.EmpPoRTo > taxEmp.TaxEmpEndDate ? taxEmp.TaxEmpEndDate : empPoR.EmpPoRTo;
                        else
                            taxEmpPoR.TaxEmpPlacePeriodTo = taxEmp.TaxEmpEndDate;
                        taxEmpPoR.RelatedTaxEmp = taxEmp;
                        taxEmpPoRList.Add(taxEmpPoR);


                    }
                }
                else
                    taxEmp.TaxEmpPlaceOfResidenceIndicator = 0;

                taxEmp.TaxEmpOvearseasIncomeIndicator = 0;
                taxEmp.TaxEmpOverseasCompanyAmount = string.Empty;
                taxEmp.TaxEmpOverseasCompanyName = string.Empty;
                taxEmp.TaxEmpOverseasCompanyAddress = string.Empty;
                taxEmp.TaxEmpTaxFileNo = string.Empty;

                taxEmp.TaxEmpIsERBearTax = "N";
                taxEmp.TaxEmpIsShareOptionsGrant = "N";

                ArrayList taxPaymentList = TaxPaymentList(taxForm.TaxFormType);
                foreach (ETaxPayment taxPaymentType in taxPaymentList)
                {
                    ETaxEmpPayment taxEmpPayment = null;
                    if (taxEmp.TaxEmpID != 0)
                    {
                        DBFilter taxEmpPaymentFilter = new DBFilter();
                        taxEmpPaymentFilter.add(new Match("TaxEmpID", taxEmp.TaxEmpID));
                        taxEmpPaymentFilter.add(new Match("TaxPayID", taxPaymentType.TaxPayID));
                        ArrayList oldTaxEmpPaymentList = ETaxEmpPayment.db.select(taxEmpPaymentFilter);

                        if (oldTaxEmpPaymentList.Count > 0)
                            taxEmpPayment = (ETaxEmpPayment)oldTaxEmpPaymentList[0];
                        else
                            taxEmpPayment = new ETaxEmpPayment();

                    }
                    else
                        taxEmpPayment = new ETaxEmpPayment();
                    taxEmpPayment.TaxPayID = taxPaymentType.TaxPayID;
                    if (taxPaymentType.TaxPayIsShowNature.Equals("Y", StringComparison.CurrentCultureIgnoreCase))
                        taxEmpPayment.TaxEmpPayNature = taxPaymentType.TaxPayNature;
                    taxEmpPayment.TaxEmpPayPeriodFr = taxEmp.TaxEmpStartDate;
                    taxEmpPayment.TaxEmpPayPeriodTo = taxEmp.TaxEmpEndDate;
                    taxEmpPayment.RelatedTaxEmp = taxEmp;


                    if (taxForm.TaxFormType.Equals("E", StringComparison.CurrentCultureIgnoreCase))
                    {

                        if (empPosList.Count > 0)
                        {
                            //  Get First terms
                            EEmpPositionInfo empPos = (EEmpPositionInfo)empPosList[empPosList.Count - 1];

                            double totalTaxPaymentAmount = 0;
                            DBFilter empRPFilter = new DBFilter();

                            DBFilter taxPaymentFilter = new DBFilter();
                            taxPaymentFilter.add(new Match("TaxPayID", taxPaymentType.TaxPayID));
                            empRPFilter.add(new IN("PayCodeID", "Select PaymentCodeID from TaxPaymentMap", taxPaymentFilter));
                            empRPFilter.add(new Match("EmpRPEffFr", empPos.EmpPosEffFr));
                            empRPFilter.add(new Match("EmpID", empInfo.EmpID));


                            ArrayList empRPList = EEmpRecurringPayment.db.select(empRPFilter);
                            foreach (EEmpRecurringPayment empRP in empRPList)
                            {
                                if (empRP.EmpRPUnit.Equals("P"))
                                {
                                    EPayrollGroup payGroup = new EPayrollGroup();
                                    payGroup.PayGroupID = empPos.PayGroupID;
                                    EPayrollGroup.db.select(payGroup);
                                    if (payGroup.PayGroupFreq.Equals("M", StringComparison.CurrentCultureIgnoreCase))
                                    {
                                        totalTaxPaymentAmount += empRP.EmpRPAmount;
                                    }
                                    else if (payGroup.PayGroupFreq.Equals("S", StringComparison.CurrentCultureIgnoreCase))
                                    {
                                        totalTaxPaymentAmount += empRP.EmpRPAmount * 2;
                                    }
                                }
                            }
                            taxEmpPayment.TaxEmpPayAmount = Convert.ToInt64(Math.Truncate(HRPlus.CommonLib.GenericRoundingFunctions.RoundingTo(totalTaxPaymentAmount, 2, 2)));
                            taxEmpPaymentList.Add(taxEmpPayment);

                        }


                    }
                    else
                    {
                        double totalTaxPaymentAmount = 0;
                        DBFilter paymentRecordFilter = new DBFilter();

                        DBFilter taxPaymentFilter = new DBFilter();
                        taxPaymentFilter.add(new Match("TaxPayID", taxPaymentType.TaxPayID));
                        paymentRecordFilter.add(new IN("PaymentCodeID", "Select PaymentCodeID from TaxPaymentMap", taxPaymentFilter));

                        DBFilter empPayrollFilter = new DBFilter();
                        empPayrollFilter.add(new Match("EmpID", empInfo.EmpID));

                        DBFilter payrollPeriodFilter = new DBFilter();
                        payrollPeriodFilter.add(new Match("PayPeriodTo", "<=", dtEnd));
                        payrollPeriodFilter.add(new Match("PayPeriodTo", ">=", dtStart));
                        empPayrollFilter.add(new IN("PayPeriodID", "Select payperiodID from PayrollPeriod", payrollPeriodFilter));

                        paymentRecordFilter.add(new IN("EmpPayrollID", "Select EmpPayrollID from empPayroll", empPayrollFilter));
                        ArrayList paymentRecordList = EPaymentRecord.db.select(paymentRecordFilter);
                        foreach (EPaymentRecord paymentRecord in paymentRecordList)
                        {
                            totalTaxPaymentAmount += paymentRecord.PayRecActAmount;
                        }
                        taxEmpPayment.TaxEmpPayAmount = Convert.ToInt64(Math.Truncate(HRPlus.CommonLib.GenericRoundingFunctions.RoundingTo(totalTaxPaymentAmount, 2, 2)));
                        taxEmpPaymentList.Add(taxEmpPayment);
                    }
                }


                taxEmp.TaxFormID = TaxFormID;
                if (taxEmp.TaxEmpID == 0)
                    ETaxEmp.db.insert(dbConn, taxEmp);
                else
                    ETaxEmp.db.update(taxEmp);
                DBFilter taxPoRDeleteFilter = new DBFilter();
                taxPoRDeleteFilter.add(new Match("TaxEmpID", taxEmp.TaxEmpID));
                ETaxEmpPlaceOfResidence.db.delete(taxPoRDeleteFilter);

                foreach (ETaxEmpPayment taxEmpPayment in taxEmpPaymentList)
                {
                    taxEmpPayment.TaxEmpID = taxEmpPayment.RelatedTaxEmp.TaxEmpID;
                    if (taxEmpPayment.TaxEmpPayAmount != 0)
                    {
                        if (taxEmpPayment.TaxEmpPayID == 0)
                            ETaxEmpPayment.db.insert(dbConn, taxEmpPayment);
                        else
                            ETaxEmpPayment.db.update(taxEmpPayment);
                    }
                    else
                        if (taxEmpPayment.TaxEmpPayID != 0)
                            ETaxEmpPayment.db.delete(taxEmpPayment);

                }
                foreach (ETaxEmpPlaceOfResidence taxEmpPlaceOfResidence in taxEmpPoRList)
                {
                    taxEmpPlaceOfResidence.TaxEmpID = taxEmpPlaceOfResidence.RelatedTaxEmp.TaxEmpID;
                    if (taxEmpPlaceOfResidence.TaxEmpPlaceID == 0)
                        ETaxEmpPlaceOfResidence.db.insert(dbConn, taxEmpPlaceOfResidence);
                    else
                        ETaxEmpPlaceOfResidence.db.update(taxEmpPlaceOfResidence);
                }
            }

        }

        public static void GenerationFormTaxation(int TaxCompID, int TaxFormYear, string TaxFormType, ArrayList EmpList)
        {

            int taxFormID = GetOrCreateTaxFormID(TaxCompID, TaxFormYear, TaxFormType);



            foreach (EEmpPersonalInfo empInfo in EmpList)
            {
                GenerationFormTaxation(taxFormID, empInfo.EmpID);
            }
            if (TaxFormType.Equals("B", StringComparison.CurrentCultureIgnoreCase))
                RearrangeSheetNo(taxFormID);

        }

        public static void RearrangeSheetNo(int TaxFormID)
        {
            DBFilter taxEmpFilter = new DBFilter();
            taxEmpFilter.add(new Match("TaxFormID",TaxFormID));
            taxEmpFilter.add(new Match("TaxEmpSheetNo","<=",900000));
            taxEmpFilter.add("TaxEmpSurname",true);
            taxEmpFilter.add("TaxEmpOtherName",true);
            ArrayList taxEmpList = ETaxEmp.db.select(taxEmpFilter);
            int intSheetNumCount=0;
            foreach (ETaxEmp taxEmp in taxEmpList)
            {
                intSheetNumCount++;
                if (taxEmp.TaxEmpSheetNo != intSheetNumCount)
                {
                    taxEmp.TaxEmpSheetNo = intSheetNumCount;
                    ETaxEmp.db.update(taxEmp);
                }
            }
        }

        private static ArrayList TaxPaymentList(string TaxFormType)
        {
            DBFilter TaxPaymentFilter= new DBFilter();
            TaxPaymentFilter.add(new Match("TaxFormType",TaxFormType));
            return ETaxPayment.db.select(TaxPaymentFilter);
        }

        public static Taxation_IR56B_DataSet GenerateTaxationDataSet(int TaxFormID, ArrayList TaxEmpList)
        {
            Taxation_IR56B_DataSet dataSet = new Taxation_IR56B_DataSet();
            ETaxForm taxForm = new ETaxForm();
            taxForm.TaxFormID = TaxFormID;
            if (ETaxForm.db.select(taxForm))
            {
                Taxation_IR56B_DataSet.TaxationHeaderDataTable taxHeaderTable = dataSet.TaxationHeader;
                Taxation_IR56B_DataSet.IR56BDetailDataTable taxDetailTable = dataSet.IR56BDetail;
                Taxation_IR56B_DataSet.TaxationHeaderRow taxHeaderRow = taxHeaderTable.NewTaxationHeaderRow();
                taxHeaderRow.TaxFormID = taxForm.TaxFormID;
                taxHeaderRow.Section = taxForm.TaxFormSection;
                taxHeaderRow.ERN = taxForm.TaxFormERN;
                taxHeaderRow.YearReturn = taxForm.TaxFormYear;
                taxHeaderRow.SubmissionDate = taxForm.TaxFormSubmissionDate;
                taxHeaderRow.BatchNo = taxForm.TaxFormBatchNo;
                taxHeaderRow.SheetNo = 0;
                taxHeaderRow.EmployerName = taxForm.TaxFormEmployerName;
                taxHeaderRow.EmployerAddress = taxForm.TaxFormEmployerAddress;
                taxHeaderRow.Designation = taxForm.TaxFormDesignation;
                taxHeaderRow.TotalIncome = 0;
                taxHeaderRow.TotalRecord = 0;

                taxHeaderTable.Rows.Add(taxHeaderRow);
                if (TaxEmpList == null)
                {
                    DBFilter taxEmpFilter = new DBFilter();
                    taxEmpFilter.add(new Match("TaxFormID", TaxFormID));
                    taxEmpFilter.add("TaxEmpSheetNo",true);
                    TaxEmpList = ETaxEmp.db.select(taxEmpFilter);
                }
                foreach (ETaxEmp taxEmp in TaxEmpList)
                {
                    taxHeaderRow.TotalRecord++;
                    Taxation_IR56B_DataSet.IR56BDetailRow taxDetailRow = taxDetailTable.NewIR56BDetailRow();
                    taxDetailRow.TaxEmpID = taxEmp.TaxEmpID;
                    taxDetailRow.TaxFormID = taxForm.TaxFormID;
                    taxDetailRow.SheetNo = taxEmp.TaxEmpSheetNo;
                    taxDetailRow.TaxFileNo = taxEmp.TaxEmpTaxFileNo;
                    if (!taxEmp.TaxEmpHKID.Equals("()"))
                        taxDetailRow.HKID = taxEmp.TaxEmpHKID;
                    else
                        taxDetailRow.HKID = string.Empty;
                    taxDetailRow.EmployeeSurname = taxEmp.TaxEmpSurname;
                    taxDetailRow.EmployeeOtherName = taxEmp.TaxEmpOtherName;
                    taxDetailRow.EmployeeChineseName = taxEmp.TaxEmpChineseName;
                    taxDetailRow.Sex = taxEmp.TaxEmpSex;
                    taxDetailRow.MaritalStatus = taxEmp.TaxEmpMartialStatus;
                    taxDetailRow.EmployeePassportNoIssueCountry = taxEmp.TaxEmpPassportNo + " " + taxEmp.TaxEmpIssuedCountry;
                    taxDetailRow.SpouseName = taxEmp.TaxEmpSpouseName;
                    if (!string.IsNullOrEmpty(taxEmp.TaxEmpSpouseHKID))
                        if (!taxEmp.TaxEmpSpouseHKID.Equals("()"))
                            taxDetailRow.SpouseHKID = taxEmp.TaxEmpSpouseHKID;
                        else
                            taxDetailRow.SpouseHKID = string.Empty;
                    taxDetailRow.SpousePassportNoIssueCountry = taxEmp.TaxEmpSpousePassportNo + " " + taxEmp.TaxEmpSpouseIssuedCountry;
                    taxDetailRow.ResidentialAddress = taxEmp.TaxEmpResAddr;
                    taxDetailRow.ResidentialAddressAreaCode = taxEmp.TaxEmpResAddrAreaCode;
                    taxDetailRow.CorrespondenceAddress = taxEmp.TaxEmpCorAddr;
                    taxDetailRow.CapacityEmployed = taxEmp.TaxEmpCapacity;
                    taxDetailRow.PartTimeEmployer = taxEmp.TaxEmpPartTimeEmployer;
                    taxDetailRow.EmploymentStartDate = taxEmp.TaxEmpStartDate;
                    taxDetailRow.EmploymentEndDate = taxEmp.TaxEmpEndDate;
                    taxDetailRow.CessationReason = taxEmp.TaxEmpCessationReason;
                    taxDetailRow.TotalIncome = 0;

                    DBFilter taxEmpPaymentFilter = new DBFilter();
                    taxEmpPaymentFilter.add(new Match("TaxEmpID", taxEmp.TaxEmpID));
                    ArrayList taxEmpPaymentList = ETaxEmpPayment.db.select(taxEmpPaymentFilter);
                    foreach (ETaxEmpPayment taxEmpPayment in taxEmpPaymentList)
                    {
                        ETaxPayment taxPayment = new ETaxPayment();
                        taxPayment.TaxPayID = taxEmpPayment.TaxPayID;
                        if (ETaxPayment.db.select(taxPayment))
                        {
                            taxDetailRow["PeriodFr_" + taxPayment.TaxPayCode] = taxEmpPayment.TaxEmpPayPeriodFr;
                            taxDetailRow["PeriodTo_" + taxPayment.TaxPayCode] = taxEmpPayment.TaxEmpPayPeriodTo;
                            taxDetailRow["amount_" + taxPayment.TaxPayCode] = taxEmpPayment.TaxEmpPayAmount;
                            taxHeaderRow.TotalIncome += taxEmpPayment.TaxEmpPayAmount;
                            taxDetailRow.TotalIncome += taxEmpPayment.TaxEmpPayAmount;
                            if (taxPayment.TaxPayCode.StartsWith("k", StringComparison.CurrentCultureIgnoreCase))
                                taxDetailRow["Nature_" + taxPayment.TaxPayCode] = taxEmpPayment.TaxEmpPayNature;
                            
                        }

                    }
                    DBFilter taxEmpPoRFilter = new DBFilter();
                    taxEmpPoRFilter.add(new Match("TaxEmpID", taxEmp.TaxEmpID));
                    ArrayList taxEmpPoRList = ETaxEmpPlaceOfResidence.db.select(taxEmpPoRFilter);
                    int iPoRCount = 0;
                    foreach (ETaxEmpPlaceOfResidence taxEmpPoR in taxEmpPoRList)
                    {
                        iPoRCount++;
                        if (iPoRCount <= 2)
                        {
                            taxDetailRow["PlaceOfResidenceAddress" + iPoRCount] = taxEmpPoR.TaxEmpPlaceAddress;
                            taxDetailRow["PlaceOfResidenceNature" + iPoRCount] = taxEmpPoR.TaxEmpPlaceNature;
                            taxDetailRow["PlaceOfResidenceFr" + iPoRCount] = taxEmpPoR.TaxEmpPlacePeriodFr;
                            taxDetailRow["PlaceOfResidenceTo" + iPoRCount] = taxEmpPoR.TaxEmpPlacePeriodTo;
                            taxDetailRow["PlaceOfResidenceRentByER" + iPoRCount] = taxEmpPoR.TaxEmpPlaceERRent;
                            taxDetailRow["PlaceOfResidenceRentByEE" + iPoRCount] = taxEmpPoR.TaxEmpPlaceEERent;
                            taxDetailRow["PlaceOfResidenceRefundedEE" + iPoRCount] = taxEmpPoR.TaxEmpPlaceEERentRefunded;
                            taxDetailRow["PlaceOfResidenceRentToERByEE" + iPoRCount] = taxEmpPoR.TaxEmpPlaceERRentByEE;
                        }
                    }
                    taxDetailRow.PlaceOfResidenceIndicator = taxEmp.TaxEmpPlaceOfResidenceIndicator;
                    taxDetailRow.OverseasIncomeIndicator = taxEmp.TaxEmpOvearseasIncomeIndicator;
                    taxDetailRow.OverseasCompanyName = taxEmp.TaxEmpOverseasCompanyName;
                    taxDetailRow.OverseasCompanyAddress = taxEmp.TaxEmpOverseasCompanyAddress;
                    taxDetailRow.OverseasCompanyAmount = taxEmp.TaxEmpOverseasCompanyAmount;
                    taxDetailRow.NewEmployerNameddress = taxEmp.TaxEmpNewEmployerNameddress;
                    taxDetailRow.FutureCorAddr = taxEmp.TaxEmpFutureCorAddr;
                    taxDetailRow.LeaveHKDate = taxEmp.TaxEmpLeaveHKDate;
                    taxDetailRow.IsERBearTax = taxEmp.TaxEmpIsERBearTax;
                    taxDetailRow.IsMoneyHoldByOrdinance = taxEmp.TaxEmpIsMoneyHoldByOrdinance;
                    if (!string.IsNullOrEmpty(taxEmp.TaxEmpIsMoneyHoldByOrdinance))
                        if (taxEmp.TaxEmpIsMoneyHoldByOrdinance.Equals("Y"))
                            taxDetailRow.HoldAmount = taxEmp.TaxEmpHoldAmount;
                        else if (taxEmp.TaxEmpIsMoneyHoldByOrdinance.Equals("N"))
                            taxDetailRow.ReasonForNotHold = taxEmp.TaxEmpReasonForNotHold;
                    taxDetailRow.ReasonForDepartureReason = taxEmp.TaxEmpReasonForDepartureReason;
                    if (!string.IsNullOrEmpty(taxEmp.TaxEmpReasonForDepartureReason))
                        if (taxEmp.TaxEmpReasonForDepartureReason.Equals("Other"))
                            taxDetailRow.ReasonForDepartureOtherReason = taxEmp.TaxEmpReasonForDepartureOtherReason;
                    taxDetailRow.IsEEReturnHK = taxEmp.TaxEmpIsEEReturnHK;
                    if (!string.IsNullOrEmpty(taxEmp.TaxEmpIsEEReturnHK))
                        if (taxEmp.TaxEmpIsEEReturnHK.Equals("Y"))
                            taxDetailRow.EEReturnHKDate = taxEmp.TaxEmpEEReturnHKDate;
                    taxDetailRow.IsShareOptionsGrant = taxEmp.TaxEmpIsShareOptionsGrant;
                    if (!string.IsNullOrEmpty(taxEmp.TaxEmpIsShareOptionsGrant))
                        if (taxEmp.TaxEmpIsShareOptionsGrant.Equals("Y"))
                        {
                            taxDetailRow.ShareOptionsGrantCount = taxEmp.TaxEmpShareOptionsGrantCount;
                            taxDetailRow.ShareOptionsGrantDate = taxEmp.TaxEmpShareOptionsGrantDate;
                        }
                    taxDetailRow.PreviousEmployerNameddress = taxEmp.TaxEmpPreviousEmployerNameddress;
                    taxDetailTable.Rows.Add(taxDetailRow);
                }
            }
            return dataSet;
        }
        public static string GenerateTaxationFileData(int TaxFormID)
        {
            
            Taxation_IR56B_DataSet dataSet = GenerateTaxationDataSet(TaxFormID,null);
            string taxData = string.Empty;
            foreach (Taxation_IR56B_DataSet.TaxationHeaderRow header in dataSet.TaxationHeader.Rows)
            {
                taxData += header.Section.PadRight(3).Substring(0, 3);
                taxData += header.ERN.PadRight(8).Substring(0, 8);
                taxData += header.YearReturn.ToString().PadRight(4).Substring(0, 4);
                taxData += header.SubmissionDate.ToString("yyyyMMdd");
                taxData += header.BatchNo.ToString("00000");
                taxData += "000000";
                taxData += string.Empty.PadRight(9);
                taxData += BytePadRightWithMaxLength(header.EmployerName, 70);
                taxData += BytePadRightWithMaxLength(header.Designation, 25);
                taxData += header.TotalRecord.ToString("00000");
                taxData += header.TotalIncome.ToString().PadLeft(11,'0');
                taxData += string.Empty.PadRight(1480);
                taxData += "\r\n";
                if (System.Text.Encoding.Default.GetBytes(taxData).Length != 1636)
                    throw new Exception("Invalid Header Length");
                foreach (Taxation_IR56B_DataSet.IR56BDetailRow detail in dataSet.IR56BDetail.Rows)
                {
                    if (detail.TaxFormID == header.TaxFormID)
                    {
                        string taxDetail = string.Empty;
                        taxDetail += header.Section.PadRight(3).Substring(0, 3);
                        taxDetail += header.ERN.PadRight(8).Substring(0, 8);
                        taxDetail += header.YearReturn.ToString().PadRight(4).Substring(0, 4);
                        taxDetail += header.SubmissionDate.ToString("yyyyMMdd");
                        taxDetail += header.BatchNo.ToString("00000");
                        taxDetail += detail.SheetNo.ToString("000000");
                        taxDetail += BytePadLeftWithMaxLength(detail.HKID.Trim().Replace("(", "").Replace(")", ""), 9);
                        taxDetail += "O";
                        taxDetail += BytePadRightWithMaxLength(detail.EmployeeSurname, 20);
                        taxDetail += BytePadRightWithMaxLength(detail.EmployeeOtherName, 55);
                        taxDetail += BytePadRightWithMaxLength(detail.EmployeeChineseName, 50);
                        taxDetail += BytePadRightWithMaxLength(detail.Sex, 1);
                        taxDetail += BytePadRightWithMaxLength(detail.MaritalStatus, 1);
                        taxDetail += BytePadRightWithMaxLength(detail.EmployeePassportNoIssueCountry, 40);
                        taxDetail += BytePadRightWithMaxLength(detail.SpouseName, 50);
                        taxDetail += BytePadLeftWithMaxLength(detail.SpouseHKID.Trim().Replace("(", "").Replace(")", ""), 9);
                        taxDetail += BytePadRightWithMaxLength(detail.SpousePassportNoIssueCountry,40);
                        taxDetail += BytePadRightWithMaxLength(detail.ResidentialAddress, 90);
                        taxDetail += BytePadRightWithMaxLength(detail.ResidentialAddressAreaCode, 1);
                        taxDetail += BytePadRightWithMaxLength(detail.CorrespondenceAddress, 60);
                        taxDetail += BytePadRightWithMaxLength(detail.CapacityEmployed, 40);
                        taxDetail += BytePadRightWithMaxLength(detail.PartTimeEmployer, 30);
                        taxDetail += detail.EmploymentStartDate.ToString("yyyyMMdd");
                        taxDetail += detail.EmploymentEndDate.ToString("yyyyMMdd");
                        if (detail["PeriodFr_a"] != System.DBNull.Value && detail["PeriodTo_a"] !=  System.DBNull.Value && detail["Amount_a"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_a.ToString("yyyyMMdd") + " - " + detail.PeriodTo_a.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_a.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_b"] != System.DBNull.Value && detail["PeriodTo_b"] != System.DBNull.Value && detail["Amount_b"] != System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_b.ToString("yyyyMMdd") + " - " + detail.PeriodTo_b.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_b.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_c"] !=  System.DBNull.Value && detail["PeriodTo_c"] !=  System.DBNull.Value && detail["Amount_c"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_c.ToString("yyyyMMdd") + " - " + detail.PeriodTo_c.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_c.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_d"] !=  System.DBNull.Value && detail["PeriodTo_d"] !=  System.DBNull.Value && detail["Amount_d"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_d.ToString("yyyyMMdd") + " - " + detail.PeriodTo_d.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_d.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_e"] !=  System.DBNull.Value && detail["PeriodTo_e"] !=  System.DBNull.Value && detail["Amount_e"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_e.ToString("yyyyMMdd") + " - " + detail.PeriodTo_e.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_e.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_f"] !=  System.DBNull.Value && detail["PeriodTo_f"] !=  System.DBNull.Value && detail["Amount_f"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_f.ToString("yyyyMMdd") + " - " + detail.PeriodTo_f.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_f.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_g"] !=  System.DBNull.Value && detail["PeriodTo_g"] !=  System.DBNull.Value && detail["Amount_g"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_g.ToString("yyyyMMdd") + " - " + detail.PeriodTo_g.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_g.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_h"] !=  System.DBNull.Value && detail["PeriodTo_h"] !=  System.DBNull.Value && detail["Amount_h"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_h.ToString("yyyyMMdd") + " - " + detail.PeriodTo_h.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_h.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_i"] !=  System.DBNull.Value && detail["PeriodTo_i"] !=  System.DBNull.Value && detail["Amount_i"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_i.ToString("yyyyMMdd") + " - " + detail.PeriodTo_i.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_i.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_j"] !=  System.DBNull.Value && detail["PeriodTo_j"] !=  System.DBNull.Value && detail["Amount_j"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_j.ToString("yyyyMMdd") + " - " + detail.PeriodTo_j.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_j.ToString("000000000"), 9);
                        }
                        else
                            taxDetail += string.Empty.PadLeft(28);
                        if (detail["PeriodFr_k1"] !=  System.DBNull.Value && detail["PeriodTo_k1"] !=  System.DBNull.Value && detail["Amount_k1"] !=  System.DBNull.Value)
                        {
                            taxDetail += BytePadLeftWithMaxLength(detail["Nature_k1"] !=  System.DBNull.Value ? detail.Nature_k1 : string.Empty, 35);
                            taxDetail += detail.PeriodFr_k1.ToString("yyyyMMdd") + " - " + detail.PeriodTo_k1.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_k1.ToString("000000000"), 9);
                        }
                        else
                        {
                            taxDetail += string.Empty.PadLeft(35);
                            taxDetail += string.Empty.PadLeft(28);
                        }
                        if (detail["PeriodFr_k2"] !=  System.DBNull.Value && detail["PeriodTo_k2"] !=  System.DBNull.Value && detail["Amount_k2"] !=  System.DBNull.Value)
                        {
                            taxDetail += BytePadLeftWithMaxLength(detail["Nature_k2"] !=  System.DBNull.Value ? detail.Nature_k2 : string.Empty, 35);
                            taxDetail += detail.PeriodFr_k2.ToString("yyyyMMdd") + " - " + detail.PeriodTo_k2.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_k2.ToString("000000000"), 9);
                        }
                        else
                        {
                            taxDetail += string.Empty.PadLeft(35);
                            taxDetail += string.Empty.PadLeft(28);
                        }
                        if (detail["PeriodFr_k3"] !=  System.DBNull.Value && detail["PeriodTo_k3"] !=  System.DBNull.Value && detail["Amount_k3"] !=  System.DBNull.Value)
                        {
                            taxDetail += BytePadLeftWithMaxLength(detail["Nature_k3"] !=  System.DBNull.Value ? detail.Nature_k3 : string.Empty, 35);
                            taxDetail += detail.PeriodFr_k3.ToString("yyyyMMdd") + " - " + detail.PeriodTo_k3.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_k3.ToString("000000000"), 9);
                        }
                        else
                        {
                            taxDetail += string.Empty.PadLeft(35);
                            taxDetail += string.Empty.PadLeft(28);
                        }
                        if (detail["PeriodFr_l"] !=  System.DBNull.Value && detail["PeriodTo_l"] !=  System.DBNull.Value && detail["Amount_l"] !=  System.DBNull.Value)
                        {
                            taxDetail += detail.PeriodFr_l.ToString("yyyyMMdd") + " - " + detail.PeriodTo_l.ToString("yyyyMMdd");
                            taxDetail += BytePadLeftWithMaxLength(detail.Amount_l.ToString("000000000"), 9);
                        }
                        else
                        {
                            taxDetail += string.Empty.PadLeft(28);
                        }
                        taxDetail += BytePadLeftWithMaxLength(detail.TotalIncome.ToString("000000000"), 9);
                        taxDetail += BytePadRightWithMaxLength(detail.PlaceOfResidenceIndicator.ToString(), 1);
                        taxDetail += BytePadRightWithMaxLength(detail.PlaceOfResidenceAddress1, 110);
                        taxDetail += BytePadRightWithMaxLength(detail.PlaceOfResidenceNature1, 19);
                        if (detail["PlaceOfResidenceFr1"] != System.DBNull.Value && detail["PlaceOfResidenceTo1"] != System.DBNull.Value)
                            taxDetail += BytePadRightWithMaxLength(detail.PlaceOfResidenceFr1.ToString("yyyy/MM/dd") + " - " + detail.PlaceOfResidenceTo1.ToString("yyyy/MM/dd"), 26);
                        else
                            taxDetail += string.Empty.PadLeft(26);
                        taxDetail += BytePadLeftWithMaxLength(detail["PlaceOfResidenceRentByER1"] != System.DBNull.Value ? detail.PlaceOfResidenceRentByER1.ToString().PadLeft(7,'0') : "", 7);
                        taxDetail += BytePadLeftWithMaxLength(detail["PlaceOfResidenceRentByEE1"] != System.DBNull.Value ? detail.PlaceOfResidenceRentByEE1.ToString().PadLeft(7, '0') : "", 7);
                        taxDetail += BytePadLeftWithMaxLength(detail["PlaceOfResidenceRefundedEE1"] != System.DBNull.Value ? detail.PlaceOfResidenceRefundedEE1.ToString().PadLeft(7, '0') : "", 7);
                        taxDetail += BytePadLeftWithMaxLength(detail["PlaceOfResidenceRentToERByEE1"] != System.DBNull.Value ? detail.PlaceOfResidenceRentToERByEE1.ToString().PadLeft(7, '0') : "", 7);
                        taxDetail += BytePadRightWithMaxLength(detail.PlaceOfResidenceAddress2, 110);
                        taxDetail += BytePadRightWithMaxLength(detail.PlaceOfResidenceNature2, 19);
                        if (detail["PlaceOfResidenceFr2"] != System.DBNull.Value && detail["PlaceOfResidenceTo2"] != System.DBNull.Value)
                            taxDetail += BytePadRightWithMaxLength(detail.PlaceOfResidenceFr2.ToString("yyyy/MM/dd") + " - " + detail.PlaceOfResidenceTo2.ToString("yyyy/MM/dd"), 26);
                        else
                            taxDetail += string.Empty.PadLeft(26);
                        taxDetail += BytePadLeftWithMaxLength(detail["PlaceOfResidenceRentByER2"] != System.DBNull.Value ? detail.PlaceOfResidenceRentByER2.ToString().PadLeft(7, '0') : "", 7);
                        taxDetail += BytePadLeftWithMaxLength(detail["PlaceOfResidenceRentByEE2"] != System.DBNull.Value ? detail.PlaceOfResidenceRentByEE2.ToString().PadLeft(7, '0') : "", 7);
                        taxDetail += BytePadLeftWithMaxLength(detail["PlaceOfResidenceRefundedEE2"] != System.DBNull.Value ? detail.PlaceOfResidenceRefundedEE2.ToString().PadLeft(7, '0') : "", 7);
                        taxDetail += BytePadLeftWithMaxLength(detail["PlaceOfResidenceRentToERByEE2"] != System.DBNull.Value ? detail.PlaceOfResidenceRentToERByEE2.ToString().PadLeft(7, '0') : "", 7);
                        taxDetail += BytePadRightWithMaxLength(detail.OverseasIncomeIndicator.ToString(), 1);
                        if (detail.OverseasIncomeIndicator == 1 && detail.OverseasCompanyAmount.Trim().Equals(string.Empty))
                            taxDetail += BytePadRightWithMaxLength("Unknown", 20);
                        else
                            taxDetail += BytePadRightWithMaxLength(detail.OverseasCompanyAmount, 20);
                        taxDetail += BytePadRightWithMaxLength(detail.OverseasCompanyName, 60);
                        taxDetail += BytePadRightWithMaxLength(detail.OverseasCompanyAddress, 60);
                        taxDetail += BytePadRightWithMaxLength(detail.TaxFileNo, 13);
                        taxDetail += BytePadRightWithMaxLength(detail.Remarks, 60);
                        taxDetail += "\r\n";
                        if (System.Text.Encoding.Default.GetBytes(taxDetail).Length != 1636)
                            throw new Exception("Invalid Record Length");
                        taxData += taxDetail;
                    }
                }
            }
            return taxData + char.ConvertFromUtf32(26);
        }

        private static string BytePadLeftWithMaxLength(string originalString, int maxLength)
        {
            int byteCount = System.Text.Encoding.Default.GetBytes(originalString).Length;
            int wordCount = originalString.Length;

            if (byteCount <= maxLength)
                return originalString.PadLeft(maxLength - (byteCount - wordCount));
            else
            {
                if (byteCount == wordCount)
                    return originalString.Substring(originalString.Length - maxLength);
                else
                    return originalString.Substring(0, maxLength - (byteCount - wordCount));
            }
        }
        private static string BytePadRightWithMaxLength(string originalString, int maxLength)
        {
            int byteCount = System.Text.Encoding.Default.GetBytes(originalString).Length;
            int wordCount = originalString.Length;

            if (byteCount <= maxLength)
                return originalString.PadRight(maxLength - (byteCount - wordCount));
            else
            {
                if (byteCount == wordCount)
                    return originalString.Substring(0, maxLength - (byteCount - wordCount));
            }
            return string.Empty;
        }
    }
}