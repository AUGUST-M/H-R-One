//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.BankFile.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("HSBCCoverDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class HSBCCoverDataSet : global::System.Data.DataSet {
        
        private payadvDataTable tablepayadv;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HSBCCoverDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected HSBCCoverDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["payadv"] != null)) {
                    base.Tables.Add(new payadvDataTable(ds.Tables["payadv"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public payadvDataTable payadv {
            get {
                return this.tablepayadv;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            HSBCCoverDataSet cln = ((HSBCCoverDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["payadv"] != null)) {
                    base.Tables.Add(new payadvDataTable(ds.Tables["payadv"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablepayadv = ((payadvDataTable)(base.Tables["payadv"]));
            if ((initTable == true)) {
                if ((this.tablepayadv != null)) {
                    this.tablepayadv.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "HSBCCoverDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/HSBCCoverDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablepayadv = new payadvDataTable();
            base.Tables.Add(this.tablepayadv);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepayadv() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            HSBCCoverDataSet ds = new HSBCCoverDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void payadvRowChangeEventHandler(object sender, payadvRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class payadvDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnC_NAME;
            
            private global::System.Data.DataColumn columnC_ACCT;
            
            private global::System.Data.DataColumn columnPAY_COL;
            
            private global::System.Data.DataColumn columnDEB_CRED;
            
            private global::System.Data.DataColumn columnPAY_CODE;
            
            private global::System.Data.DataColumn columnREFERENCE;
            
            private global::System.Data.DataColumn columnVAL_DATE;
            
            private global::System.Data.DataColumn columnCOUNT;
            
            private global::System.Data.DataColumn columnAMOUNT;
            
            private global::System.Data.DataColumn columnHASH_TOTAL;
            
            private global::System.Data.DataColumn columnFILE_NAME;
            
            private global::System.Data.DataColumn columnPLAN_CODE;
            
            private global::System.Data.DataColumn columnContactName;
            
            private global::System.Data.DataColumn columnContactPhoneNumber;
            
            private global::System.Data.DataColumn columnProductVersion;
            
            private global::System.Data.DataColumn columnRemoteProfileID;
            
            private global::System.Data.DataColumn columnBankKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payadvDataTable() {
                this.TableName = "payadv";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal payadvDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected payadvDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_NAMEColumn {
                get {
                    return this.columnC_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_ACCTColumn {
                get {
                    return this.columnC_ACCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAY_COLColumn {
                get {
                    return this.columnPAY_COL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEB_CREDColumn {
                get {
                    return this.columnDEB_CRED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAY_CODEColumn {
                get {
                    return this.columnPAY_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REFERENCEColumn {
                get {
                    return this.columnREFERENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VAL_DATEColumn {
                get {
                    return this.columnVAL_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTColumn {
                get {
                    return this.columnCOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMOUNTColumn {
                get {
                    return this.columnAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HASH_TOTALColumn {
                get {
                    return this.columnHASH_TOTAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILE_NAMEColumn {
                get {
                    return this.columnFILE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLAN_CODEColumn {
                get {
                    return this.columnPLAN_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactPhoneNumberColumn {
                get {
                    return this.columnContactPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductVersionColumn {
                get {
                    return this.columnProductVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemoteProfileIDColumn {
                get {
                    return this.columnRemoteProfileID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankKeyIDColumn {
                get {
                    return this.columnBankKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payadvRow this[int index] {
                get {
                    return ((payadvRow)(this.Rows[index]));
                }
            }
            
            public event payadvRowChangeEventHandler payadvRowChanging;
            
            public event payadvRowChangeEventHandler payadvRowChanged;
            
            public event payadvRowChangeEventHandler payadvRowDeleting;
            
            public event payadvRowChangeEventHandler payadvRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpayadvRow(payadvRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payadvRow AddpayadvRow(
                        string C_NAME, 
                        string C_ACCT, 
                        string PAY_COL, 
                        string DEB_CRED, 
                        string PAY_CODE, 
                        string REFERENCE, 
                        System.DateTime VAL_DATE, 
                        int COUNT, 
                        double AMOUNT, 
                        string HASH_TOTAL, 
                        string FILE_NAME, 
                        string PLAN_CODE, 
                        string ContactName, 
                        string ContactPhoneNumber, 
                        string ProductVersion, 
                        string RemoteProfileID, 
                        string BankKeyID) {
                payadvRow rowpayadvRow = ((payadvRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        C_NAME,
                        C_ACCT,
                        PAY_COL,
                        DEB_CRED,
                        PAY_CODE,
                        REFERENCE,
                        VAL_DATE,
                        COUNT,
                        AMOUNT,
                        HASH_TOTAL,
                        FILE_NAME,
                        PLAN_CODE,
                        ContactName,
                        ContactPhoneNumber,
                        ProductVersion,
                        RemoteProfileID,
                        BankKeyID};
                rowpayadvRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpayadvRow);
                return rowpayadvRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                payadvDataTable cln = ((payadvDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new payadvDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnC_NAME = base.Columns["C_NAME"];
                this.columnC_ACCT = base.Columns["C_ACCT"];
                this.columnPAY_COL = base.Columns["PAY_COL"];
                this.columnDEB_CRED = base.Columns["DEB_CRED"];
                this.columnPAY_CODE = base.Columns["PAY_CODE"];
                this.columnREFERENCE = base.Columns["REFERENCE"];
                this.columnVAL_DATE = base.Columns["VAL_DATE"];
                this.columnCOUNT = base.Columns["COUNT"];
                this.columnAMOUNT = base.Columns["AMOUNT"];
                this.columnHASH_TOTAL = base.Columns["HASH_TOTAL"];
                this.columnFILE_NAME = base.Columns["FILE_NAME"];
                this.columnPLAN_CODE = base.Columns["PLAN_CODE"];
                this.columnContactName = base.Columns["ContactName"];
                this.columnContactPhoneNumber = base.Columns["ContactPhoneNumber"];
                this.columnProductVersion = base.Columns["ProductVersion"];
                this.columnRemoteProfileID = base.Columns["RemoteProfileID"];
                this.columnBankKeyID = base.Columns["BankKeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnC_NAME = new global::System.Data.DataColumn("C_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_NAME);
                this.columnC_ACCT = new global::System.Data.DataColumn("C_ACCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_ACCT);
                this.columnPAY_COL = new global::System.Data.DataColumn("PAY_COL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAY_COL);
                this.columnDEB_CRED = new global::System.Data.DataColumn("DEB_CRED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEB_CRED);
                this.columnPAY_CODE = new global::System.Data.DataColumn("PAY_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAY_CODE);
                this.columnREFERENCE = new global::System.Data.DataColumn("REFERENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFERENCE);
                this.columnVAL_DATE = new global::System.Data.DataColumn("VAL_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVAL_DATE);
                this.columnCOUNT = new global::System.Data.DataColumn("COUNT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNT);
                this.columnAMOUNT = new global::System.Data.DataColumn("AMOUNT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNT);
                this.columnHASH_TOTAL = new global::System.Data.DataColumn("HASH_TOTAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHASH_TOTAL);
                this.columnFILE_NAME = new global::System.Data.DataColumn("FILE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILE_NAME);
                this.columnPLAN_CODE = new global::System.Data.DataColumn("PLAN_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLAN_CODE);
                this.columnContactName = new global::System.Data.DataColumn("ContactName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactName);
                this.columnContactPhoneNumber = new global::System.Data.DataColumn("ContactPhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactPhoneNumber);
                this.columnProductVersion = new global::System.Data.DataColumn("ProductVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductVersion);
                this.columnRemoteProfileID = new global::System.Data.DataColumn("RemoteProfileID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteProfileID);
                this.columnBankKeyID = new global::System.Data.DataColumn("BankKeyID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankKeyID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payadvRow NewpayadvRow() {
                return ((payadvRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new payadvRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(payadvRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.payadvRowChanged != null)) {
                    this.payadvRowChanged(this, new payadvRowChangeEvent(((payadvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.payadvRowChanging != null)) {
                    this.payadvRowChanging(this, new payadvRowChangeEvent(((payadvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.payadvRowDeleted != null)) {
                    this.payadvRowDeleted(this, new payadvRowChangeEvent(((payadvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.payadvRowDeleting != null)) {
                    this.payadvRowDeleting(this, new payadvRowChangeEvent(((payadvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepayadvRow(payadvRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HSBCCoverDataSet ds = new HSBCCoverDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "payadvDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class payadvRow : global::System.Data.DataRow {
            
            private payadvDataTable tablepayadv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal payadvRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepayadv = ((payadvDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_NAME {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.C_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_NAME\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.C_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_ACCT {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.C_ACCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_ACCT\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.C_ACCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAY_COL {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.PAY_COLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAY_COL\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.PAY_COLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEB_CRED {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.DEB_CREDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEB_CRED\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.DEB_CREDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAY_CODE {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.PAY_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAY_CODE\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.PAY_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REFERENCE {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.REFERENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REFERENCE\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.REFERENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime VAL_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepayadv.VAL_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VAL_DATE\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.VAL_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COUNT {
                get {
                    try {
                        return ((int)(this[this.tablepayadv.COUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNT\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.COUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AMOUNT {
                get {
                    try {
                        return ((double)(this[this.tablepayadv.AMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AMOUNT\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.AMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HASH_TOTAL {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.HASH_TOTALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HASH_TOTAL\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.HASH_TOTALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILE_NAME {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.FILE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FILE_NAME\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.FILE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PLAN_CODE {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.PLAN_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PLAN_CODE\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.PLAN_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.ContactNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactName\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.ContactNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactPhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.ContactPhoneNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactPhoneNumber\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.ContactPhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductVersion {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.ProductVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductVersion\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.ProductVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemoteProfileID {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.RemoteProfileIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemoteProfileID\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.RemoteProfileIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankKeyID {
                get {
                    try {
                        return ((string)(this[this.tablepayadv.BankKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BankKeyID\' in table \'payadv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepayadv.BankKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_NAMENull() {
                return this.IsNull(this.tablepayadv.C_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_NAMENull() {
                this[this.tablepayadv.C_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_ACCTNull() {
                return this.IsNull(this.tablepayadv.C_ACCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_ACCTNull() {
                this[this.tablepayadv.C_ACCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAY_COLNull() {
                return this.IsNull(this.tablepayadv.PAY_COLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAY_COLNull() {
                this[this.tablepayadv.PAY_COLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEB_CREDNull() {
                return this.IsNull(this.tablepayadv.DEB_CREDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEB_CREDNull() {
                this[this.tablepayadv.DEB_CREDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAY_CODENull() {
                return this.IsNull(this.tablepayadv.PAY_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAY_CODENull() {
                this[this.tablepayadv.PAY_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREFERENCENull() {
                return this.IsNull(this.tablepayadv.REFERENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREFERENCENull() {
                this[this.tablepayadv.REFERENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVAL_DATENull() {
                return this.IsNull(this.tablepayadv.VAL_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVAL_DATENull() {
                this[this.tablepayadv.VAL_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTNull() {
                return this.IsNull(this.tablepayadv.COUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTNull() {
                this[this.tablepayadv.COUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMOUNTNull() {
                return this.IsNull(this.tablepayadv.AMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMOUNTNull() {
                this[this.tablepayadv.AMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHASH_TOTALNull() {
                return this.IsNull(this.tablepayadv.HASH_TOTALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHASH_TOTALNull() {
                this[this.tablepayadv.HASH_TOTALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILE_NAMENull() {
                return this.IsNull(this.tablepayadv.FILE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILE_NAMENull() {
                this[this.tablepayadv.FILE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLAN_CODENull() {
                return this.IsNull(this.tablepayadv.PLAN_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLAN_CODENull() {
                this[this.tablepayadv.PLAN_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNameNull() {
                return this.IsNull(this.tablepayadv.ContactNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNameNull() {
                this[this.tablepayadv.ContactNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactPhoneNumberNull() {
                return this.IsNull(this.tablepayadv.ContactPhoneNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactPhoneNumberNull() {
                this[this.tablepayadv.ContactPhoneNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductVersionNull() {
                return this.IsNull(this.tablepayadv.ProductVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductVersionNull() {
                this[this.tablepayadv.ProductVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemoteProfileIDNull() {
                return this.IsNull(this.tablepayadv.RemoteProfileIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemoteProfileIDNull() {
                this[this.tablepayadv.RemoteProfileIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankKeyIDNull() {
                return this.IsNull(this.tablepayadv.BankKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankKeyIDNull() {
                this[this.tablepayadv.BankKeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class payadvRowChangeEvent : global::System.EventArgs {
            
            private payadvRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payadvRowChangeEvent(payadvRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public payadvRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591