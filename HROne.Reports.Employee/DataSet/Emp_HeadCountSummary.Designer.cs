//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.Reports.Employee.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("HeadCountSummarySet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class HeadCountSummarySet : global::System.Data.DataSet {
        
        private HeadCountSummaryDataTable tableHeadCountSummary;
        
        private GenderDataTable tableGender;
        
        private AreaCodeDataTable tableAreaCode;
        
        private global::System.Data.DataRelation relationGender_HeadCountSummary;
        
        private global::System.Data.DataRelation relationAreaCode_HeadCountSummary;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HeadCountSummarySet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected HeadCountSummarySet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["HeadCountSummary"] != null)) {
                    base.Tables.Add(new HeadCountSummaryDataTable(ds.Tables["HeadCountSummary"]));
                }
                if ((ds.Tables["Gender"] != null)) {
                    base.Tables.Add(new GenderDataTable(ds.Tables["Gender"]));
                }
                if ((ds.Tables["AreaCode"] != null)) {
                    base.Tables.Add(new AreaCodeDataTable(ds.Tables["AreaCode"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeadCountSummaryDataTable HeadCountSummary {
            get {
                return this.tableHeadCountSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GenderDataTable Gender {
            get {
                return this.tableGender;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AreaCodeDataTable AreaCode {
            get {
                return this.tableAreaCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            HeadCountSummarySet cln = ((HeadCountSummarySet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["HeadCountSummary"] != null)) {
                    base.Tables.Add(new HeadCountSummaryDataTable(ds.Tables["HeadCountSummary"]));
                }
                if ((ds.Tables["Gender"] != null)) {
                    base.Tables.Add(new GenderDataTable(ds.Tables["Gender"]));
                }
                if ((ds.Tables["AreaCode"] != null)) {
                    base.Tables.Add(new AreaCodeDataTable(ds.Tables["AreaCode"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableHeadCountSummary = ((HeadCountSummaryDataTable)(base.Tables["HeadCountSummary"]));
            if ((initTable == true)) {
                if ((this.tableHeadCountSummary != null)) {
                    this.tableHeadCountSummary.InitVars();
                }
            }
            this.tableGender = ((GenderDataTable)(base.Tables["Gender"]));
            if ((initTable == true)) {
                if ((this.tableGender != null)) {
                    this.tableGender.InitVars();
                }
            }
            this.tableAreaCode = ((AreaCodeDataTable)(base.Tables["AreaCode"]));
            if ((initTable == true)) {
                if ((this.tableAreaCode != null)) {
                    this.tableAreaCode.InitVars();
                }
            }
            this.relationGender_HeadCountSummary = this.Relations["Gender_HeadCountSummary"];
            this.relationAreaCode_HeadCountSummary = this.Relations["AreaCode_HeadCountSummary"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "HeadCountSummarySet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHeadCountSummary = new HeadCountSummaryDataTable();
            base.Tables.Add(this.tableHeadCountSummary);
            this.tableGender = new GenderDataTable();
            base.Tables.Add(this.tableGender);
            this.tableAreaCode = new AreaCodeDataTable();
            base.Tables.Add(this.tableAreaCode);
            this.relationGender_HeadCountSummary = new global::System.Data.DataRelation("Gender_HeadCountSummary", new global::System.Data.DataColumn[] {
                        this.tableGender.GenderColumn}, new global::System.Data.DataColumn[] {
                        this.tableHeadCountSummary.EmpGenderColumn}, false);
            this.Relations.Add(this.relationGender_HeadCountSummary);
            this.relationAreaCode_HeadCountSummary = new global::System.Data.DataRelation("AreaCode_HeadCountSummary", new global::System.Data.DataColumn[] {
                        this.tableAreaCode.AreaCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableHeadCountSummary.EmpAreaCodeColumn}, false);
            this.Relations.Add(this.relationAreaCode_HeadCountSummary);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeadCountSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGender() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAreaCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            HeadCountSummarySet ds = new HeadCountSummarySet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void HeadCountSummaryRowChangeEventHandler(object sender, HeadCountSummaryRowChangeEvent e);
        
        public delegate void GenderRowChangeEventHandler(object sender, GenderRowChangeEvent e);
        
        public delegate void AreaCodeRowChangeEventHandler(object sender, AreaCodeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeadCountSummaryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpGender;
            
            private global::System.Data.DataColumn columnEmpAreaCode;
            
            private global::System.Data.DataColumn columnCompanyID;
            
            private global::System.Data.DataColumn columnHElementID;
            
            private global::System.Data.DataColumn columnPayGroupID;
            
            private global::System.Data.DataColumn columnCompanyCode;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnHElementCode;
            
            private global::System.Data.DataColumn columnHElementDesc;
            
            private global::System.Data.DataColumn columnPayGroupCode;
            
            private global::System.Data.DataColumn columnPayGroupDesc;
            
            private global::System.Data.DataColumn columnPreviousCount;
            
            private global::System.Data.DataColumn columnCurrentCount;
            
            private global::System.Data.DataColumn columnNewJoinCount;
            
            private global::System.Data.DataColumn columnTerminateCount;
            
            private global::System.Data.DataColumn columnTransferInCount;
            
            private global::System.Data.DataColumn columnTransferOutCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadCountSummaryDataTable() {
                this.TableName = "HeadCountSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadCountSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeadCountSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpGenderColumn {
                get {
                    return this.columnEmpGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpAreaCodeColumn {
                get {
                    return this.columnEmpAreaCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementIDColumn {
                get {
                    return this.columnHElementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupIDColumn {
                get {
                    return this.columnPayGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyCodeColumn {
                get {
                    return this.columnCompanyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementCodeColumn {
                get {
                    return this.columnHElementCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementDescColumn {
                get {
                    return this.columnHElementDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupCodeColumn {
                get {
                    return this.columnPayGroupCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupDescColumn {
                get {
                    return this.columnPayGroupDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreviousCountColumn {
                get {
                    return this.columnPreviousCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentCountColumn {
                get {
                    return this.columnCurrentCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewJoinCountColumn {
                get {
                    return this.columnNewJoinCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TerminateCountColumn {
                get {
                    return this.columnTerminateCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferInCountColumn {
                get {
                    return this.columnTransferInCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransferOutCountColumn {
                get {
                    return this.columnTransferOutCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadCountSummaryRow this[int index] {
                get {
                    return ((HeadCountSummaryRow)(this.Rows[index]));
                }
            }
            
            public event HeadCountSummaryRowChangeEventHandler HeadCountSummaryRowChanging;
            
            public event HeadCountSummaryRowChangeEventHandler HeadCountSummaryRowChanged;
            
            public event HeadCountSummaryRowChangeEventHandler HeadCountSummaryRowDeleting;
            
            public event HeadCountSummaryRowChangeEventHandler HeadCountSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeadCountSummaryRow(HeadCountSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadCountSummaryRow AddHeadCountSummaryRow(
                        int EmpID, 
                        GenderRow parentGenderRowByGender_HeadCountSummary, 
                        AreaCodeRow parentAreaCodeRowByAreaCode_HeadCountSummary, 
                        int CompanyID, 
                        int HElementID, 
                        int PayGroupID, 
                        string CompanyCode, 
                        string CompanyName, 
                        string HElementCode, 
                        string HElementDesc, 
                        string PayGroupCode, 
                        string PayGroupDesc, 
                        int PreviousCount, 
                        int CurrentCount, 
                        int NewJoinCount, 
                        int TerminateCount, 
                        int TransferInCount, 
                        int TransferOutCount) {
                HeadCountSummaryRow rowHeadCountSummaryRow = ((HeadCountSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpID,
                        null,
                        null,
                        CompanyID,
                        HElementID,
                        PayGroupID,
                        CompanyCode,
                        CompanyName,
                        HElementCode,
                        HElementDesc,
                        PayGroupCode,
                        PayGroupDesc,
                        PreviousCount,
                        CurrentCount,
                        NewJoinCount,
                        TerminateCount,
                        TransferInCount,
                        TransferOutCount};
                if ((parentGenderRowByGender_HeadCountSummary != null)) {
                    columnValuesArray[1] = parentGenderRowByGender_HeadCountSummary[0];
                }
                if ((parentAreaCodeRowByAreaCode_HeadCountSummary != null)) {
                    columnValuesArray[2] = parentAreaCodeRowByAreaCode_HeadCountSummary[0];
                }
                rowHeadCountSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeadCountSummaryRow);
                return rowHeadCountSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeadCountSummaryDataTable cln = ((HeadCountSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeadCountSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpGender = base.Columns["EmpGender"];
                this.columnEmpAreaCode = base.Columns["EmpAreaCode"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnHElementID = base.Columns["HElementID"];
                this.columnPayGroupID = base.Columns["PayGroupID"];
                this.columnCompanyCode = base.Columns["CompanyCode"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnHElementCode = base.Columns["HElementCode"];
                this.columnHElementDesc = base.Columns["HElementDesc"];
                this.columnPayGroupCode = base.Columns["PayGroupCode"];
                this.columnPayGroupDesc = base.Columns["PayGroupDesc"];
                this.columnPreviousCount = base.Columns["PreviousCount"];
                this.columnCurrentCount = base.Columns["CurrentCount"];
                this.columnNewJoinCount = base.Columns["NewJoinCount"];
                this.columnTerminateCount = base.Columns["TerminateCount"];
                this.columnTransferInCount = base.Columns["TransferInCount"];
                this.columnTransferOutCount = base.Columns["TransferOutCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpGender = new global::System.Data.DataColumn("EmpGender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpGender);
                this.columnEmpAreaCode = new global::System.Data.DataColumn("EmpAreaCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpAreaCode);
                this.columnCompanyID = new global::System.Data.DataColumn("CompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnHElementID = new global::System.Data.DataColumn("HElementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementID);
                this.columnPayGroupID = new global::System.Data.DataColumn("PayGroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupID);
                this.columnCompanyCode = new global::System.Data.DataColumn("CompanyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyCode);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnHElementCode = new global::System.Data.DataColumn("HElementCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementCode);
                this.columnHElementDesc = new global::System.Data.DataColumn("HElementDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementDesc);
                this.columnPayGroupCode = new global::System.Data.DataColumn("PayGroupCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupCode);
                this.columnPayGroupDesc = new global::System.Data.DataColumn("PayGroupDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupDesc);
                this.columnPreviousCount = new global::System.Data.DataColumn("PreviousCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreviousCount);
                this.columnCurrentCount = new global::System.Data.DataColumn("CurrentCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentCount);
                this.columnNewJoinCount = new global::System.Data.DataColumn("NewJoinCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewJoinCount);
                this.columnTerminateCount = new global::System.Data.DataColumn("TerminateCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerminateCount);
                this.columnTransferInCount = new global::System.Data.DataColumn("TransferInCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferInCount);
                this.columnTransferOutCount = new global::System.Data.DataColumn("TransferOutCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferOutCount);
                this.columnCompanyID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadCountSummaryRow NewHeadCountSummaryRow() {
                return ((HeadCountSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeadCountSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeadCountSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeadCountSummaryRowChanged != null)) {
                    this.HeadCountSummaryRowChanged(this, new HeadCountSummaryRowChangeEvent(((HeadCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeadCountSummaryRowChanging != null)) {
                    this.HeadCountSummaryRowChanging(this, new HeadCountSummaryRowChangeEvent(((HeadCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeadCountSummaryRowDeleted != null)) {
                    this.HeadCountSummaryRowDeleted(this, new HeadCountSummaryRowChangeEvent(((HeadCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeadCountSummaryRowDeleting != null)) {
                    this.HeadCountSummaryRowDeleting(this, new HeadCountSummaryRowChangeEvent(((HeadCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeadCountSummaryRow(HeadCountSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HeadCountSummarySet ds = new HeadCountSummarySet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeadCountSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GenderDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnGenderFullName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenderDataTable() {
                this.TableName = "Gender";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GenderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderFullNameColumn {
                get {
                    return this.columnGenderFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenderRow this[int index] {
                get {
                    return ((GenderRow)(this.Rows[index]));
                }
            }
            
            public event GenderRowChangeEventHandler GenderRowChanging;
            
            public event GenderRowChangeEventHandler GenderRowChanged;
            
            public event GenderRowChangeEventHandler GenderRowDeleting;
            
            public event GenderRowChangeEventHandler GenderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGenderRow(GenderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenderRow AddGenderRow(string Gender, string GenderFullName) {
                GenderRow rowGenderRow = ((GenderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Gender,
                        GenderFullName};
                rowGenderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGenderRow);
                return rowGenderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenderRow FindByGender(string Gender) {
                return ((GenderRow)(this.Rows.Find(new object[] {
                            Gender})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GenderDataTable cln = ((GenderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GenderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGender = base.Columns["Gender"];
                this.columnGenderFullName = base.Columns["GenderFullName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnGenderFullName = new global::System.Data.DataColumn("GenderFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenderFullName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnGender}, true));
                this.columnGender.AllowDBNull = false;
                this.columnGender.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenderRow NewGenderRow() {
                return ((GenderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GenderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GenderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GenderRowChanged != null)) {
                    this.GenderRowChanged(this, new GenderRowChangeEvent(((GenderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GenderRowChanging != null)) {
                    this.GenderRowChanging(this, new GenderRowChangeEvent(((GenderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GenderRowDeleted != null)) {
                    this.GenderRowDeleted(this, new GenderRowChangeEvent(((GenderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GenderRowDeleting != null)) {
                    this.GenderRowDeleting(this, new GenderRowChangeEvent(((GenderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGenderRow(GenderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HeadCountSummarySet ds = new HeadCountSummarySet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GenderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AreaCodeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAreaCode;
            
            private global::System.Data.DataColumn columnArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaCodeDataTable() {
                this.TableName = "AreaCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AreaCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AreaCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaCodeColumn {
                get {
                    return this.columnAreaCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaColumn {
                get {
                    return this.columnArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaCodeRow this[int index] {
                get {
                    return ((AreaCodeRow)(this.Rows[index]));
                }
            }
            
            public event AreaCodeRowChangeEventHandler AreaCodeRowChanging;
            
            public event AreaCodeRowChangeEventHandler AreaCodeRowChanged;
            
            public event AreaCodeRowChangeEventHandler AreaCodeRowDeleting;
            
            public event AreaCodeRowChangeEventHandler AreaCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAreaCodeRow(AreaCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaCodeRow AddAreaCodeRow(string AreaCode, string Area) {
                AreaCodeRow rowAreaCodeRow = ((AreaCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AreaCode,
                        Area};
                rowAreaCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAreaCodeRow);
                return rowAreaCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaCodeRow FindByAreaCode(string AreaCode) {
                return ((AreaCodeRow)(this.Rows.Find(new object[] {
                            AreaCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AreaCodeDataTable cln = ((AreaCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AreaCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAreaCode = base.Columns["AreaCode"];
                this.columnArea = base.Columns["Area"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAreaCode = new global::System.Data.DataColumn("AreaCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaCode);
                this.columnArea = new global::System.Data.DataColumn("Area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAreaCode}, true));
                this.columnAreaCode.AllowDBNull = false;
                this.columnAreaCode.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaCodeRow NewAreaCodeRow() {
                return ((AreaCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AreaCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AreaCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AreaCodeRowChanged != null)) {
                    this.AreaCodeRowChanged(this, new AreaCodeRowChangeEvent(((AreaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AreaCodeRowChanging != null)) {
                    this.AreaCodeRowChanging(this, new AreaCodeRowChangeEvent(((AreaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AreaCodeRowDeleted != null)) {
                    this.AreaCodeRowDeleted(this, new AreaCodeRowChangeEvent(((AreaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AreaCodeRowDeleting != null)) {
                    this.AreaCodeRowDeleting(this, new AreaCodeRowChangeEvent(((AreaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAreaCodeRow(AreaCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HeadCountSummarySet ds = new HeadCountSummarySet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AreaCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeadCountSummaryRow : global::System.Data.DataRow {
            
            private HeadCountSummaryDataTable tableHeadCountSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadCountSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeadCountSummary = ((HeadCountSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpGender {
                get {
                    try {
                        return ((string)(this[this.tableHeadCountSummary.EmpGenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpGender\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.EmpGenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpAreaCode {
                get {
                    try {
                        return ((string)(this[this.tableHeadCountSummary.EmpAreaCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpAreaCode\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.EmpAreaCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyID {
                get {
                    return ((int)(this[this.tableHeadCountSummary.CompanyIDColumn]));
                }
                set {
                    this[this.tableHeadCountSummary.CompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HElementID {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.HElementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementID\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.HElementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayGroupID {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.PayGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupID\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.PayGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyCode {
                get {
                    try {
                        return ((string)(this[this.tableHeadCountSummary.CompanyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyCode\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.CompanyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableHeadCountSummary.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HElementCode {
                get {
                    try {
                        return ((string)(this[this.tableHeadCountSummary.HElementCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementCode\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.HElementCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HElementDesc {
                get {
                    try {
                        return ((string)(this[this.tableHeadCountSummary.HElementDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementDesc\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.HElementDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayGroupCode {
                get {
                    try {
                        return ((string)(this[this.tableHeadCountSummary.PayGroupCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupCode\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.PayGroupCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayGroupDesc {
                get {
                    try {
                        return ((string)(this[this.tableHeadCountSummary.PayGroupDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupDesc\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.PayGroupDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PreviousCount {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.PreviousCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreviousCount\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.PreviousCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CurrentCount {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.CurrentCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentCount\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.CurrentCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewJoinCount {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.NewJoinCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewJoinCount\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.NewJoinCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TerminateCount {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.TerminateCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TerminateCount\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.TerminateCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TransferInCount {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.TransferInCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferInCount\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.TransferInCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TransferOutCount {
                get {
                    try {
                        return ((int)(this[this.tableHeadCountSummary.TransferOutCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransferOutCount\' in table \'HeadCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeadCountSummary.TransferOutCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenderRow GenderRow {
                get {
                    return ((GenderRow)(this.GetParentRow(this.Table.ParentRelations["Gender_HeadCountSummary"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Gender_HeadCountSummary"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaCodeRow AreaCodeRow {
                get {
                    return ((AreaCodeRow)(this.GetParentRow(this.Table.ParentRelations["AreaCode_HeadCountSummary"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AreaCode_HeadCountSummary"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableHeadCountSummary.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableHeadCountSummary.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpGenderNull() {
                return this.IsNull(this.tableHeadCountSummary.EmpGenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpGenderNull() {
                this[this.tableHeadCountSummary.EmpGenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpAreaCodeNull() {
                return this.IsNull(this.tableHeadCountSummary.EmpAreaCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpAreaCodeNull() {
                this[this.tableHeadCountSummary.EmpAreaCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementIDNull() {
                return this.IsNull(this.tableHeadCountSummary.HElementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementIDNull() {
                this[this.tableHeadCountSummary.HElementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupIDNull() {
                return this.IsNull(this.tableHeadCountSummary.PayGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupIDNull() {
                this[this.tableHeadCountSummary.PayGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyCodeNull() {
                return this.IsNull(this.tableHeadCountSummary.CompanyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyCodeNull() {
                this[this.tableHeadCountSummary.CompanyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableHeadCountSummary.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableHeadCountSummary.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementCodeNull() {
                return this.IsNull(this.tableHeadCountSummary.HElementCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementCodeNull() {
                this[this.tableHeadCountSummary.HElementCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementDescNull() {
                return this.IsNull(this.tableHeadCountSummary.HElementDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementDescNull() {
                this[this.tableHeadCountSummary.HElementDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupCodeNull() {
                return this.IsNull(this.tableHeadCountSummary.PayGroupCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupCodeNull() {
                this[this.tableHeadCountSummary.PayGroupCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupDescNull() {
                return this.IsNull(this.tableHeadCountSummary.PayGroupDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupDescNull() {
                this[this.tableHeadCountSummary.PayGroupDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreviousCountNull() {
                return this.IsNull(this.tableHeadCountSummary.PreviousCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreviousCountNull() {
                this[this.tableHeadCountSummary.PreviousCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentCountNull() {
                return this.IsNull(this.tableHeadCountSummary.CurrentCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentCountNull() {
                this[this.tableHeadCountSummary.CurrentCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewJoinCountNull() {
                return this.IsNull(this.tableHeadCountSummary.NewJoinCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewJoinCountNull() {
                this[this.tableHeadCountSummary.NewJoinCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTerminateCountNull() {
                return this.IsNull(this.tableHeadCountSummary.TerminateCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTerminateCountNull() {
                this[this.tableHeadCountSummary.TerminateCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferInCountNull() {
                return this.IsNull(this.tableHeadCountSummary.TransferInCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferInCountNull() {
                this[this.tableHeadCountSummary.TransferInCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransferOutCountNull() {
                return this.IsNull(this.tableHeadCountSummary.TransferOutCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransferOutCountNull() {
                this[this.tableHeadCountSummary.TransferOutCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GenderRow : global::System.Data.DataRow {
            
            private GenderDataTable tableGender;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGender = ((GenderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    return ((string)(this[this.tableGender.GenderColumn]));
                }
                set {
                    this[this.tableGender.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenderFullName {
                get {
                    try {
                        return ((string)(this[this.tableGender.GenderFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenderFullName\' in table \'Gender\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGender.GenderFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderFullNameNull() {
                return this.IsNull(this.tableGender.GenderFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderFullNameNull() {
                this[this.tableGender.GenderFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadCountSummaryRow[] GetHeadCountSummaryRows() {
                if ((this.Table.ChildRelations["Gender_HeadCountSummary"] == null)) {
                    return new HeadCountSummaryRow[0];
                }
                else {
                    return ((HeadCountSummaryRow[])(base.GetChildRows(this.Table.ChildRelations["Gender_HeadCountSummary"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AreaCodeRow : global::System.Data.DataRow {
            
            private AreaCodeDataTable tableAreaCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AreaCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAreaCode = ((AreaCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AreaCode {
                get {
                    return ((string)(this[this.tableAreaCode.AreaCodeColumn]));
                }
                set {
                    this[this.tableAreaCode.AreaCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Area {
                get {
                    try {
                        return ((string)(this[this.tableAreaCode.AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Area\' in table \'AreaCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAreaCode.AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaNull() {
                return this.IsNull(this.tableAreaCode.AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaNull() {
                this[this.tableAreaCode.AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadCountSummaryRow[] GetHeadCountSummaryRows() {
                if ((this.Table.ChildRelations["AreaCode_HeadCountSummary"] == null)) {
                    return new HeadCountSummaryRow[0];
                }
                else {
                    return ((HeadCountSummaryRow[])(base.GetChildRows(this.Table.ChildRelations["AreaCode_HeadCountSummary"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeadCountSummaryRowChangeEvent : global::System.EventArgs {
            
            private HeadCountSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadCountSummaryRowChangeEvent(HeadCountSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadCountSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GenderRowChangeEvent : global::System.EventArgs {
            
            private GenderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenderRowChangeEvent(GenderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AreaCodeRowChangeEvent : global::System.EventArgs {
            
            private AreaCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaCodeRowChangeEvent(AreaCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591