//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.Reports.Employee.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EmployeeDetail")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EmployeeDetail : global::System.Data.DataSet {
        
        private employeedetailDataTable tableemployeedetail;
        
        private LeaveBalanceDataTable tableLeaveBalance;
        
        private LeaveApplicationDataTable tableLeaveApplication;
        
        private EmpPositionInfoDataTable tableEmpPositionInfo;
        
        private EmpRecurringPaymentDataTable tableEmpRecurringPayment;
        
        private EmpBankAccountDataTable tableEmpBankAccount;
        
        private EmpSpouseDataTable tableEmpSpouse;
        
        private EmpDependantDataTable tableEmpDependant;
        
        private EmpQualificationDataTable tableEmpQualification;
        
        private EmpSkillDataTable tableEmpSkill;
        
        private EmpHierarchyDataTable tableEmpHierarchy;
        
        private HierarchyLevelDataTable tableHierarchyLevel;
        
        private PayrollGroupDataTable tablePayrollGroup;
        
        private PositionDataTable tablePosition;
        
        private BankListDataTable tableBankList;
        
        private EmpRequestDataTable tableEmpRequest;
        
        private EmpWorkExpDataTable tableEmpWorkExp;
        
        private EmpExtraFieldDataTable tableEmpExtraField;
        
        private EmpExtraFieldValueDataTable tableEmpExtraFieldValue;
        
        private global::System.Data.DataRelation relationemployeedetail_LeaveBalance;
        
        private global::System.Data.DataRelation relationemployeedetail_LeaveApplication;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpPositionInfo;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpRecurringPayment;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpBankAccount;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpSpouse;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpDependant;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpQualification;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpSkill;
        
        private global::System.Data.DataRelation relationEmpPositionInfo_EmpHierarchy;
        
        private global::System.Data.DataRelation relationHierarchyLevel_EmpHierarchy;
        
        private global::System.Data.DataRelation relationPayrollGroup_EmpPositionInfo;
        
        private global::System.Data.DataRelation relationPosition_EmpPositionInfo;
        
        private global::System.Data.DataRelation relationBankList_EmpBankAccount;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpRequest;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpWorkExp;
        
        private global::System.Data.DataRelation relationemployeedetail_EmpExtraFieldValue;
        
        private global::System.Data.DataRelation relationEmpExtraField_EmpExtraFieldValue;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeDetail() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EmployeeDetail(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["employeedetail"] != null)) {
                    base.Tables.Add(new employeedetailDataTable(ds.Tables["employeedetail"]));
                }
                if ((ds.Tables["LeaveBalance"] != null)) {
                    base.Tables.Add(new LeaveBalanceDataTable(ds.Tables["LeaveBalance"]));
                }
                if ((ds.Tables["LeaveApplication"] != null)) {
                    base.Tables.Add(new LeaveApplicationDataTable(ds.Tables["LeaveApplication"]));
                }
                if ((ds.Tables["EmpPositionInfo"] != null)) {
                    base.Tables.Add(new EmpPositionInfoDataTable(ds.Tables["EmpPositionInfo"]));
                }
                if ((ds.Tables["EmpRecurringPayment"] != null)) {
                    base.Tables.Add(new EmpRecurringPaymentDataTable(ds.Tables["EmpRecurringPayment"]));
                }
                if ((ds.Tables["EmpBankAccount"] != null)) {
                    base.Tables.Add(new EmpBankAccountDataTable(ds.Tables["EmpBankAccount"]));
                }
                if ((ds.Tables["EmpSpouse"] != null)) {
                    base.Tables.Add(new EmpSpouseDataTable(ds.Tables["EmpSpouse"]));
                }
                if ((ds.Tables["EmpDependant"] != null)) {
                    base.Tables.Add(new EmpDependantDataTable(ds.Tables["EmpDependant"]));
                }
                if ((ds.Tables["EmpQualification"] != null)) {
                    base.Tables.Add(new EmpQualificationDataTable(ds.Tables["EmpQualification"]));
                }
                if ((ds.Tables["EmpSkill"] != null)) {
                    base.Tables.Add(new EmpSkillDataTable(ds.Tables["EmpSkill"]));
                }
                if ((ds.Tables["EmpHierarchy"] != null)) {
                    base.Tables.Add(new EmpHierarchyDataTable(ds.Tables["EmpHierarchy"]));
                }
                if ((ds.Tables["HierarchyLevel"] != null)) {
                    base.Tables.Add(new HierarchyLevelDataTable(ds.Tables["HierarchyLevel"]));
                }
                if ((ds.Tables["PayrollGroup"] != null)) {
                    base.Tables.Add(new PayrollGroupDataTable(ds.Tables["PayrollGroup"]));
                }
                if ((ds.Tables["Position"] != null)) {
                    base.Tables.Add(new PositionDataTable(ds.Tables["Position"]));
                }
                if ((ds.Tables["BankList"] != null)) {
                    base.Tables.Add(new BankListDataTable(ds.Tables["BankList"]));
                }
                if ((ds.Tables["EmpRequest"] != null)) {
                    base.Tables.Add(new EmpRequestDataTable(ds.Tables["EmpRequest"]));
                }
                if ((ds.Tables["EmpWorkExp"] != null)) {
                    base.Tables.Add(new EmpWorkExpDataTable(ds.Tables["EmpWorkExp"]));
                }
                if ((ds.Tables["EmpExtraField"] != null)) {
                    base.Tables.Add(new EmpExtraFieldDataTable(ds.Tables["EmpExtraField"]));
                }
                if ((ds.Tables["EmpExtraFieldValue"] != null)) {
                    base.Tables.Add(new EmpExtraFieldValueDataTable(ds.Tables["EmpExtraFieldValue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public employeedetailDataTable employeedetail {
            get {
                return this.tableemployeedetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LeaveBalanceDataTable LeaveBalance {
            get {
                return this.tableLeaveBalance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LeaveApplicationDataTable LeaveApplication {
            get {
                return this.tableLeaveApplication;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpPositionInfoDataTable EmpPositionInfo {
            get {
                return this.tableEmpPositionInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpRecurringPaymentDataTable EmpRecurringPayment {
            get {
                return this.tableEmpRecurringPayment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpBankAccountDataTable EmpBankAccount {
            get {
                return this.tableEmpBankAccount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpSpouseDataTable EmpSpouse {
            get {
                return this.tableEmpSpouse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpDependantDataTable EmpDependant {
            get {
                return this.tableEmpDependant;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpQualificationDataTable EmpQualification {
            get {
                return this.tableEmpQualification;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpSkillDataTable EmpSkill {
            get {
                return this.tableEmpSkill;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpHierarchyDataTable EmpHierarchy {
            get {
                return this.tableEmpHierarchy;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HierarchyLevelDataTable HierarchyLevel {
            get {
                return this.tableHierarchyLevel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PayrollGroupDataTable PayrollGroup {
            get {
                return this.tablePayrollGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PositionDataTable Position {
            get {
                return this.tablePosition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BankListDataTable BankList {
            get {
                return this.tableBankList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpRequestDataTable EmpRequest {
            get {
                return this.tableEmpRequest;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpWorkExpDataTable EmpWorkExp {
            get {
                return this.tableEmpWorkExp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpExtraFieldDataTable EmpExtraField {
            get {
                return this.tableEmpExtraField;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpExtraFieldValueDataTable EmpExtraFieldValue {
            get {
                return this.tableEmpExtraFieldValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EmployeeDetail cln = ((EmployeeDetail)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["employeedetail"] != null)) {
                    base.Tables.Add(new employeedetailDataTable(ds.Tables["employeedetail"]));
                }
                if ((ds.Tables["LeaveBalance"] != null)) {
                    base.Tables.Add(new LeaveBalanceDataTable(ds.Tables["LeaveBalance"]));
                }
                if ((ds.Tables["LeaveApplication"] != null)) {
                    base.Tables.Add(new LeaveApplicationDataTable(ds.Tables["LeaveApplication"]));
                }
                if ((ds.Tables["EmpPositionInfo"] != null)) {
                    base.Tables.Add(new EmpPositionInfoDataTable(ds.Tables["EmpPositionInfo"]));
                }
                if ((ds.Tables["EmpRecurringPayment"] != null)) {
                    base.Tables.Add(new EmpRecurringPaymentDataTable(ds.Tables["EmpRecurringPayment"]));
                }
                if ((ds.Tables["EmpBankAccount"] != null)) {
                    base.Tables.Add(new EmpBankAccountDataTable(ds.Tables["EmpBankAccount"]));
                }
                if ((ds.Tables["EmpSpouse"] != null)) {
                    base.Tables.Add(new EmpSpouseDataTable(ds.Tables["EmpSpouse"]));
                }
                if ((ds.Tables["EmpDependant"] != null)) {
                    base.Tables.Add(new EmpDependantDataTable(ds.Tables["EmpDependant"]));
                }
                if ((ds.Tables["EmpQualification"] != null)) {
                    base.Tables.Add(new EmpQualificationDataTable(ds.Tables["EmpQualification"]));
                }
                if ((ds.Tables["EmpSkill"] != null)) {
                    base.Tables.Add(new EmpSkillDataTable(ds.Tables["EmpSkill"]));
                }
                if ((ds.Tables["EmpHierarchy"] != null)) {
                    base.Tables.Add(new EmpHierarchyDataTable(ds.Tables["EmpHierarchy"]));
                }
                if ((ds.Tables["HierarchyLevel"] != null)) {
                    base.Tables.Add(new HierarchyLevelDataTable(ds.Tables["HierarchyLevel"]));
                }
                if ((ds.Tables["PayrollGroup"] != null)) {
                    base.Tables.Add(new PayrollGroupDataTable(ds.Tables["PayrollGroup"]));
                }
                if ((ds.Tables["Position"] != null)) {
                    base.Tables.Add(new PositionDataTable(ds.Tables["Position"]));
                }
                if ((ds.Tables["BankList"] != null)) {
                    base.Tables.Add(new BankListDataTable(ds.Tables["BankList"]));
                }
                if ((ds.Tables["EmpRequest"] != null)) {
                    base.Tables.Add(new EmpRequestDataTable(ds.Tables["EmpRequest"]));
                }
                if ((ds.Tables["EmpWorkExp"] != null)) {
                    base.Tables.Add(new EmpWorkExpDataTable(ds.Tables["EmpWorkExp"]));
                }
                if ((ds.Tables["EmpExtraField"] != null)) {
                    base.Tables.Add(new EmpExtraFieldDataTable(ds.Tables["EmpExtraField"]));
                }
                if ((ds.Tables["EmpExtraFieldValue"] != null)) {
                    base.Tables.Add(new EmpExtraFieldValueDataTable(ds.Tables["EmpExtraFieldValue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableemployeedetail = ((employeedetailDataTable)(base.Tables["employeedetail"]));
            if ((initTable == true)) {
                if ((this.tableemployeedetail != null)) {
                    this.tableemployeedetail.InitVars();
                }
            }
            this.tableLeaveBalance = ((LeaveBalanceDataTable)(base.Tables["LeaveBalance"]));
            if ((initTable == true)) {
                if ((this.tableLeaveBalance != null)) {
                    this.tableLeaveBalance.InitVars();
                }
            }
            this.tableLeaveApplication = ((LeaveApplicationDataTable)(base.Tables["LeaveApplication"]));
            if ((initTable == true)) {
                if ((this.tableLeaveApplication != null)) {
                    this.tableLeaveApplication.InitVars();
                }
            }
            this.tableEmpPositionInfo = ((EmpPositionInfoDataTable)(base.Tables["EmpPositionInfo"]));
            if ((initTable == true)) {
                if ((this.tableEmpPositionInfo != null)) {
                    this.tableEmpPositionInfo.InitVars();
                }
            }
            this.tableEmpRecurringPayment = ((EmpRecurringPaymentDataTable)(base.Tables["EmpRecurringPayment"]));
            if ((initTable == true)) {
                if ((this.tableEmpRecurringPayment != null)) {
                    this.tableEmpRecurringPayment.InitVars();
                }
            }
            this.tableEmpBankAccount = ((EmpBankAccountDataTable)(base.Tables["EmpBankAccount"]));
            if ((initTable == true)) {
                if ((this.tableEmpBankAccount != null)) {
                    this.tableEmpBankAccount.InitVars();
                }
            }
            this.tableEmpSpouse = ((EmpSpouseDataTable)(base.Tables["EmpSpouse"]));
            if ((initTable == true)) {
                if ((this.tableEmpSpouse != null)) {
                    this.tableEmpSpouse.InitVars();
                }
            }
            this.tableEmpDependant = ((EmpDependantDataTable)(base.Tables["EmpDependant"]));
            if ((initTable == true)) {
                if ((this.tableEmpDependant != null)) {
                    this.tableEmpDependant.InitVars();
                }
            }
            this.tableEmpQualification = ((EmpQualificationDataTable)(base.Tables["EmpQualification"]));
            if ((initTable == true)) {
                if ((this.tableEmpQualification != null)) {
                    this.tableEmpQualification.InitVars();
                }
            }
            this.tableEmpSkill = ((EmpSkillDataTable)(base.Tables["EmpSkill"]));
            if ((initTable == true)) {
                if ((this.tableEmpSkill != null)) {
                    this.tableEmpSkill.InitVars();
                }
            }
            this.tableEmpHierarchy = ((EmpHierarchyDataTable)(base.Tables["EmpHierarchy"]));
            if ((initTable == true)) {
                if ((this.tableEmpHierarchy != null)) {
                    this.tableEmpHierarchy.InitVars();
                }
            }
            this.tableHierarchyLevel = ((HierarchyLevelDataTable)(base.Tables["HierarchyLevel"]));
            if ((initTable == true)) {
                if ((this.tableHierarchyLevel != null)) {
                    this.tableHierarchyLevel.InitVars();
                }
            }
            this.tablePayrollGroup = ((PayrollGroupDataTable)(base.Tables["PayrollGroup"]));
            if ((initTable == true)) {
                if ((this.tablePayrollGroup != null)) {
                    this.tablePayrollGroup.InitVars();
                }
            }
            this.tablePosition = ((PositionDataTable)(base.Tables["Position"]));
            if ((initTable == true)) {
                if ((this.tablePosition != null)) {
                    this.tablePosition.InitVars();
                }
            }
            this.tableBankList = ((BankListDataTable)(base.Tables["BankList"]));
            if ((initTable == true)) {
                if ((this.tableBankList != null)) {
                    this.tableBankList.InitVars();
                }
            }
            this.tableEmpRequest = ((EmpRequestDataTable)(base.Tables["EmpRequest"]));
            if ((initTable == true)) {
                if ((this.tableEmpRequest != null)) {
                    this.tableEmpRequest.InitVars();
                }
            }
            this.tableEmpWorkExp = ((EmpWorkExpDataTable)(base.Tables["EmpWorkExp"]));
            if ((initTable == true)) {
                if ((this.tableEmpWorkExp != null)) {
                    this.tableEmpWorkExp.InitVars();
                }
            }
            this.tableEmpExtraField = ((EmpExtraFieldDataTable)(base.Tables["EmpExtraField"]));
            if ((initTable == true)) {
                if ((this.tableEmpExtraField != null)) {
                    this.tableEmpExtraField.InitVars();
                }
            }
            this.tableEmpExtraFieldValue = ((EmpExtraFieldValueDataTable)(base.Tables["EmpExtraFieldValue"]));
            if ((initTable == true)) {
                if ((this.tableEmpExtraFieldValue != null)) {
                    this.tableEmpExtraFieldValue.InitVars();
                }
            }
            this.relationemployeedetail_LeaveBalance = this.Relations["employeedetail_LeaveBalance"];
            this.relationemployeedetail_LeaveApplication = this.Relations["employeedetail_LeaveApplication"];
            this.relationemployeedetail_EmpPositionInfo = this.Relations["employeedetail_EmpPositionInfo"];
            this.relationemployeedetail_EmpRecurringPayment = this.Relations["employeedetail_EmpRecurringPayment"];
            this.relationemployeedetail_EmpBankAccount = this.Relations["employeedetail_EmpBankAccount"];
            this.relationemployeedetail_EmpSpouse = this.Relations["employeedetail_EmpSpouse"];
            this.relationemployeedetail_EmpDependant = this.Relations["employeedetail_EmpDependant"];
            this.relationemployeedetail_EmpQualification = this.Relations["employeedetail_EmpQualification"];
            this.relationemployeedetail_EmpSkill = this.Relations["employeedetail_EmpSkill"];
            this.relationEmpPositionInfo_EmpHierarchy = this.Relations["EmpPositionInfo_EmpHierarchy"];
            this.relationHierarchyLevel_EmpHierarchy = this.Relations["HierarchyLevel_EmpHierarchy"];
            this.relationPayrollGroup_EmpPositionInfo = this.Relations["PayrollGroup_EmpPositionInfo"];
            this.relationPosition_EmpPositionInfo = this.Relations["Position_EmpPositionInfo"];
            this.relationBankList_EmpBankAccount = this.Relations["BankList_EmpBankAccount"];
            this.relationemployeedetail_EmpRequest = this.Relations["employeedetail_EmpRequest"];
            this.relationemployeedetail_EmpWorkExp = this.Relations["employeedetail_EmpWorkExp"];
            this.relationemployeedetail_EmpExtraFieldValue = this.Relations["employeedetail_EmpExtraFieldValue"];
            this.relationEmpExtraField_EmpExtraFieldValue = this.Relations["EmpExtraField_EmpExtraFieldValue"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EmployeeDetail";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableemployeedetail = new employeedetailDataTable();
            base.Tables.Add(this.tableemployeedetail);
            this.tableLeaveBalance = new LeaveBalanceDataTable();
            base.Tables.Add(this.tableLeaveBalance);
            this.tableLeaveApplication = new LeaveApplicationDataTable();
            base.Tables.Add(this.tableLeaveApplication);
            this.tableEmpPositionInfo = new EmpPositionInfoDataTable();
            base.Tables.Add(this.tableEmpPositionInfo);
            this.tableEmpRecurringPayment = new EmpRecurringPaymentDataTable();
            base.Tables.Add(this.tableEmpRecurringPayment);
            this.tableEmpBankAccount = new EmpBankAccountDataTable();
            base.Tables.Add(this.tableEmpBankAccount);
            this.tableEmpSpouse = new EmpSpouseDataTable();
            base.Tables.Add(this.tableEmpSpouse);
            this.tableEmpDependant = new EmpDependantDataTable();
            base.Tables.Add(this.tableEmpDependant);
            this.tableEmpQualification = new EmpQualificationDataTable();
            base.Tables.Add(this.tableEmpQualification);
            this.tableEmpSkill = new EmpSkillDataTable();
            base.Tables.Add(this.tableEmpSkill);
            this.tableEmpHierarchy = new EmpHierarchyDataTable();
            base.Tables.Add(this.tableEmpHierarchy);
            this.tableHierarchyLevel = new HierarchyLevelDataTable();
            base.Tables.Add(this.tableHierarchyLevel);
            this.tablePayrollGroup = new PayrollGroupDataTable();
            base.Tables.Add(this.tablePayrollGroup);
            this.tablePosition = new PositionDataTable();
            base.Tables.Add(this.tablePosition);
            this.tableBankList = new BankListDataTable();
            base.Tables.Add(this.tableBankList);
            this.tableEmpRequest = new EmpRequestDataTable();
            base.Tables.Add(this.tableEmpRequest);
            this.tableEmpWorkExp = new EmpWorkExpDataTable();
            base.Tables.Add(this.tableEmpWorkExp);
            this.tableEmpExtraField = new EmpExtraFieldDataTable();
            base.Tables.Add(this.tableEmpExtraField);
            this.tableEmpExtraFieldValue = new EmpExtraFieldValueDataTable();
            base.Tables.Add(this.tableEmpExtraFieldValue);
            this.relationemployeedetail_LeaveBalance = new global::System.Data.DataRelation("employeedetail_LeaveBalance", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLeaveBalance.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_LeaveBalance);
            this.relationemployeedetail_LeaveApplication = new global::System.Data.DataRelation("employeedetail_LeaveApplication", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLeaveApplication.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_LeaveApplication);
            this.relationemployeedetail_EmpPositionInfo = new global::System.Data.DataRelation("employeedetail_EmpPositionInfo", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpPositionInfo.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpPositionInfo);
            this.relationemployeedetail_EmpRecurringPayment = new global::System.Data.DataRelation("employeedetail_EmpRecurringPayment", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpRecurringPayment.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpRecurringPayment);
            this.relationemployeedetail_EmpBankAccount = new global::System.Data.DataRelation("employeedetail_EmpBankAccount", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpBankAccount.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpBankAccount);
            this.relationemployeedetail_EmpSpouse = new global::System.Data.DataRelation("employeedetail_EmpSpouse", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpSpouse.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpSpouse);
            this.relationemployeedetail_EmpDependant = new global::System.Data.DataRelation("employeedetail_EmpDependant", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpDependant.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpDependant);
            this.relationemployeedetail_EmpQualification = new global::System.Data.DataRelation("employeedetail_EmpQualification", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpQualification.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpQualification);
            this.relationemployeedetail_EmpSkill = new global::System.Data.DataRelation("employeedetail_EmpSkill", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpSkill.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpSkill);
            this.relationEmpPositionInfo_EmpHierarchy = new global::System.Data.DataRelation("EmpPositionInfo_EmpHierarchy", new global::System.Data.DataColumn[] {
                        this.tableEmpPositionInfo.EmpPosIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpHierarchy.EmpPosIDColumn}, false);
            this.Relations.Add(this.relationEmpPositionInfo_EmpHierarchy);
            this.relationHierarchyLevel_EmpHierarchy = new global::System.Data.DataRelation("HierarchyLevel_EmpHierarchy", new global::System.Data.DataColumn[] {
                        this.tableHierarchyLevel.HLevelIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpHierarchy.HLevelIDColumn}, false);
            this.Relations.Add(this.relationHierarchyLevel_EmpHierarchy);
            this.relationPayrollGroup_EmpPositionInfo = new global::System.Data.DataRelation("PayrollGroup_EmpPositionInfo", new global::System.Data.DataColumn[] {
                        this.tablePayrollGroup.PayGroupIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpPositionInfo.PayGroupIDColumn}, false);
            this.Relations.Add(this.relationPayrollGroup_EmpPositionInfo);
            this.relationPosition_EmpPositionInfo = new global::System.Data.DataRelation("Position_EmpPositionInfo", new global::System.Data.DataColumn[] {
                        this.tablePosition.PositionIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpPositionInfo.PositionIDColumn}, false);
            this.Relations.Add(this.relationPosition_EmpPositionInfo);
            this.relationBankList_EmpBankAccount = new global::System.Data.DataRelation("BankList_EmpBankAccount", new global::System.Data.DataColumn[] {
                        this.tableBankList.BankCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpBankAccount.EmpBankCodeColumn}, false);
            this.Relations.Add(this.relationBankList_EmpBankAccount);
            this.relationemployeedetail_EmpRequest = new global::System.Data.DataRelation("employeedetail_EmpRequest", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpRequest.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpRequest);
            this.relationemployeedetail_EmpWorkExp = new global::System.Data.DataRelation("employeedetail_EmpWorkExp", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpWorkExp.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpWorkExp);
            this.relationemployeedetail_EmpExtraFieldValue = new global::System.Data.DataRelation("employeedetail_EmpExtraFieldValue", new global::System.Data.DataColumn[] {
                        this.tableemployeedetail.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpExtraFieldValue.EmpIDColumn}, false);
            this.Relations.Add(this.relationemployeedetail_EmpExtraFieldValue);
            this.relationEmpExtraField_EmpExtraFieldValue = new global::System.Data.DataRelation("EmpExtraField_EmpExtraFieldValue", new global::System.Data.DataColumn[] {
                        this.tableEmpExtraField.EmpExtraFieldIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableEmpExtraFieldValue.EmpExtraFieldIDColumn}, false);
            this.Relations.Add(this.relationEmpExtraField_EmpExtraFieldValue);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeemployeedetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLeaveBalance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLeaveApplication() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpPositionInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpRecurringPayment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpBankAccount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpSpouse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpDependant() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpQualification() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpSkill() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpHierarchy() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHierarchyLevel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePayrollGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePosition() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBankList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpRequest() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpWorkExp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpExtraField() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpExtraFieldValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EmployeeDetail ds = new EmployeeDetail();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void employeedetailRowChangeEventHandler(object sender, employeedetailRowChangeEvent e);
        
        public delegate void LeaveBalanceRowChangeEventHandler(object sender, LeaveBalanceRowChangeEvent e);
        
        public delegate void LeaveApplicationRowChangeEventHandler(object sender, LeaveApplicationRowChangeEvent e);
        
        public delegate void EmpPositionInfoRowChangeEventHandler(object sender, EmpPositionInfoRowChangeEvent e);
        
        public delegate void EmpRecurringPaymentRowChangeEventHandler(object sender, EmpRecurringPaymentRowChangeEvent e);
        
        public delegate void EmpBankAccountRowChangeEventHandler(object sender, EmpBankAccountRowChangeEvent e);
        
        public delegate void EmpSpouseRowChangeEventHandler(object sender, EmpSpouseRowChangeEvent e);
        
        public delegate void EmpDependantRowChangeEventHandler(object sender, EmpDependantRowChangeEvent e);
        
        public delegate void EmpQualificationRowChangeEventHandler(object sender, EmpQualificationRowChangeEvent e);
        
        public delegate void EmpSkillRowChangeEventHandler(object sender, EmpSkillRowChangeEvent e);
        
        public delegate void EmpHierarchyRowChangeEventHandler(object sender, EmpHierarchyRowChangeEvent e);
        
        public delegate void HierarchyLevelRowChangeEventHandler(object sender, HierarchyLevelRowChangeEvent e);
        
        public delegate void PayrollGroupRowChangeEventHandler(object sender, PayrollGroupRowChangeEvent e);
        
        public delegate void PositionRowChangeEventHandler(object sender, PositionRowChangeEvent e);
        
        public delegate void BankListRowChangeEventHandler(object sender, BankListRowChangeEvent e);
        
        public delegate void EmpRequestRowChangeEventHandler(object sender, EmpRequestRowChangeEvent e);
        
        public delegate void EmpWorkExpRowChangeEventHandler(object sender, EmpWorkExpRowChangeEvent e);
        
        public delegate void EmpExtraFieldRowChangeEventHandler(object sender, EmpExtraFieldRowChangeEvent e);
        
        public delegate void EmpExtraFieldValueRowChangeEventHandler(object sender, EmpExtraFieldValueRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class employeedetailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpNo;
            
            private global::System.Data.DataColumn columnEmpStatus;
            
            private global::System.Data.DataColumn columnEmpEngSurname;
            
            private global::System.Data.DataColumn columnEmpEngOtherName;
            
            private global::System.Data.DataColumn columnEmpEngFullName;
            
            private global::System.Data.DataColumn columnEmpChiFullName;
            
            private global::System.Data.DataColumn columnEmpAlias;
            
            private global::System.Data.DataColumn columnEmpHKID;
            
            private global::System.Data.DataColumn columnEmpGender;
            
            private global::System.Data.DataColumn columnEmpMaritalStatus;
            
            private global::System.Data.DataColumn columnEmpDateOfBirth;
            
            private global::System.Data.DataColumn columnEmpPlaceOfBirth;
            
            private global::System.Data.DataColumn columnEmpNationality;
            
            private global::System.Data.DataColumn columnEmpPassportNo;
            
            private global::System.Data.DataColumn columnEmpPassportIssuedCountry;
            
            private global::System.Data.DataColumn columnEmpPassportExpiryDate;
            
            private global::System.Data.DataColumn columnEmpResAddr;
            
            private global::System.Data.DataColumn columnEmpResAddrAreaCode;
            
            private global::System.Data.DataColumn columnEmpCorAddr;
            
            private global::System.Data.DataColumn columnEmpDateOfJoin;
            
            private global::System.Data.DataColumn columnEmpServiceDate;
            
            private global::System.Data.DataColumn columnEmpNoticePeriod;
            
            private global::System.Data.DataColumn columnEmpNoticeUnit;
            
            private global::System.Data.DataColumn columnEmpProbaPeriod;
            
            private global::System.Data.DataColumn columnEmpProbaUnit;
            
            private global::System.Data.DataColumn columnEmpProbaLastDate;
            
            private global::System.Data.DataColumn columnEmpEmail;
            
            private global::System.Data.DataColumn columnEmpHomePhoneNo;
            
            private global::System.Data.DataColumn columnEmpMobileNo;
            
            private global::System.Data.DataColumn columnEmpOfficePhoneNo;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnBusinessHierarchy;
            
            private global::System.Data.DataColumn columnEmpPosID;
            
            private global::System.Data.DataColumn columnEmpPosID1;
            
            private global::System.Data.DataColumn columnEmpID1;
            
            private global::System.Data.DataColumn columnEmpPosEffFr;
            
            private global::System.Data.DataColumn columnEmpPosEffTo;
            
            private global::System.Data.DataColumn columnCompanyID;
            
            private global::System.Data.DataColumn columnPositionID;
            
            private global::System.Data.DataColumn columnRankID;
            
            private global::System.Data.DataColumn columnStaffTypeID;
            
            private global::System.Data.DataColumn columnPayGroupID;
            
            private global::System.Data.DataColumn columnLeavePlanID;
            
            private global::System.Data.DataColumn columnPositionID1;
            
            private global::System.Data.DataColumn columnPositionCode;
            
            private global::System.Data.DataColumn columnPositionDesc;
            
            private global::System.Data.DataColumn columnCompanyCode;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnHierarchyCode1;
            
            private global::System.Data.DataColumn columnHierarchyDesc1;
            
            private global::System.Data.DataColumn columnHierarchyCode2;
            
            private global::System.Data.DataColumn columnHierarchyDesc2;
            
            private global::System.Data.DataColumn columnHierarchyCode3;
            
            private global::System.Data.DataColumn columnHierarchyDesc3;
            
            private global::System.Data.DataColumn columnHierarchyCode4;
            
            private global::System.Data.DataColumn columnHierarchyDesc4;
            
            private global::System.Data.DataColumn columnEmpTermLastDate;
            
            private global::System.Data.DataColumn columnYearOfService;
            
            private global::System.Data.DataColumn columnPhotoByteArray;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailDataTable() {
                this.TableName = "employeedetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal employeedetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected employeedetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoColumn {
                get {
                    return this.columnEmpNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpStatusColumn {
                get {
                    return this.columnEmpStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpEngSurnameColumn {
                get {
                    return this.columnEmpEngSurname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpEngOtherNameColumn {
                get {
                    return this.columnEmpEngOtherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpEngFullNameColumn {
                get {
                    return this.columnEmpEngFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpChiFullNameColumn {
                get {
                    return this.columnEmpChiFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpAliasColumn {
                get {
                    return this.columnEmpAlias;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpHKIDColumn {
                get {
                    return this.columnEmpHKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpGenderColumn {
                get {
                    return this.columnEmpGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpMaritalStatusColumn {
                get {
                    return this.columnEmpMaritalStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDateOfBirthColumn {
                get {
                    return this.columnEmpDateOfBirth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPlaceOfBirthColumn {
                get {
                    return this.columnEmpPlaceOfBirth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNationalityColumn {
                get {
                    return this.columnEmpNationality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPassportNoColumn {
                get {
                    return this.columnEmpPassportNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPassportIssuedCountryColumn {
                get {
                    return this.columnEmpPassportIssuedCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPassportExpiryDateColumn {
                get {
                    return this.columnEmpPassportExpiryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpResAddrColumn {
                get {
                    return this.columnEmpResAddr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpResAddrAreaCodeColumn {
                get {
                    return this.columnEmpResAddrAreaCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpCorAddrColumn {
                get {
                    return this.columnEmpCorAddr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDateOfJoinColumn {
                get {
                    return this.columnEmpDateOfJoin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpServiceDateColumn {
                get {
                    return this.columnEmpServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoticePeriodColumn {
                get {
                    return this.columnEmpNoticePeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoticeUnitColumn {
                get {
                    return this.columnEmpNoticeUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpProbaPeriodColumn {
                get {
                    return this.columnEmpProbaPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpProbaUnitColumn {
                get {
                    return this.columnEmpProbaUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpProbaLastDateColumn {
                get {
                    return this.columnEmpProbaLastDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpEmailColumn {
                get {
                    return this.columnEmpEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpHomePhoneNoColumn {
                get {
                    return this.columnEmpHomePhoneNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpMobileNoColumn {
                get {
                    return this.columnEmpMobileNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpOfficePhoneNoColumn {
                get {
                    return this.columnEmpOfficePhoneNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessHierarchyColumn {
                get {
                    return this.columnBusinessHierarchy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPosIDColumn {
                get {
                    return this.columnEmpPosID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPosID1Column {
                get {
                    return this.columnEmpPosID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpID1Column {
                get {
                    return this.columnEmpID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPosEffFrColumn {
                get {
                    return this.columnEmpPosEffFr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPosEffToColumn {
                get {
                    return this.columnEmpPosEffTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionIDColumn {
                get {
                    return this.columnPositionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RankIDColumn {
                get {
                    return this.columnRankID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffTypeIDColumn {
                get {
                    return this.columnStaffTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupIDColumn {
                get {
                    return this.columnPayGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeavePlanIDColumn {
                get {
                    return this.columnLeavePlanID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionID1Column {
                get {
                    return this.columnPositionID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionCodeColumn {
                get {
                    return this.columnPositionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionDescColumn {
                get {
                    return this.columnPositionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyCodeColumn {
                get {
                    return this.columnCompanyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyCode1Column {
                get {
                    return this.columnHierarchyCode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyDesc1Column {
                get {
                    return this.columnHierarchyDesc1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyCode2Column {
                get {
                    return this.columnHierarchyCode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyDesc2Column {
                get {
                    return this.columnHierarchyDesc2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyCode3Column {
                get {
                    return this.columnHierarchyCode3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyDesc3Column {
                get {
                    return this.columnHierarchyDesc3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyCode4Column {
                get {
                    return this.columnHierarchyCode4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyDesc4Column {
                get {
                    return this.columnHierarchyDesc4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpTermLastDateColumn {
                get {
                    return this.columnEmpTermLastDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearOfServiceColumn {
                get {
                    return this.columnYearOfService;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhotoByteArrayColumn {
                get {
                    return this.columnPhotoByteArray;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow this[int index] {
                get {
                    return ((employeedetailRow)(this.Rows[index]));
                }
            }
            
            public event employeedetailRowChangeEventHandler employeedetailRowChanging;
            
            public event employeedetailRowChangeEventHandler employeedetailRowChanged;
            
            public event employeedetailRowChangeEventHandler employeedetailRowDeleting;
            
            public event employeedetailRowChangeEventHandler employeedetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddemployeedetailRow(employeedetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow AddemployeedetailRow(
                        string EmpNo, 
                        string EmpStatus, 
                        string EmpEngSurname, 
                        string EmpEngOtherName, 
                        string EmpEngFullName, 
                        string EmpChiFullName, 
                        string EmpAlias, 
                        string EmpHKID, 
                        string EmpGender, 
                        string EmpMaritalStatus, 
                        System.DateTime EmpDateOfBirth, 
                        string EmpPlaceOfBirth, 
                        string EmpNationality, 
                        string EmpPassportNo, 
                        string EmpPassportIssuedCountry, 
                        System.DateTime EmpPassportExpiryDate, 
                        string EmpResAddr, 
                        string EmpResAddrAreaCode, 
                        string EmpCorAddr, 
                        System.DateTime EmpDateOfJoin, 
                        System.DateTime EmpServiceDate, 
                        int EmpNoticePeriod, 
                        string EmpNoticeUnit, 
                        int EmpProbaPeriod, 
                        string EmpProbaUnit, 
                        System.DateTime EmpProbaLastDate, 
                        string EmpEmail, 
                        string EmpHomePhoneNo, 
                        string EmpMobileNo, 
                        string EmpOfficePhoneNo, 
                        string Remark, 
                        string BusinessHierarchy, 
                        int EmpPosID, 
                        int EmpID1, 
                        System.DateTime EmpPosEffFr, 
                        System.DateTime EmpPosEffTo, 
                        int CompanyID, 
                        int PositionID, 
                        int RankID, 
                        int StaffTypeID, 
                        int PayGroupID, 
                        int LeavePlanID, 
                        string PositionCode, 
                        string PositionDesc, 
                        string CompanyCode, 
                        string CompanyName, 
                        string HierarchyCode1, 
                        string HierarchyDesc1, 
                        string HierarchyCode2, 
                        string HierarchyDesc2, 
                        string HierarchyCode3, 
                        string HierarchyDesc3, 
                        string HierarchyCode4, 
                        string HierarchyDesc4, 
                        System.DateTime EmpTermLastDate, 
                        double YearOfService, 
                        byte[] PhotoByteArray) {
                employeedetailRow rowemployeedetailRow = ((employeedetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmpNo,
                        EmpStatus,
                        EmpEngSurname,
                        EmpEngOtherName,
                        EmpEngFullName,
                        EmpChiFullName,
                        EmpAlias,
                        EmpHKID,
                        EmpGender,
                        EmpMaritalStatus,
                        EmpDateOfBirth,
                        EmpPlaceOfBirth,
                        EmpNationality,
                        EmpPassportNo,
                        EmpPassportIssuedCountry,
                        EmpPassportExpiryDate,
                        EmpResAddr,
                        EmpResAddrAreaCode,
                        EmpCorAddr,
                        EmpDateOfJoin,
                        EmpServiceDate,
                        EmpNoticePeriod,
                        EmpNoticeUnit,
                        EmpProbaPeriod,
                        EmpProbaUnit,
                        EmpProbaLastDate,
                        EmpEmail,
                        EmpHomePhoneNo,
                        EmpMobileNo,
                        EmpOfficePhoneNo,
                        Remark,
                        BusinessHierarchy,
                        EmpPosID,
                        null,
                        EmpID1,
                        EmpPosEffFr,
                        EmpPosEffTo,
                        CompanyID,
                        PositionID,
                        RankID,
                        StaffTypeID,
                        PayGroupID,
                        LeavePlanID,
                        null,
                        PositionCode,
                        PositionDesc,
                        CompanyCode,
                        CompanyName,
                        HierarchyCode1,
                        HierarchyDesc1,
                        HierarchyCode2,
                        HierarchyDesc2,
                        HierarchyCode3,
                        HierarchyDesc3,
                        HierarchyCode4,
                        HierarchyDesc4,
                        EmpTermLastDate,
                        YearOfService,
                        PhotoByteArray};
                rowemployeedetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowemployeedetailRow);
                return rowemployeedetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow FindByEmpID(int EmpID) {
                return ((employeedetailRow)(this.Rows.Find(new object[] {
                            EmpID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                employeedetailDataTable cln = ((employeedetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new employeedetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpNo = base.Columns["EmpNo"];
                this.columnEmpStatus = base.Columns["EmpStatus"];
                this.columnEmpEngSurname = base.Columns["EmpEngSurname"];
                this.columnEmpEngOtherName = base.Columns["EmpEngOtherName"];
                this.columnEmpEngFullName = base.Columns["EmpEngFullName"];
                this.columnEmpChiFullName = base.Columns["EmpChiFullName"];
                this.columnEmpAlias = base.Columns["EmpAlias"];
                this.columnEmpHKID = base.Columns["EmpHKID"];
                this.columnEmpGender = base.Columns["EmpGender"];
                this.columnEmpMaritalStatus = base.Columns["EmpMaritalStatus"];
                this.columnEmpDateOfBirth = base.Columns["EmpDateOfBirth"];
                this.columnEmpPlaceOfBirth = base.Columns["EmpPlaceOfBirth"];
                this.columnEmpNationality = base.Columns["EmpNationality"];
                this.columnEmpPassportNo = base.Columns["EmpPassportNo"];
                this.columnEmpPassportIssuedCountry = base.Columns["EmpPassportIssuedCountry"];
                this.columnEmpPassportExpiryDate = base.Columns["EmpPassportExpiryDate"];
                this.columnEmpResAddr = base.Columns["EmpResAddr"];
                this.columnEmpResAddrAreaCode = base.Columns["EmpResAddrAreaCode"];
                this.columnEmpCorAddr = base.Columns["EmpCorAddr"];
                this.columnEmpDateOfJoin = base.Columns["EmpDateOfJoin"];
                this.columnEmpServiceDate = base.Columns["EmpServiceDate"];
                this.columnEmpNoticePeriod = base.Columns["EmpNoticePeriod"];
                this.columnEmpNoticeUnit = base.Columns["EmpNoticeUnit"];
                this.columnEmpProbaPeriod = base.Columns["EmpProbaPeriod"];
                this.columnEmpProbaUnit = base.Columns["EmpProbaUnit"];
                this.columnEmpProbaLastDate = base.Columns["EmpProbaLastDate"];
                this.columnEmpEmail = base.Columns["EmpEmail"];
                this.columnEmpHomePhoneNo = base.Columns["EmpHomePhoneNo"];
                this.columnEmpMobileNo = base.Columns["EmpMobileNo"];
                this.columnEmpOfficePhoneNo = base.Columns["EmpOfficePhoneNo"];
                this.columnRemark = base.Columns["Remark"];
                this.columnBusinessHierarchy = base.Columns["BusinessHierarchy"];
                this.columnEmpPosID = base.Columns["EmpPosID"];
                this.columnEmpPosID1 = base.Columns["EmpPosID1"];
                this.columnEmpID1 = base.Columns["EmpID1"];
                this.columnEmpPosEffFr = base.Columns["EmpPosEffFr"];
                this.columnEmpPosEffTo = base.Columns["EmpPosEffTo"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnPositionID = base.Columns["PositionID"];
                this.columnRankID = base.Columns["RankID"];
                this.columnStaffTypeID = base.Columns["StaffTypeID"];
                this.columnPayGroupID = base.Columns["PayGroupID"];
                this.columnLeavePlanID = base.Columns["LeavePlanID"];
                this.columnPositionID1 = base.Columns["PositionID1"];
                this.columnPositionCode = base.Columns["PositionCode"];
                this.columnPositionDesc = base.Columns["PositionDesc"];
                this.columnCompanyCode = base.Columns["CompanyCode"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnHierarchyCode1 = base.Columns["HierarchyCode1"];
                this.columnHierarchyDesc1 = base.Columns["HierarchyDesc1"];
                this.columnHierarchyCode2 = base.Columns["HierarchyCode2"];
                this.columnHierarchyDesc2 = base.Columns["HierarchyDesc2"];
                this.columnHierarchyCode3 = base.Columns["HierarchyCode3"];
                this.columnHierarchyDesc3 = base.Columns["HierarchyDesc3"];
                this.columnHierarchyCode4 = base.Columns["HierarchyCode4"];
                this.columnHierarchyDesc4 = base.Columns["HierarchyDesc4"];
                this.columnEmpTermLastDate = base.Columns["EmpTermLastDate"];
                this.columnYearOfService = base.Columns["YearOfService"];
                this.columnPhotoByteArray = base.Columns["PhotoByteArray"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpNo = new global::System.Data.DataColumn("EmpNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNo);
                this.columnEmpStatus = new global::System.Data.DataColumn("EmpStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpStatus);
                this.columnEmpEngSurname = new global::System.Data.DataColumn("EmpEngSurname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpEngSurname);
                this.columnEmpEngOtherName = new global::System.Data.DataColumn("EmpEngOtherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpEngOtherName);
                this.columnEmpEngFullName = new global::System.Data.DataColumn("EmpEngFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpEngFullName);
                this.columnEmpChiFullName = new global::System.Data.DataColumn("EmpChiFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpChiFullName);
                this.columnEmpAlias = new global::System.Data.DataColumn("EmpAlias", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpAlias);
                this.columnEmpHKID = new global::System.Data.DataColumn("EmpHKID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpHKID);
                this.columnEmpGender = new global::System.Data.DataColumn("EmpGender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpGender);
                this.columnEmpMaritalStatus = new global::System.Data.DataColumn("EmpMaritalStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpMaritalStatus);
                this.columnEmpDateOfBirth = new global::System.Data.DataColumn("EmpDateOfBirth", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDateOfBirth);
                this.columnEmpPlaceOfBirth = new global::System.Data.DataColumn("EmpPlaceOfBirth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPlaceOfBirth);
                this.columnEmpNationality = new global::System.Data.DataColumn("EmpNationality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNationality);
                this.columnEmpPassportNo = new global::System.Data.DataColumn("EmpPassportNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPassportNo);
                this.columnEmpPassportIssuedCountry = new global::System.Data.DataColumn("EmpPassportIssuedCountry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPassportIssuedCountry);
                this.columnEmpPassportExpiryDate = new global::System.Data.DataColumn("EmpPassportExpiryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPassportExpiryDate);
                this.columnEmpResAddr = new global::System.Data.DataColumn("EmpResAddr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpResAddr);
                this.columnEmpResAddrAreaCode = new global::System.Data.DataColumn("EmpResAddrAreaCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpResAddrAreaCode);
                this.columnEmpCorAddr = new global::System.Data.DataColumn("EmpCorAddr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpCorAddr);
                this.columnEmpDateOfJoin = new global::System.Data.DataColumn("EmpDateOfJoin", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDateOfJoin);
                this.columnEmpServiceDate = new global::System.Data.DataColumn("EmpServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpServiceDate);
                this.columnEmpNoticePeriod = new global::System.Data.DataColumn("EmpNoticePeriod", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNoticePeriod);
                this.columnEmpNoticeUnit = new global::System.Data.DataColumn("EmpNoticeUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNoticeUnit);
                this.columnEmpProbaPeriod = new global::System.Data.DataColumn("EmpProbaPeriod", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpProbaPeriod);
                this.columnEmpProbaUnit = new global::System.Data.DataColumn("EmpProbaUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpProbaUnit);
                this.columnEmpProbaLastDate = new global::System.Data.DataColumn("EmpProbaLastDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpProbaLastDate);
                this.columnEmpEmail = new global::System.Data.DataColumn("EmpEmail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpEmail);
                this.columnEmpHomePhoneNo = new global::System.Data.DataColumn("EmpHomePhoneNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpHomePhoneNo);
                this.columnEmpMobileNo = new global::System.Data.DataColumn("EmpMobileNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpMobileNo);
                this.columnEmpOfficePhoneNo = new global::System.Data.DataColumn("EmpOfficePhoneNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpOfficePhoneNo);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnBusinessHierarchy = new global::System.Data.DataColumn("BusinessHierarchy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessHierarchy);
                this.columnEmpPosID = new global::System.Data.DataColumn("EmpPosID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPosID);
                this.columnEmpPosID1 = new global::System.Data.DataColumn("EmpPosID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPosID1);
                this.columnEmpID1 = new global::System.Data.DataColumn("EmpID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID1);
                this.columnEmpPosEffFr = new global::System.Data.DataColumn("EmpPosEffFr", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPosEffFr);
                this.columnEmpPosEffTo = new global::System.Data.DataColumn("EmpPosEffTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPosEffTo);
                this.columnCompanyID = new global::System.Data.DataColumn("CompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnPositionID = new global::System.Data.DataColumn("PositionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionID);
                this.columnRankID = new global::System.Data.DataColumn("RankID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRankID);
                this.columnStaffTypeID = new global::System.Data.DataColumn("StaffTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffTypeID);
                this.columnPayGroupID = new global::System.Data.DataColumn("PayGroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupID);
                this.columnLeavePlanID = new global::System.Data.DataColumn("LeavePlanID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeavePlanID);
                this.columnPositionID1 = new global::System.Data.DataColumn("PositionID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionID1);
                this.columnPositionCode = new global::System.Data.DataColumn("PositionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionCode);
                this.columnPositionDesc = new global::System.Data.DataColumn("PositionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionDesc);
                this.columnCompanyCode = new global::System.Data.DataColumn("CompanyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyCode);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnHierarchyCode1 = new global::System.Data.DataColumn("HierarchyCode1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyCode1);
                this.columnHierarchyDesc1 = new global::System.Data.DataColumn("HierarchyDesc1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyDesc1);
                this.columnHierarchyCode2 = new global::System.Data.DataColumn("HierarchyCode2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyCode2);
                this.columnHierarchyDesc2 = new global::System.Data.DataColumn("HierarchyDesc2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyDesc2);
                this.columnHierarchyCode3 = new global::System.Data.DataColumn("HierarchyCode3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyCode3);
                this.columnHierarchyDesc3 = new global::System.Data.DataColumn("HierarchyDesc3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyDesc3);
                this.columnHierarchyCode4 = new global::System.Data.DataColumn("HierarchyCode4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyCode4);
                this.columnHierarchyDesc4 = new global::System.Data.DataColumn("HierarchyDesc4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyDesc4);
                this.columnEmpTermLastDate = new global::System.Data.DataColumn("EmpTermLastDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpTermLastDate);
                this.columnYearOfService = new global::System.Data.DataColumn("YearOfService", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearOfService);
                this.columnPhotoByteArray = new global::System.Data.DataColumn("PhotoByteArray", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhotoByteArray);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpID}, true));
                this.columnEmpID.AutoIncrement = true;
                this.columnEmpID.AllowDBNull = false;
                this.columnEmpID.ReadOnly = true;
                this.columnEmpID.Unique = true;
                this.columnEmpPosID1.AutoIncrement = true;
                this.columnEmpPosID1.ReadOnly = true;
                this.columnPositionID1.AutoIncrement = true;
                this.columnPositionID1.ReadOnly = true;
                this.columnHierarchyDesc1.Caption = "HierarchyDesc3";
                this.columnHierarchyCode2.Caption = "HierarchyCode3";
                this.columnHierarchyCode3.Caption = "HierarchyCode2";
                this.columnHierarchyDesc3.Caption = "HierarchyDesc1";
                this.columnHierarchyCode4.Caption = "HierarchyCode2";
                this.columnHierarchyDesc4.Caption = "HierarchyDesc1";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow NewemployeedetailRow() {
                return ((employeedetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new employeedetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(employeedetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.employeedetailRowChanged != null)) {
                    this.employeedetailRowChanged(this, new employeedetailRowChangeEvent(((employeedetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.employeedetailRowChanging != null)) {
                    this.employeedetailRowChanging(this, new employeedetailRowChangeEvent(((employeedetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.employeedetailRowDeleted != null)) {
                    this.employeedetailRowDeleted(this, new employeedetailRowChangeEvent(((employeedetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.employeedetailRowDeleting != null)) {
                    this.employeedetailRowDeleting(this, new employeedetailRowChangeEvent(((employeedetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveemployeedetailRow(employeedetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "employeedetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LeaveBalanceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLeaveBalanceID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnLeaveBalanceEffectiveDate;
            
            private global::System.Data.DataColumn columnLeaveBalanceBF;
            
            private global::System.Data.DataColumn columnLeaveBalanceEntitled;
            
            private global::System.Data.DataColumn columnLeaveBalanceForfeiture;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnBalance;
            
            private global::System.Data.DataColumn columnTaken;
            
            private global::System.Data.DataColumn columnAdjust;
            
            private global::System.Data.DataColumn columnReserved;
            
            private global::System.Data.DataColumn columnExpiryForfeit;
            
            private global::System.Data.DataColumn columnNextExpiryDate;
            
            private global::System.Data.DataColumn columnNextExpiryForfeit;
            
            private global::System.Data.DataColumn columnStringFormat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceDataTable() {
                this.TableName = "LeaveBalance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LeaveBalanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LeaveBalanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceIDColumn {
                get {
                    return this.columnLeaveBalanceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceEffectiveDateColumn {
                get {
                    return this.columnLeaveBalanceEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceBFColumn {
                get {
                    return this.columnLeaveBalanceBF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceEntitledColumn {
                get {
                    return this.columnLeaveBalanceEntitled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceForfeitureColumn {
                get {
                    return this.columnLeaveBalanceForfeiture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TakenColumn {
                get {
                    return this.columnTaken;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustColumn {
                get {
                    return this.columnAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReservedColumn {
                get {
                    return this.columnReserved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpiryForfeitColumn {
                get {
                    return this.columnExpiryForfeit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NextExpiryDateColumn {
                get {
                    return this.columnNextExpiryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NextExpiryForfeitColumn {
                get {
                    return this.columnNextExpiryForfeit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StringFormatColumn {
                get {
                    return this.columnStringFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow this[int index] {
                get {
                    return ((LeaveBalanceRow)(this.Rows[index]));
                }
            }
            
            public event LeaveBalanceRowChangeEventHandler LeaveBalanceRowChanging;
            
            public event LeaveBalanceRowChangeEventHandler LeaveBalanceRowChanged;
            
            public event LeaveBalanceRowChangeEventHandler LeaveBalanceRowDeleting;
            
            public event LeaveBalanceRowChangeEventHandler LeaveBalanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLeaveBalanceRow(LeaveBalanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow AddLeaveBalanceRow(
                        int LeaveBalanceID, 
                        employeedetailRow parentemployeedetailRowByemployeedetail_LeaveBalance, 
                        System.DateTime LeaveBalanceEffectiveDate, 
                        double LeaveBalanceBF, 
                        double LeaveBalanceEntitled, 
                        double LeaveBalanceForfeiture, 
                        string Name, 
                        string Description, 
                        double Balance, 
                        double Taken, 
                        double Adjust, 
                        double Reserved, 
                        double ExpiryForfeit, 
                        System.DateTime NextExpiryDate, 
                        double NextExpiryForfeit, 
                        string StringFormat) {
                LeaveBalanceRow rowLeaveBalanceRow = ((LeaveBalanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LeaveBalanceID,
                        null,
                        LeaveBalanceEffectiveDate,
                        LeaveBalanceBF,
                        LeaveBalanceEntitled,
                        LeaveBalanceForfeiture,
                        Name,
                        Description,
                        Balance,
                        Taken,
                        Adjust,
                        Reserved,
                        ExpiryForfeit,
                        NextExpiryDate,
                        NextExpiryForfeit,
                        StringFormat};
                if ((parentemployeedetailRowByemployeedetail_LeaveBalance != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_LeaveBalance[0];
                }
                rowLeaveBalanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLeaveBalanceRow);
                return rowLeaveBalanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LeaveBalanceDataTable cln = ((LeaveBalanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LeaveBalanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLeaveBalanceID = base.Columns["LeaveBalanceID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnLeaveBalanceEffectiveDate = base.Columns["LeaveBalanceEffectiveDate"];
                this.columnLeaveBalanceBF = base.Columns["LeaveBalanceBF"];
                this.columnLeaveBalanceEntitled = base.Columns["LeaveBalanceEntitled"];
                this.columnLeaveBalanceForfeiture = base.Columns["LeaveBalanceForfeiture"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnBalance = base.Columns["Balance"];
                this.columnTaken = base.Columns["Taken"];
                this.columnAdjust = base.Columns["Adjust"];
                this.columnReserved = base.Columns["Reserved"];
                this.columnExpiryForfeit = base.Columns["ExpiryForfeit"];
                this.columnNextExpiryDate = base.Columns["NextExpiryDate"];
                this.columnNextExpiryForfeit = base.Columns["NextExpiryForfeit"];
                this.columnStringFormat = base.Columns["StringFormat"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLeaveBalanceID = new global::System.Data.DataColumn("LeaveBalanceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnLeaveBalanceEffectiveDate = new global::System.Data.DataColumn("LeaveBalanceEffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceEffectiveDate);
                this.columnLeaveBalanceBF = new global::System.Data.DataColumn("LeaveBalanceBF", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceBF);
                this.columnLeaveBalanceEntitled = new global::System.Data.DataColumn("LeaveBalanceEntitled", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceEntitled);
                this.columnLeaveBalanceForfeiture = new global::System.Data.DataColumn("LeaveBalanceForfeiture", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceForfeiture);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnTaken = new global::System.Data.DataColumn("Taken", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaken);
                this.columnAdjust = new global::System.Data.DataColumn("Adjust", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjust);
                this.columnReserved = new global::System.Data.DataColumn("Reserved", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved);
                this.columnExpiryForfeit = new global::System.Data.DataColumn("ExpiryForfeit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpiryForfeit);
                this.columnNextExpiryDate = new global::System.Data.DataColumn("NextExpiryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextExpiryDate);
                this.columnNextExpiryForfeit = new global::System.Data.DataColumn("NextExpiryForfeit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextExpiryForfeit);
                this.columnStringFormat = new global::System.Data.DataColumn("StringFormat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStringFormat);
                this.columnLeaveBalanceID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow NewLeaveBalanceRow() {
                return ((LeaveBalanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LeaveBalanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LeaveBalanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LeaveBalanceRowChanged != null)) {
                    this.LeaveBalanceRowChanged(this, new LeaveBalanceRowChangeEvent(((LeaveBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LeaveBalanceRowChanging != null)) {
                    this.LeaveBalanceRowChanging(this, new LeaveBalanceRowChangeEvent(((LeaveBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LeaveBalanceRowDeleted != null)) {
                    this.LeaveBalanceRowDeleted(this, new LeaveBalanceRowChangeEvent(((LeaveBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LeaveBalanceRowDeleting != null)) {
                    this.LeaveBalanceRowDeleting(this, new LeaveBalanceRowChangeEvent(((LeaveBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLeaveBalanceRow(LeaveBalanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LeaveBalanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LeaveApplicationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLeaveAppID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnLeaveCodeID;
            
            private global::System.Data.DataColumn columnLeaveAppUnit;
            
            private global::System.Data.DataColumn columnLeaveAppDateFrom;
            
            private global::System.Data.DataColumn columnLeaveAppDateTo;
            
            private global::System.Data.DataColumn columnLeaveAppTimeFrom;
            
            private global::System.Data.DataColumn columnLeaveAppTimeTo;
            
            private global::System.Data.DataColumn columnLeaveAppDays;
            
            private global::System.Data.DataColumn columnLeaveAppRemark;
            
            private global::System.Data.DataColumn columnLeaveAppHasMedicalCertificate;
            
            private global::System.Data.DataColumn columnLeaveAppNoPayProcess;
            
            private global::System.Data.DataColumn columnEmpPaymentID;
            
            private global::System.Data.DataColumn columnLeaveType;
            
            private global::System.Data.DataColumn columnLeaveTypeDesc;
            
            private global::System.Data.DataColumn columnPayrollProcessPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveApplicationDataTable() {
                this.TableName = "LeaveApplication";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LeaveApplicationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LeaveApplicationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppIDColumn {
                get {
                    return this.columnLeaveAppID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveCodeIDColumn {
                get {
                    return this.columnLeaveCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppUnitColumn {
                get {
                    return this.columnLeaveAppUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppDateFromColumn {
                get {
                    return this.columnLeaveAppDateFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppDateToColumn {
                get {
                    return this.columnLeaveAppDateTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppTimeFromColumn {
                get {
                    return this.columnLeaveAppTimeFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppTimeToColumn {
                get {
                    return this.columnLeaveAppTimeTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppDaysColumn {
                get {
                    return this.columnLeaveAppDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppRemarkColumn {
                get {
                    return this.columnLeaveAppRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppHasMedicalCertificateColumn {
                get {
                    return this.columnLeaveAppHasMedicalCertificate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAppNoPayProcessColumn {
                get {
                    return this.columnLeaveAppNoPayProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPaymentIDColumn {
                get {
                    return this.columnEmpPaymentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveTypeColumn {
                get {
                    return this.columnLeaveType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveTypeDescColumn {
                get {
                    return this.columnLeaveTypeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayrollProcessPeriodColumn {
                get {
                    return this.columnPayrollProcessPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveApplicationRow this[int index] {
                get {
                    return ((LeaveApplicationRow)(this.Rows[index]));
                }
            }
            
            public event LeaveApplicationRowChangeEventHandler LeaveApplicationRowChanging;
            
            public event LeaveApplicationRowChangeEventHandler LeaveApplicationRowChanged;
            
            public event LeaveApplicationRowChangeEventHandler LeaveApplicationRowDeleting;
            
            public event LeaveApplicationRowChangeEventHandler LeaveApplicationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLeaveApplicationRow(LeaveApplicationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveApplicationRow AddLeaveApplicationRow(employeedetailRow parentemployeedetailRowByemployeedetail_LeaveApplication, int LeaveCodeID, string LeaveAppUnit, System.DateTime LeaveAppDateFrom, System.DateTime LeaveAppDateTo, System.DateTime LeaveAppTimeFrom, System.DateTime LeaveAppTimeTo, double LeaveAppDays, string LeaveAppRemark, bool LeaveAppHasMedicalCertificate, bool LeaveAppNoPayProcess, int EmpPaymentID, string LeaveType, string LeaveTypeDesc, string PayrollProcessPeriod) {
                LeaveApplicationRow rowLeaveApplicationRow = ((LeaveApplicationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        LeaveCodeID,
                        LeaveAppUnit,
                        LeaveAppDateFrom,
                        LeaveAppDateTo,
                        LeaveAppTimeFrom,
                        LeaveAppTimeTo,
                        LeaveAppDays,
                        LeaveAppRemark,
                        LeaveAppHasMedicalCertificate,
                        LeaveAppNoPayProcess,
                        EmpPaymentID,
                        LeaveType,
                        LeaveTypeDesc,
                        PayrollProcessPeriod};
                if ((parentemployeedetailRowByemployeedetail_LeaveApplication != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_LeaveApplication[0];
                }
                rowLeaveApplicationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLeaveApplicationRow);
                return rowLeaveApplicationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveApplicationRow FindByLeaveAppID(int LeaveAppID) {
                return ((LeaveApplicationRow)(this.Rows.Find(new object[] {
                            LeaveAppID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LeaveApplicationDataTable cln = ((LeaveApplicationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LeaveApplicationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLeaveAppID = base.Columns["LeaveAppID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnLeaveCodeID = base.Columns["LeaveCodeID"];
                this.columnLeaveAppUnit = base.Columns["LeaveAppUnit"];
                this.columnLeaveAppDateFrom = base.Columns["LeaveAppDateFrom"];
                this.columnLeaveAppDateTo = base.Columns["LeaveAppDateTo"];
                this.columnLeaveAppTimeFrom = base.Columns["LeaveAppTimeFrom"];
                this.columnLeaveAppTimeTo = base.Columns["LeaveAppTimeTo"];
                this.columnLeaveAppDays = base.Columns["LeaveAppDays"];
                this.columnLeaveAppRemark = base.Columns["LeaveAppRemark"];
                this.columnLeaveAppHasMedicalCertificate = base.Columns["LeaveAppHasMedicalCertificate"];
                this.columnLeaveAppNoPayProcess = base.Columns["LeaveAppNoPayProcess"];
                this.columnEmpPaymentID = base.Columns["EmpPaymentID"];
                this.columnLeaveType = base.Columns["LeaveType"];
                this.columnLeaveTypeDesc = base.Columns["LeaveTypeDesc"];
                this.columnPayrollProcessPeriod = base.Columns["PayrollProcessPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLeaveAppID = new global::System.Data.DataColumn("LeaveAppID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnLeaveCodeID = new global::System.Data.DataColumn("LeaveCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveCodeID);
                this.columnLeaveAppUnit = new global::System.Data.DataColumn("LeaveAppUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppUnit);
                this.columnLeaveAppDateFrom = new global::System.Data.DataColumn("LeaveAppDateFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppDateFrom);
                this.columnLeaveAppDateTo = new global::System.Data.DataColumn("LeaveAppDateTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppDateTo);
                this.columnLeaveAppTimeFrom = new global::System.Data.DataColumn("LeaveAppTimeFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppTimeFrom);
                this.columnLeaveAppTimeTo = new global::System.Data.DataColumn("LeaveAppTimeTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppTimeTo);
                this.columnLeaveAppDays = new global::System.Data.DataColumn("LeaveAppDays", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppDays);
                this.columnLeaveAppRemark = new global::System.Data.DataColumn("LeaveAppRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppRemark);
                this.columnLeaveAppHasMedicalCertificate = new global::System.Data.DataColumn("LeaveAppHasMedicalCertificate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppHasMedicalCertificate);
                this.columnLeaveAppNoPayProcess = new global::System.Data.DataColumn("LeaveAppNoPayProcess", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAppNoPayProcess);
                this.columnEmpPaymentID = new global::System.Data.DataColumn("EmpPaymentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPaymentID);
                this.columnLeaveType = new global::System.Data.DataColumn("LeaveType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveType);
                this.columnLeaveTypeDesc = new global::System.Data.DataColumn("LeaveTypeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveTypeDesc);
                this.columnPayrollProcessPeriod = new global::System.Data.DataColumn("PayrollProcessPeriod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayrollProcessPeriod);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLeaveAppID}, true));
                this.columnLeaveAppID.AutoIncrement = true;
                this.columnLeaveAppID.AllowDBNull = false;
                this.columnLeaveAppID.ReadOnly = true;
                this.columnLeaveAppID.Unique = true;
                this.columnLeaveAppUnit.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveApplicationRow NewLeaveApplicationRow() {
                return ((LeaveApplicationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LeaveApplicationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LeaveApplicationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LeaveApplicationRowChanged != null)) {
                    this.LeaveApplicationRowChanged(this, new LeaveApplicationRowChangeEvent(((LeaveApplicationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LeaveApplicationRowChanging != null)) {
                    this.LeaveApplicationRowChanging(this, new LeaveApplicationRowChangeEvent(((LeaveApplicationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LeaveApplicationRowDeleted != null)) {
                    this.LeaveApplicationRowDeleted(this, new LeaveApplicationRowChangeEvent(((LeaveApplicationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LeaveApplicationRowDeleting != null)) {
                    this.LeaveApplicationRowDeleting(this, new LeaveApplicationRowChangeEvent(((LeaveApplicationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLeaveApplicationRow(LeaveApplicationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LeaveApplicationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpPositionInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpPosID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpPosEffFr;
            
            private global::System.Data.DataColumn columnEmpPosEffTo;
            
            private global::System.Data.DataColumn columnCompanyID;
            
            private global::System.Data.DataColumn columnPositionID;
            
            private global::System.Data.DataColumn columnRankID;
            
            private global::System.Data.DataColumn columnStaffTypeID;
            
            private global::System.Data.DataColumn columnPayGroupID;
            
            private global::System.Data.DataColumn columnLeavePlanID;
            
            private global::System.Data.DataColumn columnPositionCode;
            
            private global::System.Data.DataColumn columnPositionDesc;
            
            private global::System.Data.DataColumn columnRankCode;
            
            private global::System.Data.DataColumn columnRankDesc;
            
            private global::System.Data.DataColumn columnHierarchyCode1;
            
            private global::System.Data.DataColumn columnHierarchyDesc1;
            
            private global::System.Data.DataColumn columnHierarchyCode2;
            
            private global::System.Data.DataColumn columnHierarchyDesc2;
            
            private global::System.Data.DataColumn columnHierarchyCode3;
            
            private global::System.Data.DataColumn columnHierarchyDesc3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoDataTable() {
                this.TableName = "EmpPositionInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpPositionInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpPositionInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPosIDColumn {
                get {
                    return this.columnEmpPosID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPosEffFrColumn {
                get {
                    return this.columnEmpPosEffFr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPosEffToColumn {
                get {
                    return this.columnEmpPosEffTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyIDColumn {
                get {
                    return this.columnCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionIDColumn {
                get {
                    return this.columnPositionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RankIDColumn {
                get {
                    return this.columnRankID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StaffTypeIDColumn {
                get {
                    return this.columnStaffTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupIDColumn {
                get {
                    return this.columnPayGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeavePlanIDColumn {
                get {
                    return this.columnLeavePlanID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionCodeColumn {
                get {
                    return this.columnPositionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionDescColumn {
                get {
                    return this.columnPositionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RankCodeColumn {
                get {
                    return this.columnRankCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RankDescColumn {
                get {
                    return this.columnRankDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyCode1Column {
                get {
                    return this.columnHierarchyCode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyDesc1Column {
                get {
                    return this.columnHierarchyDesc1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyCode2Column {
                get {
                    return this.columnHierarchyCode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyDesc2Column {
                get {
                    return this.columnHierarchyDesc2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyCode3Column {
                get {
                    return this.columnHierarchyCode3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyDesc3Column {
                get {
                    return this.columnHierarchyDesc3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow this[int index] {
                get {
                    return ((EmpPositionInfoRow)(this.Rows[index]));
                }
            }
            
            public event EmpPositionInfoRowChangeEventHandler EmpPositionInfoRowChanging;
            
            public event EmpPositionInfoRowChangeEventHandler EmpPositionInfoRowChanged;
            
            public event EmpPositionInfoRowChangeEventHandler EmpPositionInfoRowDeleting;
            
            public event EmpPositionInfoRowChangeEventHandler EmpPositionInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpPositionInfoRow(EmpPositionInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow AddEmpPositionInfoRow(
                        employeedetailRow parentemployeedetailRowByemployeedetail_EmpPositionInfo, 
                        System.DateTime EmpPosEffFr, 
                        System.DateTime EmpPosEffTo, 
                        int CompanyID, 
                        PositionRow parentPositionRowByPosition_EmpPositionInfo, 
                        int RankID, 
                        int StaffTypeID, 
                        PayrollGroupRow parentPayrollGroupRowByPayrollGroup_EmpPositionInfo, 
                        int LeavePlanID, 
                        string PositionCode, 
                        string PositionDesc, 
                        string RankCode, 
                        string RankDesc, 
                        string HierarchyCode1, 
                        string HierarchyDesc1, 
                        string HierarchyCode2, 
                        string HierarchyDesc2, 
                        string HierarchyCode3, 
                        string HierarchyDesc3) {
                EmpPositionInfoRow rowEmpPositionInfoRow = ((EmpPositionInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        EmpPosEffFr,
                        EmpPosEffTo,
                        CompanyID,
                        null,
                        RankID,
                        StaffTypeID,
                        null,
                        LeavePlanID,
                        PositionCode,
                        PositionDesc,
                        RankCode,
                        RankDesc,
                        HierarchyCode1,
                        HierarchyDesc1,
                        HierarchyCode2,
                        HierarchyDesc2,
                        HierarchyCode3,
                        HierarchyDesc3};
                if ((parentemployeedetailRowByemployeedetail_EmpPositionInfo != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpPositionInfo[0];
                }
                if ((parentPositionRowByPosition_EmpPositionInfo != null)) {
                    columnValuesArray[5] = parentPositionRowByPosition_EmpPositionInfo[0];
                }
                if ((parentPayrollGroupRowByPayrollGroup_EmpPositionInfo != null)) {
                    columnValuesArray[8] = parentPayrollGroupRowByPayrollGroup_EmpPositionInfo[0];
                }
                rowEmpPositionInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpPositionInfoRow);
                return rowEmpPositionInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow FindByEmpPosID(int EmpPosID) {
                return ((EmpPositionInfoRow)(this.Rows.Find(new object[] {
                            EmpPosID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpPositionInfoDataTable cln = ((EmpPositionInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpPositionInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpPosID = base.Columns["EmpPosID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpPosEffFr = base.Columns["EmpPosEffFr"];
                this.columnEmpPosEffTo = base.Columns["EmpPosEffTo"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnPositionID = base.Columns["PositionID"];
                this.columnRankID = base.Columns["RankID"];
                this.columnStaffTypeID = base.Columns["StaffTypeID"];
                this.columnPayGroupID = base.Columns["PayGroupID"];
                this.columnLeavePlanID = base.Columns["LeavePlanID"];
                this.columnPositionCode = base.Columns["PositionCode"];
                this.columnPositionDesc = base.Columns["PositionDesc"];
                this.columnRankCode = base.Columns["RankCode"];
                this.columnRankDesc = base.Columns["RankDesc"];
                this.columnHierarchyCode1 = base.Columns["HierarchyCode1"];
                this.columnHierarchyDesc1 = base.Columns["HierarchyDesc1"];
                this.columnHierarchyCode2 = base.Columns["HierarchyCode2"];
                this.columnHierarchyDesc2 = base.Columns["HierarchyDesc2"];
                this.columnHierarchyCode3 = base.Columns["HierarchyCode3"];
                this.columnHierarchyDesc3 = base.Columns["HierarchyDesc3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpPosID = new global::System.Data.DataColumn("EmpPosID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPosID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpPosEffFr = new global::System.Data.DataColumn("EmpPosEffFr", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPosEffFr);
                this.columnEmpPosEffTo = new global::System.Data.DataColumn("EmpPosEffTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPosEffTo);
                this.columnCompanyID = new global::System.Data.DataColumn("CompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnPositionID = new global::System.Data.DataColumn("PositionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionID);
                this.columnRankID = new global::System.Data.DataColumn("RankID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRankID);
                this.columnStaffTypeID = new global::System.Data.DataColumn("StaffTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStaffTypeID);
                this.columnPayGroupID = new global::System.Data.DataColumn("PayGroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupID);
                this.columnLeavePlanID = new global::System.Data.DataColumn("LeavePlanID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeavePlanID);
                this.columnPositionCode = new global::System.Data.DataColumn("PositionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionCode);
                this.columnPositionDesc = new global::System.Data.DataColumn("PositionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionDesc);
                this.columnRankCode = new global::System.Data.DataColumn("RankCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRankCode);
                this.columnRankDesc = new global::System.Data.DataColumn("RankDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRankDesc);
                this.columnHierarchyCode1 = new global::System.Data.DataColumn("HierarchyCode1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyCode1);
                this.columnHierarchyDesc1 = new global::System.Data.DataColumn("HierarchyDesc1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyDesc1);
                this.columnHierarchyCode2 = new global::System.Data.DataColumn("HierarchyCode2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyCode2);
                this.columnHierarchyDesc2 = new global::System.Data.DataColumn("HierarchyDesc2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyDesc2);
                this.columnHierarchyCode3 = new global::System.Data.DataColumn("HierarchyCode3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyCode3);
                this.columnHierarchyDesc3 = new global::System.Data.DataColumn("HierarchyDesc3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchyDesc3);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpPosID}, true));
                this.columnEmpPosID.AutoIncrement = true;
                this.columnEmpPosID.AllowDBNull = false;
                this.columnEmpPosID.ReadOnly = true;
                this.columnEmpPosID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow NewEmpPositionInfoRow() {
                return ((EmpPositionInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpPositionInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpPositionInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpPositionInfoRowChanged != null)) {
                    this.EmpPositionInfoRowChanged(this, new EmpPositionInfoRowChangeEvent(((EmpPositionInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpPositionInfoRowChanging != null)) {
                    this.EmpPositionInfoRowChanging(this, new EmpPositionInfoRowChangeEvent(((EmpPositionInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpPositionInfoRowDeleted != null)) {
                    this.EmpPositionInfoRowDeleted(this, new EmpPositionInfoRowChangeEvent(((EmpPositionInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpPositionInfoRowDeleting != null)) {
                    this.EmpPositionInfoRowDeleting(this, new EmpPositionInfoRowChangeEvent(((EmpPositionInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpPositionInfoRow(EmpPositionInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpPositionInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpRecurringPaymentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpRPID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpRPEffFr;
            
            private global::System.Data.DataColumn columnEmpRPEffTo;
            
            private global::System.Data.DataColumn columnPayCodeID;
            
            private global::System.Data.DataColumn columnEmpRPAmount;
            
            private global::System.Data.DataColumn columnCurrencyID;
            
            private global::System.Data.DataColumn columnEmpRPUnit;
            
            private global::System.Data.DataColumn columnEmpRPMethod;
            
            private global::System.Data.DataColumn columnEmpAccID;
            
            private global::System.Data.DataColumn columnEmpRPRemark;
            
            private global::System.Data.DataColumn columnPaymentCodeID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnPaymentCodeDesc;
            
            private global::System.Data.DataColumn columnPaymentTypeID;
            
            private global::System.Data.DataColumn columnPaymentCodeIsProrata;
            
            private global::System.Data.DataColumn columnPaymentCodeIsMPF;
            
            private global::System.Data.DataColumn columnPaymentCodeIsTopUp;
            
            private global::System.Data.DataColumn columnPaymentCodeIsWages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRecurringPaymentDataTable() {
                this.TableName = "EmpRecurringPayment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpRecurringPaymentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpRecurringPaymentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRPIDColumn {
                get {
                    return this.columnEmpRPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRPEffFrColumn {
                get {
                    return this.columnEmpRPEffFr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRPEffToColumn {
                get {
                    return this.columnEmpRPEffTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayCodeIDColumn {
                get {
                    return this.columnPayCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRPAmountColumn {
                get {
                    return this.columnEmpRPAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRPUnitColumn {
                get {
                    return this.columnEmpRPUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRPMethodColumn {
                get {
                    return this.columnEmpRPMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpAccIDColumn {
                get {
                    return this.columnEmpAccID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRPRemarkColumn {
                get {
                    return this.columnEmpRPRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIDColumn {
                get {
                    return this.columnPaymentCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDescColumn {
                get {
                    return this.columnPaymentCodeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentTypeIDColumn {
                get {
                    return this.columnPaymentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsProrataColumn {
                get {
                    return this.columnPaymentCodeIsProrata;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsMPFColumn {
                get {
                    return this.columnPaymentCodeIsMPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsTopUpColumn {
                get {
                    return this.columnPaymentCodeIsTopUp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsWagesColumn {
                get {
                    return this.columnPaymentCodeIsWages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRecurringPaymentRow this[int index] {
                get {
                    return ((EmpRecurringPaymentRow)(this.Rows[index]));
                }
            }
            
            public event EmpRecurringPaymentRowChangeEventHandler EmpRecurringPaymentRowChanging;
            
            public event EmpRecurringPaymentRowChangeEventHandler EmpRecurringPaymentRowChanged;
            
            public event EmpRecurringPaymentRowChangeEventHandler EmpRecurringPaymentRowDeleting;
            
            public event EmpRecurringPaymentRowChangeEventHandler EmpRecurringPaymentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpRecurringPaymentRow(EmpRecurringPaymentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRecurringPaymentRow AddEmpRecurringPaymentRow(
                        employeedetailRow parentemployeedetailRowByemployeedetail_EmpRecurringPayment, 
                        System.DateTime EmpRPEffFr, 
                        System.DateTime EmpRPEffTo, 
                        int PayCodeID, 
                        decimal EmpRPAmount, 
                        string CurrencyID, 
                        string EmpRPUnit, 
                        string EmpRPMethod, 
                        int EmpAccID, 
                        string EmpRPRemark, 
                        string PaymentCode, 
                        string PaymentCodeDesc, 
                        int PaymentTypeID, 
                        int PaymentCodeIsProrata, 
                        int PaymentCodeIsMPF, 
                        int PaymentCodeIsTopUp, 
                        int PaymentCodeIsWages) {
                EmpRecurringPaymentRow rowEmpRecurringPaymentRow = ((EmpRecurringPaymentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        EmpRPEffFr,
                        EmpRPEffTo,
                        PayCodeID,
                        EmpRPAmount,
                        CurrencyID,
                        EmpRPUnit,
                        EmpRPMethod,
                        EmpAccID,
                        EmpRPRemark,
                        null,
                        PaymentCode,
                        PaymentCodeDesc,
                        PaymentTypeID,
                        PaymentCodeIsProrata,
                        PaymentCodeIsMPF,
                        PaymentCodeIsTopUp,
                        PaymentCodeIsWages};
                if ((parentemployeedetailRowByemployeedetail_EmpRecurringPayment != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpRecurringPayment[0];
                }
                rowEmpRecurringPaymentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpRecurringPaymentRow);
                return rowEmpRecurringPaymentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRecurringPaymentRow FindByEmpRPID(int EmpRPID) {
                return ((EmpRecurringPaymentRow)(this.Rows.Find(new object[] {
                            EmpRPID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpRecurringPaymentDataTable cln = ((EmpRecurringPaymentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpRecurringPaymentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpRPID = base.Columns["EmpRPID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpRPEffFr = base.Columns["EmpRPEffFr"];
                this.columnEmpRPEffTo = base.Columns["EmpRPEffTo"];
                this.columnPayCodeID = base.Columns["PayCodeID"];
                this.columnEmpRPAmount = base.Columns["EmpRPAmount"];
                this.columnCurrencyID = base.Columns["CurrencyID"];
                this.columnEmpRPUnit = base.Columns["EmpRPUnit"];
                this.columnEmpRPMethod = base.Columns["EmpRPMethod"];
                this.columnEmpAccID = base.Columns["EmpAccID"];
                this.columnEmpRPRemark = base.Columns["EmpRPRemark"];
                this.columnPaymentCodeID = base.Columns["PaymentCodeID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnPaymentCodeDesc = base.Columns["PaymentCodeDesc"];
                this.columnPaymentTypeID = base.Columns["PaymentTypeID"];
                this.columnPaymentCodeIsProrata = base.Columns["PaymentCodeIsProrata"];
                this.columnPaymentCodeIsMPF = base.Columns["PaymentCodeIsMPF"];
                this.columnPaymentCodeIsTopUp = base.Columns["PaymentCodeIsTopUp"];
                this.columnPaymentCodeIsWages = base.Columns["PaymentCodeIsWages"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpRPID = new global::System.Data.DataColumn("EmpRPID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRPID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpRPEffFr = new global::System.Data.DataColumn("EmpRPEffFr", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRPEffFr);
                this.columnEmpRPEffTo = new global::System.Data.DataColumn("EmpRPEffTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRPEffTo);
                this.columnPayCodeID = new global::System.Data.DataColumn("PayCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayCodeID);
                this.columnEmpRPAmount = new global::System.Data.DataColumn("EmpRPAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRPAmount);
                this.columnCurrencyID = new global::System.Data.DataColumn("CurrencyID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyID);
                this.columnEmpRPUnit = new global::System.Data.DataColumn("EmpRPUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRPUnit);
                this.columnEmpRPMethod = new global::System.Data.DataColumn("EmpRPMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRPMethod);
                this.columnEmpAccID = new global::System.Data.DataColumn("EmpAccID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpAccID);
                this.columnEmpRPRemark = new global::System.Data.DataColumn("EmpRPRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRPRemark);
                this.columnPaymentCodeID = new global::System.Data.DataColumn("PaymentCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnPaymentCodeDesc = new global::System.Data.DataColumn("PaymentCodeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDesc);
                this.columnPaymentTypeID = new global::System.Data.DataColumn("PaymentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentTypeID);
                this.columnPaymentCodeIsProrata = new global::System.Data.DataColumn("PaymentCodeIsProrata", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsProrata);
                this.columnPaymentCodeIsMPF = new global::System.Data.DataColumn("PaymentCodeIsMPF", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsMPF);
                this.columnPaymentCodeIsTopUp = new global::System.Data.DataColumn("PaymentCodeIsTopUp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsTopUp);
                this.columnPaymentCodeIsWages = new global::System.Data.DataColumn("PaymentCodeIsWages", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsWages);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpRPID}, true));
                this.columnEmpRPID.AutoIncrement = true;
                this.columnEmpRPID.AllowDBNull = false;
                this.columnEmpRPID.ReadOnly = true;
                this.columnEmpRPID.Unique = true;
                this.columnCurrencyID.MaxLength = 3;
                this.columnEmpRPUnit.MaxLength = 50;
                this.columnEmpRPMethod.MaxLength = 50;
                this.columnPaymentCodeID.AutoIncrement = true;
                this.columnPaymentCodeID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRecurringPaymentRow NewEmpRecurringPaymentRow() {
                return ((EmpRecurringPaymentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpRecurringPaymentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpRecurringPaymentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpRecurringPaymentRowChanged != null)) {
                    this.EmpRecurringPaymentRowChanged(this, new EmpRecurringPaymentRowChangeEvent(((EmpRecurringPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpRecurringPaymentRowChanging != null)) {
                    this.EmpRecurringPaymentRowChanging(this, new EmpRecurringPaymentRowChangeEvent(((EmpRecurringPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpRecurringPaymentRowDeleted != null)) {
                    this.EmpRecurringPaymentRowDeleted(this, new EmpRecurringPaymentRowChangeEvent(((EmpRecurringPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpRecurringPaymentRowDeleting != null)) {
                    this.EmpRecurringPaymentRowDeleting(this, new EmpRecurringPaymentRowChangeEvent(((EmpRecurringPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpRecurringPaymentRow(EmpRecurringPaymentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpRecurringPaymentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpBankAccountDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpBankAccountID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpBankCode;
            
            private global::System.Data.DataColumn columnEmpBranchCode;
            
            private global::System.Data.DataColumn columnEmpAccountNo;
            
            private global::System.Data.DataColumn columnEmpBankAccountHolderName;
            
            private global::System.Data.DataColumn columnEmpAccDefault;
            
            private global::System.Data.DataColumn columnEmpBankAccountRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountDataTable() {
                this.TableName = "EmpBankAccount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpBankAccountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpBankAccountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpBankAccountIDColumn {
                get {
                    return this.columnEmpBankAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpBankCodeColumn {
                get {
                    return this.columnEmpBankCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpBranchCodeColumn {
                get {
                    return this.columnEmpBranchCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpAccountNoColumn {
                get {
                    return this.columnEmpAccountNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpBankAccountHolderNameColumn {
                get {
                    return this.columnEmpBankAccountHolderName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpAccDefaultColumn {
                get {
                    return this.columnEmpAccDefault;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpBankAccountRemarkColumn {
                get {
                    return this.columnEmpBankAccountRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountRow this[int index] {
                get {
                    return ((EmpBankAccountRow)(this.Rows[index]));
                }
            }
            
            public event EmpBankAccountRowChangeEventHandler EmpBankAccountRowChanging;
            
            public event EmpBankAccountRowChangeEventHandler EmpBankAccountRowChanged;
            
            public event EmpBankAccountRowChangeEventHandler EmpBankAccountRowDeleting;
            
            public event EmpBankAccountRowChangeEventHandler EmpBankAccountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpBankAccountRow(EmpBankAccountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountRow AddEmpBankAccountRow(employeedetailRow parentemployeedetailRowByemployeedetail_EmpBankAccount, BankListRow parentBankListRowByBankList_EmpBankAccount, string EmpBranchCode, string EmpAccountNo, string EmpBankAccountHolderName, bool EmpAccDefault, string EmpBankAccountRemark) {
                EmpBankAccountRow rowEmpBankAccountRow = ((EmpBankAccountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        EmpBranchCode,
                        EmpAccountNo,
                        EmpBankAccountHolderName,
                        EmpAccDefault,
                        EmpBankAccountRemark};
                if ((parentemployeedetailRowByemployeedetail_EmpBankAccount != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpBankAccount[0];
                }
                if ((parentBankListRowByBankList_EmpBankAccount != null)) {
                    columnValuesArray[2] = parentBankListRowByBankList_EmpBankAccount[0];
                }
                rowEmpBankAccountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpBankAccountRow);
                return rowEmpBankAccountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountRow FindByEmpBankAccountID(int EmpBankAccountID) {
                return ((EmpBankAccountRow)(this.Rows.Find(new object[] {
                            EmpBankAccountID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpBankAccountDataTable cln = ((EmpBankAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpBankAccountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpBankAccountID = base.Columns["EmpBankAccountID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpBankCode = base.Columns["EmpBankCode"];
                this.columnEmpBranchCode = base.Columns["EmpBranchCode"];
                this.columnEmpAccountNo = base.Columns["EmpAccountNo"];
                this.columnEmpBankAccountHolderName = base.Columns["EmpBankAccountHolderName"];
                this.columnEmpAccDefault = base.Columns["EmpAccDefault"];
                this.columnEmpBankAccountRemark = base.Columns["EmpBankAccountRemark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpBankAccountID = new global::System.Data.DataColumn("EmpBankAccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpBankAccountID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpBankCode = new global::System.Data.DataColumn("EmpBankCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpBankCode);
                this.columnEmpBranchCode = new global::System.Data.DataColumn("EmpBranchCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpBranchCode);
                this.columnEmpAccountNo = new global::System.Data.DataColumn("EmpAccountNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpAccountNo);
                this.columnEmpBankAccountHolderName = new global::System.Data.DataColumn("EmpBankAccountHolderName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpBankAccountHolderName);
                this.columnEmpAccDefault = new global::System.Data.DataColumn("EmpAccDefault", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpAccDefault);
                this.columnEmpBankAccountRemark = new global::System.Data.DataColumn("EmpBankAccountRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpBankAccountRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpBankAccountID}, true));
                this.columnEmpBankAccountID.AutoIncrement = true;
                this.columnEmpBankAccountID.AllowDBNull = false;
                this.columnEmpBankAccountID.ReadOnly = true;
                this.columnEmpBankAccountID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountRow NewEmpBankAccountRow() {
                return ((EmpBankAccountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpBankAccountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpBankAccountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpBankAccountRowChanged != null)) {
                    this.EmpBankAccountRowChanged(this, new EmpBankAccountRowChangeEvent(((EmpBankAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpBankAccountRowChanging != null)) {
                    this.EmpBankAccountRowChanging(this, new EmpBankAccountRowChangeEvent(((EmpBankAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpBankAccountRowDeleted != null)) {
                    this.EmpBankAccountRowDeleted(this, new EmpBankAccountRowChangeEvent(((EmpBankAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpBankAccountRowDeleting != null)) {
                    this.EmpBankAccountRowDeleting(this, new EmpBankAccountRowChangeEvent(((EmpBankAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpBankAccountRow(EmpBankAccountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpBankAccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpSpouseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpSpouseID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpSpouseSurname;
            
            private global::System.Data.DataColumn columnEmpSpouseOtherName;
            
            private global::System.Data.DataColumn columnEmpSpouseChineseName;
            
            private global::System.Data.DataColumn columnEmpSpouseHKID;
            
            private global::System.Data.DataColumn columnEmpSpousePassportNo;
            
            private global::System.Data.DataColumn columnEmpSpousePassportIssuedCountry;
            
            private global::System.Data.DataColumn columnEmpGender;
            
            private global::System.Data.DataColumn columnEmpIsMedicalSchemaInsured;
            
            private global::System.Data.DataColumn columnEmpMedicalEffectiveDate;
            
            private global::System.Data.DataColumn columnEmpMedicalExpiryDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSpouseDataTable() {
                this.TableName = "EmpSpouse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpSpouseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpSpouseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSpouseIDColumn {
                get {
                    return this.columnEmpSpouseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSpouseSurnameColumn {
                get {
                    return this.columnEmpSpouseSurname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSpouseOtherNameColumn {
                get {
                    return this.columnEmpSpouseOtherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSpouseChineseNameColumn {
                get {
                    return this.columnEmpSpouseChineseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSpouseHKIDColumn {
                get {
                    return this.columnEmpSpouseHKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSpousePassportNoColumn {
                get {
                    return this.columnEmpSpousePassportNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSpousePassportIssuedCountryColumn {
                get {
                    return this.columnEmpSpousePassportIssuedCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpGenderColumn {
                get {
                    return this.columnEmpGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIsMedicalSchemaInsuredColumn {
                get {
                    return this.columnEmpIsMedicalSchemaInsured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpMedicalEffectiveDateColumn {
                get {
                    return this.columnEmpMedicalEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpMedicalExpiryDateColumn {
                get {
                    return this.columnEmpMedicalExpiryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSpouseRow this[int index] {
                get {
                    return ((EmpSpouseRow)(this.Rows[index]));
                }
            }
            
            public event EmpSpouseRowChangeEventHandler EmpSpouseRowChanging;
            
            public event EmpSpouseRowChangeEventHandler EmpSpouseRowChanged;
            
            public event EmpSpouseRowChangeEventHandler EmpSpouseRowDeleting;
            
            public event EmpSpouseRowChangeEventHandler EmpSpouseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpSpouseRow(EmpSpouseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSpouseRow AddEmpSpouseRow(employeedetailRow parentemployeedetailRowByemployeedetail_EmpSpouse, string EmpSpouseSurname, string EmpSpouseOtherName, string EmpSpouseChineseName, string EmpSpouseHKID, string EmpSpousePassportNo, string EmpSpousePassportIssuedCountry, string EmpGender, string EmpIsMedicalSchemaInsured, System.DateTime EmpMedicalEffectiveDate, System.DateTime EmpMedicalExpiryDate) {
                EmpSpouseRow rowEmpSpouseRow = ((EmpSpouseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        EmpSpouseSurname,
                        EmpSpouseOtherName,
                        EmpSpouseChineseName,
                        EmpSpouseHKID,
                        EmpSpousePassportNo,
                        EmpSpousePassportIssuedCountry,
                        EmpGender,
                        EmpIsMedicalSchemaInsured,
                        EmpMedicalEffectiveDate,
                        EmpMedicalExpiryDate};
                if ((parentemployeedetailRowByemployeedetail_EmpSpouse != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpSpouse[0];
                }
                rowEmpSpouseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpSpouseRow);
                return rowEmpSpouseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSpouseRow FindByEmpSpouseID(int EmpSpouseID) {
                return ((EmpSpouseRow)(this.Rows.Find(new object[] {
                            EmpSpouseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpSpouseDataTable cln = ((EmpSpouseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpSpouseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpSpouseID = base.Columns["EmpSpouseID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpSpouseSurname = base.Columns["EmpSpouseSurname"];
                this.columnEmpSpouseOtherName = base.Columns["EmpSpouseOtherName"];
                this.columnEmpSpouseChineseName = base.Columns["EmpSpouseChineseName"];
                this.columnEmpSpouseHKID = base.Columns["EmpSpouseHKID"];
                this.columnEmpSpousePassportNo = base.Columns["EmpSpousePassportNo"];
                this.columnEmpSpousePassportIssuedCountry = base.Columns["EmpSpousePassportIssuedCountry"];
                this.columnEmpGender = base.Columns["EmpGender"];
                this.columnEmpIsMedicalSchemaInsured = base.Columns["EmpIsMedicalSchemaInsured"];
                this.columnEmpMedicalEffectiveDate = base.Columns["EmpMedicalEffectiveDate"];
                this.columnEmpMedicalExpiryDate = base.Columns["EmpMedicalExpiryDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpSpouseID = new global::System.Data.DataColumn("EmpSpouseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSpouseID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpSpouseSurname = new global::System.Data.DataColumn("EmpSpouseSurname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSpouseSurname);
                this.columnEmpSpouseOtherName = new global::System.Data.DataColumn("EmpSpouseOtherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSpouseOtherName);
                this.columnEmpSpouseChineseName = new global::System.Data.DataColumn("EmpSpouseChineseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSpouseChineseName);
                this.columnEmpSpouseHKID = new global::System.Data.DataColumn("EmpSpouseHKID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSpouseHKID);
                this.columnEmpSpousePassportNo = new global::System.Data.DataColumn("EmpSpousePassportNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSpousePassportNo);
                this.columnEmpSpousePassportIssuedCountry = new global::System.Data.DataColumn("EmpSpousePassportIssuedCountry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSpousePassportIssuedCountry);
                this.columnEmpGender = new global::System.Data.DataColumn("EmpGender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpGender);
                this.columnEmpIsMedicalSchemaInsured = new global::System.Data.DataColumn("EmpIsMedicalSchemaInsured", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpIsMedicalSchemaInsured);
                this.columnEmpMedicalEffectiveDate = new global::System.Data.DataColumn("EmpMedicalEffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpMedicalEffectiveDate);
                this.columnEmpMedicalExpiryDate = new global::System.Data.DataColumn("EmpMedicalExpiryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpMedicalExpiryDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpSpouseID}, true));
                this.columnEmpSpouseID.AutoIncrement = true;
                this.columnEmpSpouseID.AllowDBNull = false;
                this.columnEmpSpouseID.ReadOnly = true;
                this.columnEmpSpouseID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSpouseRow NewEmpSpouseRow() {
                return ((EmpSpouseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpSpouseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpSpouseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpSpouseRowChanged != null)) {
                    this.EmpSpouseRowChanged(this, new EmpSpouseRowChangeEvent(((EmpSpouseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpSpouseRowChanging != null)) {
                    this.EmpSpouseRowChanging(this, new EmpSpouseRowChangeEvent(((EmpSpouseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpSpouseRowDeleted != null)) {
                    this.EmpSpouseRowDeleted(this, new EmpSpouseRowChangeEvent(((EmpSpouseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpSpouseRowDeleting != null)) {
                    this.EmpSpouseRowDeleting(this, new EmpSpouseRowChangeEvent(((EmpSpouseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpSpouseRow(EmpSpouseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpSpouseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpDependantDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpDependantID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpDependantSurname;
            
            private global::System.Data.DataColumn columnEmpDependantOtherName;
            
            private global::System.Data.DataColumn columnEmpDependantChineseName;
            
            private global::System.Data.DataColumn columnEmpDependantGender;
            
            private global::System.Data.DataColumn columnEmpDependantHKID;
            
            private global::System.Data.DataColumn columnEmpDependantPassportNo;
            
            private global::System.Data.DataColumn columnEmpDependantPassportIssuedCountry;
            
            private global::System.Data.DataColumn columnEmpDependantRelationship;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDependantDataTable() {
                this.TableName = "EmpDependant";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpDependantDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpDependantDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantIDColumn {
                get {
                    return this.columnEmpDependantID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantSurnameColumn {
                get {
                    return this.columnEmpDependantSurname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantOtherNameColumn {
                get {
                    return this.columnEmpDependantOtherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantChineseNameColumn {
                get {
                    return this.columnEmpDependantChineseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantGenderColumn {
                get {
                    return this.columnEmpDependantGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantHKIDColumn {
                get {
                    return this.columnEmpDependantHKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantPassportNoColumn {
                get {
                    return this.columnEmpDependantPassportNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantPassportIssuedCountryColumn {
                get {
                    return this.columnEmpDependantPassportIssuedCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDependantRelationshipColumn {
                get {
                    return this.columnEmpDependantRelationship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDependantRow this[int index] {
                get {
                    return ((EmpDependantRow)(this.Rows[index]));
                }
            }
            
            public event EmpDependantRowChangeEventHandler EmpDependantRowChanging;
            
            public event EmpDependantRowChangeEventHandler EmpDependantRowChanged;
            
            public event EmpDependantRowChangeEventHandler EmpDependantRowDeleting;
            
            public event EmpDependantRowChangeEventHandler EmpDependantRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpDependantRow(EmpDependantRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDependantRow AddEmpDependantRow(employeedetailRow parentemployeedetailRowByemployeedetail_EmpDependant, string EmpDependantSurname, string EmpDependantOtherName, string EmpDependantChineseName, string EmpDependantGender, string EmpDependantHKID, string EmpDependantPassportNo, string EmpDependantPassportIssuedCountry, string EmpDependantRelationship) {
                EmpDependantRow rowEmpDependantRow = ((EmpDependantRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        EmpDependantSurname,
                        EmpDependantOtherName,
                        EmpDependantChineseName,
                        EmpDependantGender,
                        EmpDependantHKID,
                        EmpDependantPassportNo,
                        EmpDependantPassportIssuedCountry,
                        EmpDependantRelationship};
                if ((parentemployeedetailRowByemployeedetail_EmpDependant != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpDependant[0];
                }
                rowEmpDependantRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpDependantRow);
                return rowEmpDependantRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDependantRow FindByEmpDependantID(int EmpDependantID) {
                return ((EmpDependantRow)(this.Rows.Find(new object[] {
                            EmpDependantID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpDependantDataTable cln = ((EmpDependantDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpDependantDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpDependantID = base.Columns["EmpDependantID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpDependantSurname = base.Columns["EmpDependantSurname"];
                this.columnEmpDependantOtherName = base.Columns["EmpDependantOtherName"];
                this.columnEmpDependantChineseName = base.Columns["EmpDependantChineseName"];
                this.columnEmpDependantGender = base.Columns["EmpDependantGender"];
                this.columnEmpDependantHKID = base.Columns["EmpDependantHKID"];
                this.columnEmpDependantPassportNo = base.Columns["EmpDependantPassportNo"];
                this.columnEmpDependantPassportIssuedCountry = base.Columns["EmpDependantPassportIssuedCountry"];
                this.columnEmpDependantRelationship = base.Columns["EmpDependantRelationship"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpDependantID = new global::System.Data.DataColumn("EmpDependantID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpDependantSurname = new global::System.Data.DataColumn("EmpDependantSurname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantSurname);
                this.columnEmpDependantOtherName = new global::System.Data.DataColumn("EmpDependantOtherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantOtherName);
                this.columnEmpDependantChineseName = new global::System.Data.DataColumn("EmpDependantChineseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantChineseName);
                this.columnEmpDependantGender = new global::System.Data.DataColumn("EmpDependantGender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantGender);
                this.columnEmpDependantHKID = new global::System.Data.DataColumn("EmpDependantHKID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantHKID);
                this.columnEmpDependantPassportNo = new global::System.Data.DataColumn("EmpDependantPassportNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantPassportNo);
                this.columnEmpDependantPassportIssuedCountry = new global::System.Data.DataColumn("EmpDependantPassportIssuedCountry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantPassportIssuedCountry);
                this.columnEmpDependantRelationship = new global::System.Data.DataColumn("EmpDependantRelationship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDependantRelationship);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpDependantID}, true));
                this.columnEmpDependantID.AutoIncrement = true;
                this.columnEmpDependantID.AllowDBNull = false;
                this.columnEmpDependantID.ReadOnly = true;
                this.columnEmpDependantID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDependantRow NewEmpDependantRow() {
                return ((EmpDependantRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpDependantRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpDependantRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpDependantRowChanged != null)) {
                    this.EmpDependantRowChanged(this, new EmpDependantRowChangeEvent(((EmpDependantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpDependantRowChanging != null)) {
                    this.EmpDependantRowChanging(this, new EmpDependantRowChangeEvent(((EmpDependantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpDependantRowDeleted != null)) {
                    this.EmpDependantRowDeleted(this, new EmpDependantRowChangeEvent(((EmpDependantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpDependantRowDeleting != null)) {
                    this.EmpDependantRowDeleting(this, new EmpDependantRowChangeEvent(((EmpDependantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpDependantRow(EmpDependantRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpDependantDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpQualificationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpQualificationID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnQualificationID;
            
            private global::System.Data.DataColumn columnEmpQualificationFrom;
            
            private global::System.Data.DataColumn columnEmpQualificationTo;
            
            private global::System.Data.DataColumn columnEmpQualificationInstitution;
            
            private global::System.Data.DataColumn columnEmpQualificationRemark;
            
            private global::System.Data.DataColumn columnQualificationID1;
            
            private global::System.Data.DataColumn columnQualificationCode;
            
            private global::System.Data.DataColumn columnQualificationDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpQualificationDataTable() {
                this.TableName = "EmpQualification";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpQualificationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpQualificationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpQualificationIDColumn {
                get {
                    return this.columnEmpQualificationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualificationIDColumn {
                get {
                    return this.columnQualificationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpQualificationFromColumn {
                get {
                    return this.columnEmpQualificationFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpQualificationToColumn {
                get {
                    return this.columnEmpQualificationTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpQualificationInstitutionColumn {
                get {
                    return this.columnEmpQualificationInstitution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpQualificationRemarkColumn {
                get {
                    return this.columnEmpQualificationRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualificationID1Column {
                get {
                    return this.columnQualificationID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualificationCodeColumn {
                get {
                    return this.columnQualificationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualificationDescColumn {
                get {
                    return this.columnQualificationDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpQualificationRow this[int index] {
                get {
                    return ((EmpQualificationRow)(this.Rows[index]));
                }
            }
            
            public event EmpQualificationRowChangeEventHandler EmpQualificationRowChanging;
            
            public event EmpQualificationRowChangeEventHandler EmpQualificationRowChanged;
            
            public event EmpQualificationRowChangeEventHandler EmpQualificationRowDeleting;
            
            public event EmpQualificationRowChangeEventHandler EmpQualificationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpQualificationRow(EmpQualificationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpQualificationRow AddEmpQualificationRow(employeedetailRow parentemployeedetailRowByemployeedetail_EmpQualification, int QualificationID, System.DateTime EmpQualificationFrom, System.DateTime EmpQualificationTo, string EmpQualificationInstitution, string EmpQualificationRemark, string QualificationCode, string QualificationDesc) {
                EmpQualificationRow rowEmpQualificationRow = ((EmpQualificationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        QualificationID,
                        EmpQualificationFrom,
                        EmpQualificationTo,
                        EmpQualificationInstitution,
                        EmpQualificationRemark,
                        null,
                        QualificationCode,
                        QualificationDesc};
                if ((parentemployeedetailRowByemployeedetail_EmpQualification != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpQualification[0];
                }
                rowEmpQualificationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpQualificationRow);
                return rowEmpQualificationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpQualificationDataTable cln = ((EmpQualificationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpQualificationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpQualificationID = base.Columns["EmpQualificationID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnQualificationID = base.Columns["QualificationID"];
                this.columnEmpQualificationFrom = base.Columns["EmpQualificationFrom"];
                this.columnEmpQualificationTo = base.Columns["EmpQualificationTo"];
                this.columnEmpQualificationInstitution = base.Columns["EmpQualificationInstitution"];
                this.columnEmpQualificationRemark = base.Columns["EmpQualificationRemark"];
                this.columnQualificationID1 = base.Columns["QualificationID1"];
                this.columnQualificationCode = base.Columns["QualificationCode"];
                this.columnQualificationDesc = base.Columns["QualificationDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpQualificationID = new global::System.Data.DataColumn("EmpQualificationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpQualificationID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnQualificationID = new global::System.Data.DataColumn("QualificationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualificationID);
                this.columnEmpQualificationFrom = new global::System.Data.DataColumn("EmpQualificationFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpQualificationFrom);
                this.columnEmpQualificationTo = new global::System.Data.DataColumn("EmpQualificationTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpQualificationTo);
                this.columnEmpQualificationInstitution = new global::System.Data.DataColumn("EmpQualificationInstitution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpQualificationInstitution);
                this.columnEmpQualificationRemark = new global::System.Data.DataColumn("EmpQualificationRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpQualificationRemark);
                this.columnQualificationID1 = new global::System.Data.DataColumn("QualificationID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualificationID1);
                this.columnQualificationCode = new global::System.Data.DataColumn("QualificationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualificationCode);
                this.columnQualificationDesc = new global::System.Data.DataColumn("QualificationDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualificationDesc);
                this.columnEmpQualificationID.AutoIncrement = true;
                this.columnEmpQualificationID.AllowDBNull = false;
                this.columnEmpQualificationID.ReadOnly = true;
                this.columnQualificationID1.AutoIncrement = true;
                this.columnQualificationID1.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpQualificationRow NewEmpQualificationRow() {
                return ((EmpQualificationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpQualificationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpQualificationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpQualificationRowChanged != null)) {
                    this.EmpQualificationRowChanged(this, new EmpQualificationRowChangeEvent(((EmpQualificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpQualificationRowChanging != null)) {
                    this.EmpQualificationRowChanging(this, new EmpQualificationRowChangeEvent(((EmpQualificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpQualificationRowDeleted != null)) {
                    this.EmpQualificationRowDeleted(this, new EmpQualificationRowChangeEvent(((EmpQualificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpQualificationRowDeleting != null)) {
                    this.EmpQualificationRowDeleting(this, new EmpQualificationRowChangeEvent(((EmpQualificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpQualificationRow(EmpQualificationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpQualificationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpSkillDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpSkillID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnSkillID;
            
            private global::System.Data.DataColumn columnSkillLevelID;
            
            private global::System.Data.DataColumn columnSkillID1;
            
            private global::System.Data.DataColumn columnSkillCode;
            
            private global::System.Data.DataColumn columnSkillDesc;
            
            private global::System.Data.DataColumn columnSkillLevelID1;
            
            private global::System.Data.DataColumn columnSkillLevelCode;
            
            private global::System.Data.DataColumn columnSkillLevelDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSkillDataTable() {
                this.TableName = "EmpSkill";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpSkillDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpSkillDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSkillIDColumn {
                get {
                    return this.columnEmpSkillID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillIDColumn {
                get {
                    return this.columnSkillID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillLevelIDColumn {
                get {
                    return this.columnSkillLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillID1Column {
                get {
                    return this.columnSkillID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillCodeColumn {
                get {
                    return this.columnSkillCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillDescColumn {
                get {
                    return this.columnSkillDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillLevelID1Column {
                get {
                    return this.columnSkillLevelID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillLevelCodeColumn {
                get {
                    return this.columnSkillLevelCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillLevelDescColumn {
                get {
                    return this.columnSkillLevelDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSkillRow this[int index] {
                get {
                    return ((EmpSkillRow)(this.Rows[index]));
                }
            }
            
            public event EmpSkillRowChangeEventHandler EmpSkillRowChanging;
            
            public event EmpSkillRowChangeEventHandler EmpSkillRowChanged;
            
            public event EmpSkillRowChangeEventHandler EmpSkillRowDeleting;
            
            public event EmpSkillRowChangeEventHandler EmpSkillRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpSkillRow(EmpSkillRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSkillRow AddEmpSkillRow(employeedetailRow parentemployeedetailRowByemployeedetail_EmpSkill, int SkillID, int SkillLevelID, string SkillCode, string SkillDesc, string SkillLevelCode, string SkillLevelDesc) {
                EmpSkillRow rowEmpSkillRow = ((EmpSkillRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        SkillID,
                        SkillLevelID,
                        null,
                        SkillCode,
                        SkillDesc,
                        null,
                        SkillLevelCode,
                        SkillLevelDesc};
                if ((parentemployeedetailRowByemployeedetail_EmpSkill != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpSkill[0];
                }
                rowEmpSkillRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpSkillRow);
                return rowEmpSkillRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpSkillDataTable cln = ((EmpSkillDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpSkillDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpSkillID = base.Columns["EmpSkillID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnSkillID = base.Columns["SkillID"];
                this.columnSkillLevelID = base.Columns["SkillLevelID"];
                this.columnSkillID1 = base.Columns["SkillID1"];
                this.columnSkillCode = base.Columns["SkillCode"];
                this.columnSkillDesc = base.Columns["SkillDesc"];
                this.columnSkillLevelID1 = base.Columns["SkillLevelID1"];
                this.columnSkillLevelCode = base.Columns["SkillLevelCode"];
                this.columnSkillLevelDesc = base.Columns["SkillLevelDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpSkillID = new global::System.Data.DataColumn("EmpSkillID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSkillID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnSkillID = new global::System.Data.DataColumn("SkillID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillID);
                this.columnSkillLevelID = new global::System.Data.DataColumn("SkillLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillLevelID);
                this.columnSkillID1 = new global::System.Data.DataColumn("SkillID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillID1);
                this.columnSkillCode = new global::System.Data.DataColumn("SkillCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillCode);
                this.columnSkillDesc = new global::System.Data.DataColumn("SkillDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillDesc);
                this.columnSkillLevelID1 = new global::System.Data.DataColumn("SkillLevelID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillLevelID1);
                this.columnSkillLevelCode = new global::System.Data.DataColumn("SkillLevelCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillLevelCode);
                this.columnSkillLevelDesc = new global::System.Data.DataColumn("SkillLevelDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillLevelDesc);
                this.columnEmpSkillID.AutoIncrement = true;
                this.columnEmpSkillID.AllowDBNull = false;
                this.columnEmpSkillID.ReadOnly = true;
                this.columnSkillID1.AutoIncrement = true;
                this.columnSkillID1.ReadOnly = true;
                this.columnSkillLevelID1.AutoIncrement = true;
                this.columnSkillLevelID1.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSkillRow NewEmpSkillRow() {
                return ((EmpSkillRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpSkillRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpSkillRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpSkillRowChanged != null)) {
                    this.EmpSkillRowChanged(this, new EmpSkillRowChangeEvent(((EmpSkillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpSkillRowChanging != null)) {
                    this.EmpSkillRowChanging(this, new EmpSkillRowChangeEvent(((EmpSkillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpSkillRowDeleted != null)) {
                    this.EmpSkillRowDeleted(this, new EmpSkillRowChangeEvent(((EmpSkillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpSkillRowDeleting != null)) {
                    this.EmpSkillRowDeleting(this, new EmpSkillRowChangeEvent(((EmpSkillRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpSkillRow(EmpSkillRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpSkillDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpHierarchyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpHierarchyID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpPosID;
            
            private global::System.Data.DataColumn columnHElementID;
            
            private global::System.Data.DataColumn columnHLevelID;
            
            private global::System.Data.DataColumn columnHElementCode;
            
            private global::System.Data.DataColumn columnHElementDesc;
            
            private global::System.Data.DataColumn columnHLevelSeqNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyDataTable() {
                this.TableName = "EmpHierarchy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpHierarchyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpHierarchyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpHierarchyIDColumn {
                get {
                    return this.columnEmpHierarchyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPosIDColumn {
                get {
                    return this.columnEmpPosID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementIDColumn {
                get {
                    return this.columnHElementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLevelIDColumn {
                get {
                    return this.columnHLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementCodeColumn {
                get {
                    return this.columnHElementCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementDescColumn {
                get {
                    return this.columnHElementDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLevelSeqNoColumn {
                get {
                    return this.columnHLevelSeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyRow this[int index] {
                get {
                    return ((EmpHierarchyRow)(this.Rows[index]));
                }
            }
            
            public event EmpHierarchyRowChangeEventHandler EmpHierarchyRowChanging;
            
            public event EmpHierarchyRowChangeEventHandler EmpHierarchyRowChanged;
            
            public event EmpHierarchyRowChangeEventHandler EmpHierarchyRowDeleting;
            
            public event EmpHierarchyRowChangeEventHandler EmpHierarchyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpHierarchyRow(EmpHierarchyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyRow AddEmpHierarchyRow(int EmpID, EmpPositionInfoRow parentEmpPositionInfoRowByEmpPositionInfo_EmpHierarchy, int HElementID, HierarchyLevelRow parentHierarchyLevelRowByHierarchyLevel_EmpHierarchy, string HElementCode, string HElementDesc, int HLevelSeqNo) {
                EmpHierarchyRow rowEmpHierarchyRow = ((EmpHierarchyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmpID,
                        null,
                        HElementID,
                        null,
                        HElementCode,
                        HElementDesc,
                        HLevelSeqNo};
                if ((parentEmpPositionInfoRowByEmpPositionInfo_EmpHierarchy != null)) {
                    columnValuesArray[2] = parentEmpPositionInfoRowByEmpPositionInfo_EmpHierarchy[0];
                }
                if ((parentHierarchyLevelRowByHierarchyLevel_EmpHierarchy != null)) {
                    columnValuesArray[4] = parentHierarchyLevelRowByHierarchyLevel_EmpHierarchy[0];
                }
                rowEmpHierarchyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpHierarchyRow);
                return rowEmpHierarchyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyRow FindByEmpHierarchyID(int EmpHierarchyID) {
                return ((EmpHierarchyRow)(this.Rows.Find(new object[] {
                            EmpHierarchyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpHierarchyDataTable cln = ((EmpHierarchyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpHierarchyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpHierarchyID = base.Columns["EmpHierarchyID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpPosID = base.Columns["EmpPosID"];
                this.columnHElementID = base.Columns["HElementID"];
                this.columnHLevelID = base.Columns["HLevelID"];
                this.columnHElementCode = base.Columns["HElementCode"];
                this.columnHElementDesc = base.Columns["HElementDesc"];
                this.columnHLevelSeqNo = base.Columns["HLevelSeqNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpHierarchyID = new global::System.Data.DataColumn("EmpHierarchyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpHierarchyID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpPosID = new global::System.Data.DataColumn("EmpPosID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPosID);
                this.columnHElementID = new global::System.Data.DataColumn("HElementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementID);
                this.columnHLevelID = new global::System.Data.DataColumn("HLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLevelID);
                this.columnHElementCode = new global::System.Data.DataColumn("HElementCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementCode);
                this.columnHElementDesc = new global::System.Data.DataColumn("HElementDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementDesc);
                this.columnHLevelSeqNo = new global::System.Data.DataColumn("HLevelSeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLevelSeqNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpHierarchyID}, true));
                this.columnEmpHierarchyID.AutoIncrement = true;
                this.columnEmpHierarchyID.AllowDBNull = false;
                this.columnEmpHierarchyID.ReadOnly = true;
                this.columnEmpHierarchyID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyRow NewEmpHierarchyRow() {
                return ((EmpHierarchyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpHierarchyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpHierarchyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpHierarchyRowChanged != null)) {
                    this.EmpHierarchyRowChanged(this, new EmpHierarchyRowChangeEvent(((EmpHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpHierarchyRowChanging != null)) {
                    this.EmpHierarchyRowChanging(this, new EmpHierarchyRowChangeEvent(((EmpHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpHierarchyRowDeleted != null)) {
                    this.EmpHierarchyRowDeleted(this, new EmpHierarchyRowChangeEvent(((EmpHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpHierarchyRowDeleting != null)) {
                    this.EmpHierarchyRowDeleting(this, new EmpHierarchyRowChangeEvent(((EmpHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpHierarchyRow(EmpHierarchyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpHierarchyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HierarchyLevelDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHLevelID;
            
            private global::System.Data.DataColumn columnHLevelCode;
            
            private global::System.Data.DataColumn columnHLevelDesc;
            
            private global::System.Data.DataColumn columnHLevelSeqNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchyLevelDataTable() {
                this.TableName = "HierarchyLevel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HierarchyLevelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HierarchyLevelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLevelIDColumn {
                get {
                    return this.columnHLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLevelCodeColumn {
                get {
                    return this.columnHLevelCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLevelDescColumn {
                get {
                    return this.columnHLevelDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLevelSeqNoColumn {
                get {
                    return this.columnHLevelSeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchyLevelRow this[int index] {
                get {
                    return ((HierarchyLevelRow)(this.Rows[index]));
                }
            }
            
            public event HierarchyLevelRowChangeEventHandler HierarchyLevelRowChanging;
            
            public event HierarchyLevelRowChangeEventHandler HierarchyLevelRowChanged;
            
            public event HierarchyLevelRowChangeEventHandler HierarchyLevelRowDeleting;
            
            public event HierarchyLevelRowChangeEventHandler HierarchyLevelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHierarchyLevelRow(HierarchyLevelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchyLevelRow AddHierarchyLevelRow(string HLevelCode, string HLevelDesc, int HLevelSeqNo) {
                HierarchyLevelRow rowHierarchyLevelRow = ((HierarchyLevelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        HLevelCode,
                        HLevelDesc,
                        HLevelSeqNo};
                rowHierarchyLevelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHierarchyLevelRow);
                return rowHierarchyLevelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchyLevelRow FindByHLevelID(int HLevelID) {
                return ((HierarchyLevelRow)(this.Rows.Find(new object[] {
                            HLevelID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HierarchyLevelDataTable cln = ((HierarchyLevelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HierarchyLevelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHLevelID = base.Columns["HLevelID"];
                this.columnHLevelCode = base.Columns["HLevelCode"];
                this.columnHLevelDesc = base.Columns["HLevelDesc"];
                this.columnHLevelSeqNo = base.Columns["HLevelSeqNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHLevelID = new global::System.Data.DataColumn("HLevelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLevelID);
                this.columnHLevelCode = new global::System.Data.DataColumn("HLevelCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLevelCode);
                this.columnHLevelDesc = new global::System.Data.DataColumn("HLevelDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLevelDesc);
                this.columnHLevelSeqNo = new global::System.Data.DataColumn("HLevelSeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLevelSeqNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHLevelID}, true));
                this.columnHLevelID.AutoIncrement = true;
                this.columnHLevelID.AllowDBNull = false;
                this.columnHLevelID.ReadOnly = true;
                this.columnHLevelID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchyLevelRow NewHierarchyLevelRow() {
                return ((HierarchyLevelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HierarchyLevelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HierarchyLevelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HierarchyLevelRowChanged != null)) {
                    this.HierarchyLevelRowChanged(this, new HierarchyLevelRowChangeEvent(((HierarchyLevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HierarchyLevelRowChanging != null)) {
                    this.HierarchyLevelRowChanging(this, new HierarchyLevelRowChangeEvent(((HierarchyLevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HierarchyLevelRowDeleted != null)) {
                    this.HierarchyLevelRowDeleted(this, new HierarchyLevelRowChangeEvent(((HierarchyLevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HierarchyLevelRowDeleting != null)) {
                    this.HierarchyLevelRowDeleting(this, new HierarchyLevelRowChangeEvent(((HierarchyLevelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHierarchyLevelRow(HierarchyLevelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HierarchyLevelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PayrollGroupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPayGroupID;
            
            private global::System.Data.DataColumn columnPayGroupCode;
            
            private global::System.Data.DataColumn columnPayGroupDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayrollGroupDataTable() {
                this.TableName = "PayrollGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PayrollGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PayrollGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupIDColumn {
                get {
                    return this.columnPayGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupCodeColumn {
                get {
                    return this.columnPayGroupCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupDescColumn {
                get {
                    return this.columnPayGroupDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayrollGroupRow this[int index] {
                get {
                    return ((PayrollGroupRow)(this.Rows[index]));
                }
            }
            
            public event PayrollGroupRowChangeEventHandler PayrollGroupRowChanging;
            
            public event PayrollGroupRowChangeEventHandler PayrollGroupRowChanged;
            
            public event PayrollGroupRowChangeEventHandler PayrollGroupRowDeleting;
            
            public event PayrollGroupRowChangeEventHandler PayrollGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPayrollGroupRow(PayrollGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayrollGroupRow AddPayrollGroupRow(string PayGroupCode, string PayGroupDesc) {
                PayrollGroupRow rowPayrollGroupRow = ((PayrollGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PayGroupCode,
                        PayGroupDesc};
                rowPayrollGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPayrollGroupRow);
                return rowPayrollGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayrollGroupRow FindByPayGroupID(int PayGroupID) {
                return ((PayrollGroupRow)(this.Rows.Find(new object[] {
                            PayGroupID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PayrollGroupDataTable cln = ((PayrollGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PayrollGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPayGroupID = base.Columns["PayGroupID"];
                this.columnPayGroupCode = base.Columns["PayGroupCode"];
                this.columnPayGroupDesc = base.Columns["PayGroupDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPayGroupID = new global::System.Data.DataColumn("PayGroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupID);
                this.columnPayGroupCode = new global::System.Data.DataColumn("PayGroupCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupCode);
                this.columnPayGroupDesc = new global::System.Data.DataColumn("PayGroupDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupDesc);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPayGroupID}, true));
                this.columnPayGroupID.AutoIncrement = true;
                this.columnPayGroupID.AllowDBNull = false;
                this.columnPayGroupID.ReadOnly = true;
                this.columnPayGroupID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayrollGroupRow NewPayrollGroupRow() {
                return ((PayrollGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PayrollGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PayrollGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PayrollGroupRowChanged != null)) {
                    this.PayrollGroupRowChanged(this, new PayrollGroupRowChangeEvent(((PayrollGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PayrollGroupRowChanging != null)) {
                    this.PayrollGroupRowChanging(this, new PayrollGroupRowChangeEvent(((PayrollGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PayrollGroupRowDeleted != null)) {
                    this.PayrollGroupRowDeleted(this, new PayrollGroupRowChangeEvent(((PayrollGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PayrollGroupRowDeleting != null)) {
                    this.PayrollGroupRowDeleting(this, new PayrollGroupRowChangeEvent(((PayrollGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePayrollGroupRow(PayrollGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PayrollGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PositionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPositionID;
            
            private global::System.Data.DataColumn columnPositionCode;
            
            private global::System.Data.DataColumn columnPositionDesc;
            
            private global::System.Data.DataColumn columnPositionCapacity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionDataTable() {
                this.TableName = "Position";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PositionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PositionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionIDColumn {
                get {
                    return this.columnPositionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionCodeColumn {
                get {
                    return this.columnPositionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionDescColumn {
                get {
                    return this.columnPositionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionCapacityColumn {
                get {
                    return this.columnPositionCapacity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow this[int index] {
                get {
                    return ((PositionRow)(this.Rows[index]));
                }
            }
            
            public event PositionRowChangeEventHandler PositionRowChanging;
            
            public event PositionRowChangeEventHandler PositionRowChanged;
            
            public event PositionRowChangeEventHandler PositionRowDeleting;
            
            public event PositionRowChangeEventHandler PositionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPositionRow(PositionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow AddPositionRow(string PositionCode, string PositionDesc, string PositionCapacity) {
                PositionRow rowPositionRow = ((PositionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PositionCode,
                        PositionDesc,
                        PositionCapacity};
                rowPositionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPositionRow);
                return rowPositionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow FindByPositionID(int PositionID) {
                return ((PositionRow)(this.Rows.Find(new object[] {
                            PositionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PositionDataTable cln = ((PositionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PositionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPositionID = base.Columns["PositionID"];
                this.columnPositionCode = base.Columns["PositionCode"];
                this.columnPositionDesc = base.Columns["PositionDesc"];
                this.columnPositionCapacity = base.Columns["PositionCapacity"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPositionID = new global::System.Data.DataColumn("PositionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionID);
                this.columnPositionCode = new global::System.Data.DataColumn("PositionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionCode);
                this.columnPositionDesc = new global::System.Data.DataColumn("PositionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionDesc);
                this.columnPositionCapacity = new global::System.Data.DataColumn("PositionCapacity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionCapacity);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPositionID}, true));
                this.columnPositionID.AutoIncrement = true;
                this.columnPositionID.AllowDBNull = false;
                this.columnPositionID.ReadOnly = true;
                this.columnPositionID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow NewPositionRow() {
                return ((PositionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PositionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PositionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PositionRowChanged != null)) {
                    this.PositionRowChanged(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PositionRowChanging != null)) {
                    this.PositionRowChanging(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PositionRowDeleted != null)) {
                    this.PositionRowDeleted(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PositionRowDeleting != null)) {
                    this.PositionRowDeleting(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePositionRow(PositionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PositionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BankListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBankCode;
            
            private global::System.Data.DataColumn columnBankName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankListDataTable() {
                this.TableName = "BankList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BankListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BankListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankCodeColumn {
                get {
                    return this.columnBankCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankListRow this[int index] {
                get {
                    return ((BankListRow)(this.Rows[index]));
                }
            }
            
            public event BankListRowChangeEventHandler BankListRowChanging;
            
            public event BankListRowChangeEventHandler BankListRowChanged;
            
            public event BankListRowChangeEventHandler BankListRowDeleting;
            
            public event BankListRowChangeEventHandler BankListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBankListRow(BankListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankListRow AddBankListRow(string BankCode, string BankName) {
                BankListRow rowBankListRow = ((BankListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BankCode,
                        BankName};
                rowBankListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBankListRow);
                return rowBankListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankListRow FindByBankCode(string BankCode) {
                return ((BankListRow)(this.Rows.Find(new object[] {
                            BankCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BankListDataTable cln = ((BankListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BankListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBankCode = base.Columns["BankCode"];
                this.columnBankName = base.Columns["BankName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBankCode = new global::System.Data.DataColumn("BankCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankCode);
                this.columnBankName = new global::System.Data.DataColumn("BankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBankCode}, true));
                this.columnBankCode.AllowDBNull = false;
                this.columnBankCode.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankListRow NewBankListRow() {
                return ((BankListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BankListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BankListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BankListRowChanged != null)) {
                    this.BankListRowChanged(this, new BankListRowChangeEvent(((BankListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BankListRowChanging != null)) {
                    this.BankListRowChanging(this, new BankListRowChangeEvent(((BankListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BankListRowDeleted != null)) {
                    this.BankListRowDeleted(this, new BankListRowChangeEvent(((BankListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BankListRowDeleting != null)) {
                    this.BankListRowDeleting(this, new BankListRowChangeEvent(((BankListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBankListRow(BankListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BankListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpRequestDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpRequestID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpRequestType;
            
            private global::System.Data.DataColumn columnEmpRequestRecordID;
            
            private global::System.Data.DataColumn columnEmpRequestCreateDate;
            
            private global::System.Data.DataColumn columnEmpRequestModifyDate;
            
            private global::System.Data.DataColumn columnEmpRequestStatusCode;
            
            private global::System.Data.DataColumn columnEmpRequestStatus;
            
            private global::System.Data.DataColumn columnEmpRequestLastAuthorizationWorkFlowIndex;
            
            private global::System.Data.DataColumn columnEmpRequestLastActionBy;
            
            private global::System.Data.DataColumn columnDateFrom;
            
            private global::System.Data.DataColumn columnDateTo;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnDateFromAM;
            
            private global::System.Data.DataColumn columnDateToAM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRequestDataTable() {
                this.TableName = "EmpRequest";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpRequestDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpRequestDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestIDColumn {
                get {
                    return this.columnEmpRequestID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestTypeColumn {
                get {
                    return this.columnEmpRequestType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestRecordIDColumn {
                get {
                    return this.columnEmpRequestRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestCreateDateColumn {
                get {
                    return this.columnEmpRequestCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestModifyDateColumn {
                get {
                    return this.columnEmpRequestModifyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestStatusCodeColumn {
                get {
                    return this.columnEmpRequestStatusCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestStatusColumn {
                get {
                    return this.columnEmpRequestStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestLastAuthorizationWorkFlowIndexColumn {
                get {
                    return this.columnEmpRequestLastAuthorizationWorkFlowIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpRequestLastActionByColumn {
                get {
                    return this.columnEmpRequestLastActionBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateFromColumn {
                get {
                    return this.columnDateFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateToColumn {
                get {
                    return this.columnDateTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateFromAMColumn {
                get {
                    return this.columnDateFromAM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateToAMColumn {
                get {
                    return this.columnDateToAM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRequestRow this[int index] {
                get {
                    return ((EmpRequestRow)(this.Rows[index]));
                }
            }
            
            public event EmpRequestRowChangeEventHandler EmpRequestRowChanging;
            
            public event EmpRequestRowChangeEventHandler EmpRequestRowChanged;
            
            public event EmpRequestRowChangeEventHandler EmpRequestRowDeleting;
            
            public event EmpRequestRowChangeEventHandler EmpRequestRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpRequestRow(EmpRequestRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRequestRow AddEmpRequestRow(employeedetailRow parentemployeedetailRowByemployeedetail_EmpRequest, string EmpRequestType, int EmpRequestRecordID, System.DateTime EmpRequestCreateDate, System.DateTime EmpRequestModifyDate, string EmpRequestStatusCode, string EmpRequestStatus, int EmpRequestLastAuthorizationWorkFlowIndex, string EmpRequestLastActionBy, System.DateTime DateFrom, System.DateTime DateTo, double Unit, string Remark, string DateFromAM, string DateToAM) {
                EmpRequestRow rowEmpRequestRow = ((EmpRequestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        EmpRequestType,
                        EmpRequestRecordID,
                        EmpRequestCreateDate,
                        EmpRequestModifyDate,
                        EmpRequestStatusCode,
                        EmpRequestStatus,
                        EmpRequestLastAuthorizationWorkFlowIndex,
                        EmpRequestLastActionBy,
                        DateFrom,
                        DateTo,
                        Unit,
                        Remark,
                        DateFromAM,
                        DateToAM};
                if ((parentemployeedetailRowByemployeedetail_EmpRequest != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpRequest[0];
                }
                rowEmpRequestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpRequestRow);
                return rowEmpRequestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRequestRow FindByEmpRequestID(int EmpRequestID) {
                return ((EmpRequestRow)(this.Rows.Find(new object[] {
                            EmpRequestID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpRequestDataTable cln = ((EmpRequestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpRequestDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpRequestID = base.Columns["EmpRequestID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpRequestType = base.Columns["EmpRequestType"];
                this.columnEmpRequestRecordID = base.Columns["EmpRequestRecordID"];
                this.columnEmpRequestCreateDate = base.Columns["EmpRequestCreateDate"];
                this.columnEmpRequestModifyDate = base.Columns["EmpRequestModifyDate"];
                this.columnEmpRequestStatusCode = base.Columns["EmpRequestStatusCode"];
                this.columnEmpRequestStatus = base.Columns["EmpRequestStatus"];
                this.columnEmpRequestLastAuthorizationWorkFlowIndex = base.Columns["EmpRequestLastAuthorizationWorkFlowIndex"];
                this.columnEmpRequestLastActionBy = base.Columns["EmpRequestLastActionBy"];
                this.columnDateFrom = base.Columns["DateFrom"];
                this.columnDateTo = base.Columns["DateTo"];
                this.columnUnit = base.Columns["Unit"];
                this.columnRemark = base.Columns["Remark"];
                this.columnDateFromAM = base.Columns["DateFromAM"];
                this.columnDateToAM = base.Columns["DateToAM"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpRequestID = new global::System.Data.DataColumn("EmpRequestID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpRequestType = new global::System.Data.DataColumn("EmpRequestType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestType);
                this.columnEmpRequestRecordID = new global::System.Data.DataColumn("EmpRequestRecordID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestRecordID);
                this.columnEmpRequestCreateDate = new global::System.Data.DataColumn("EmpRequestCreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestCreateDate);
                this.columnEmpRequestModifyDate = new global::System.Data.DataColumn("EmpRequestModifyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestModifyDate);
                this.columnEmpRequestStatusCode = new global::System.Data.DataColumn("EmpRequestStatusCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestStatusCode);
                this.columnEmpRequestStatus = new global::System.Data.DataColumn("EmpRequestStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestStatus);
                this.columnEmpRequestLastAuthorizationWorkFlowIndex = new global::System.Data.DataColumn("EmpRequestLastAuthorizationWorkFlowIndex", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestLastAuthorizationWorkFlowIndex);
                this.columnEmpRequestLastActionBy = new global::System.Data.DataColumn("EmpRequestLastActionBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpRequestLastActionBy);
                this.columnDateFrom = new global::System.Data.DataColumn("DateFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateFrom);
                this.columnDateTo = new global::System.Data.DataColumn("DateTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTo);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnDateFromAM = new global::System.Data.DataColumn("DateFromAM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateFromAM);
                this.columnDateToAM = new global::System.Data.DataColumn("DateToAM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateToAM);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpRequestID}, true));
                this.columnEmpRequestID.AutoIncrement = true;
                this.columnEmpRequestID.AllowDBNull = false;
                this.columnEmpRequestID.ReadOnly = true;
                this.columnEmpRequestID.Unique = true;
                this.columnEmpRequestType.MaxLength = 50;
                this.columnEmpRequestStatusCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRequestRow NewEmpRequestRow() {
                return ((EmpRequestRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpRequestRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpRequestRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpRequestRowChanged != null)) {
                    this.EmpRequestRowChanged(this, new EmpRequestRowChangeEvent(((EmpRequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpRequestRowChanging != null)) {
                    this.EmpRequestRowChanging(this, new EmpRequestRowChangeEvent(((EmpRequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpRequestRowDeleted != null)) {
                    this.EmpRequestRowDeleted(this, new EmpRequestRowChangeEvent(((EmpRequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpRequestRowDeleting != null)) {
                    this.EmpRequestRowDeleting(this, new EmpRequestRowChangeEvent(((EmpRequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpRequestRow(EmpRequestRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpRequestDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpWorkExpDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpWorkExpID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpWorkExpFromYear;
            
            private global::System.Data.DataColumn columnEmpWorkExpFromMonth;
            
            private global::System.Data.DataColumn columnEmpWorkExpToYear;
            
            private global::System.Data.DataColumn columnEmpWorkExpToMonth;
            
            private global::System.Data.DataColumn columnEmpWorkExpCompanyName;
            
            private global::System.Data.DataColumn columnEmpWorkExpPosition;
            
            private global::System.Data.DataColumn columnEmpWorkExpRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpWorkExpDataTable() {
                this.TableName = "EmpWorkExp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpWorkExpDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpWorkExpDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpWorkExpIDColumn {
                get {
                    return this.columnEmpWorkExpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpWorkExpFromYearColumn {
                get {
                    return this.columnEmpWorkExpFromYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpWorkExpFromMonthColumn {
                get {
                    return this.columnEmpWorkExpFromMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpWorkExpToYearColumn {
                get {
                    return this.columnEmpWorkExpToYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpWorkExpToMonthColumn {
                get {
                    return this.columnEmpWorkExpToMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpWorkExpCompanyNameColumn {
                get {
                    return this.columnEmpWorkExpCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpWorkExpPositionColumn {
                get {
                    return this.columnEmpWorkExpPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpWorkExpRemarkColumn {
                get {
                    return this.columnEmpWorkExpRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpWorkExpRow this[int index] {
                get {
                    return ((EmpWorkExpRow)(this.Rows[index]));
                }
            }
            
            public event EmpWorkExpRowChangeEventHandler EmpWorkExpRowChanging;
            
            public event EmpWorkExpRowChangeEventHandler EmpWorkExpRowChanged;
            
            public event EmpWorkExpRowChangeEventHandler EmpWorkExpRowDeleting;
            
            public event EmpWorkExpRowChangeEventHandler EmpWorkExpRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpWorkExpRow(EmpWorkExpRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpWorkExpRow AddEmpWorkExpRow(int EmpWorkExpID, employeedetailRow parentemployeedetailRowByemployeedetail_EmpWorkExp, int EmpWorkExpFromYear, int EmpWorkExpFromMonth, int EmpWorkExpToYear, int EmpWorkExpToMonth, string EmpWorkExpCompanyName, string EmpWorkExpPosition, string EmpWorkExpRemark) {
                EmpWorkExpRow rowEmpWorkExpRow = ((EmpWorkExpRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpWorkExpID,
                        null,
                        EmpWorkExpFromYear,
                        EmpWorkExpFromMonth,
                        EmpWorkExpToYear,
                        EmpWorkExpToMonth,
                        EmpWorkExpCompanyName,
                        EmpWorkExpPosition,
                        EmpWorkExpRemark};
                if ((parentemployeedetailRowByemployeedetail_EmpWorkExp != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpWorkExp[0];
                }
                rowEmpWorkExpRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpWorkExpRow);
                return rowEmpWorkExpRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpWorkExpRow FindByEmpWorkExpID(int EmpWorkExpID) {
                return ((EmpWorkExpRow)(this.Rows.Find(new object[] {
                            EmpWorkExpID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpWorkExpDataTable cln = ((EmpWorkExpDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpWorkExpDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpWorkExpID = base.Columns["EmpWorkExpID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpWorkExpFromYear = base.Columns["EmpWorkExpFromYear"];
                this.columnEmpWorkExpFromMonth = base.Columns["EmpWorkExpFromMonth"];
                this.columnEmpWorkExpToYear = base.Columns["EmpWorkExpToYear"];
                this.columnEmpWorkExpToMonth = base.Columns["EmpWorkExpToMonth"];
                this.columnEmpWorkExpCompanyName = base.Columns["EmpWorkExpCompanyName"];
                this.columnEmpWorkExpPosition = base.Columns["EmpWorkExpPosition"];
                this.columnEmpWorkExpRemark = base.Columns["EmpWorkExpRemark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpWorkExpID = new global::System.Data.DataColumn("EmpWorkExpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpWorkExpID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpWorkExpFromYear = new global::System.Data.DataColumn("EmpWorkExpFromYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpWorkExpFromYear);
                this.columnEmpWorkExpFromMonth = new global::System.Data.DataColumn("EmpWorkExpFromMonth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpWorkExpFromMonth);
                this.columnEmpWorkExpToYear = new global::System.Data.DataColumn("EmpWorkExpToYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpWorkExpToYear);
                this.columnEmpWorkExpToMonth = new global::System.Data.DataColumn("EmpWorkExpToMonth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpWorkExpToMonth);
                this.columnEmpWorkExpCompanyName = new global::System.Data.DataColumn("EmpWorkExpCompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpWorkExpCompanyName);
                this.columnEmpWorkExpPosition = new global::System.Data.DataColumn("EmpWorkExpPosition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpWorkExpPosition);
                this.columnEmpWorkExpRemark = new global::System.Data.DataColumn("EmpWorkExpRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpWorkExpRemark);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpWorkExpID}, true));
                this.columnEmpWorkExpID.AllowDBNull = false;
                this.columnEmpWorkExpID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpWorkExpRow NewEmpWorkExpRow() {
                return ((EmpWorkExpRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpWorkExpRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpWorkExpRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpWorkExpRowChanged != null)) {
                    this.EmpWorkExpRowChanged(this, new EmpWorkExpRowChangeEvent(((EmpWorkExpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpWorkExpRowChanging != null)) {
                    this.EmpWorkExpRowChanging(this, new EmpWorkExpRowChangeEvent(((EmpWorkExpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpWorkExpRowDeleted != null)) {
                    this.EmpWorkExpRowDeleted(this, new EmpWorkExpRowChangeEvent(((EmpWorkExpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpWorkExpRowDeleting != null)) {
                    this.EmpWorkExpRowDeleting(this, new EmpWorkExpRowChangeEvent(((EmpWorkExpRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpWorkExpRow(EmpWorkExpRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpWorkExpDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpExtraFieldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpExtraFieldID;
            
            private global::System.Data.DataColumn columnEmpExtraFieldName;
            
            private global::System.Data.DataColumn columnEmpExtraFieldGroupName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldDataTable() {
                this.TableName = "EmpExtraField";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpExtraFieldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpExtraFieldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpExtraFieldIDColumn {
                get {
                    return this.columnEmpExtraFieldID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpExtraFieldNameColumn {
                get {
                    return this.columnEmpExtraFieldName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpExtraFieldGroupNameColumn {
                get {
                    return this.columnEmpExtraFieldGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldRow this[int index] {
                get {
                    return ((EmpExtraFieldRow)(this.Rows[index]));
                }
            }
            
            public event EmpExtraFieldRowChangeEventHandler EmpExtraFieldRowChanging;
            
            public event EmpExtraFieldRowChangeEventHandler EmpExtraFieldRowChanged;
            
            public event EmpExtraFieldRowChangeEventHandler EmpExtraFieldRowDeleting;
            
            public event EmpExtraFieldRowChangeEventHandler EmpExtraFieldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpExtraFieldRow(EmpExtraFieldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldRow AddEmpExtraFieldRow(int EmpExtraFieldID, string EmpExtraFieldName, string EmpExtraFieldGroupName) {
                EmpExtraFieldRow rowEmpExtraFieldRow = ((EmpExtraFieldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpExtraFieldID,
                        EmpExtraFieldName,
                        EmpExtraFieldGroupName};
                rowEmpExtraFieldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpExtraFieldRow);
                return rowEmpExtraFieldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldRow FindByEmpExtraFieldID(int EmpExtraFieldID) {
                return ((EmpExtraFieldRow)(this.Rows.Find(new object[] {
                            EmpExtraFieldID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpExtraFieldDataTable cln = ((EmpExtraFieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpExtraFieldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpExtraFieldID = base.Columns["EmpExtraFieldID"];
                this.columnEmpExtraFieldName = base.Columns["EmpExtraFieldName"];
                this.columnEmpExtraFieldGroupName = base.Columns["EmpExtraFieldGroupName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpExtraFieldID = new global::System.Data.DataColumn("EmpExtraFieldID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpExtraFieldID);
                this.columnEmpExtraFieldName = new global::System.Data.DataColumn("EmpExtraFieldName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpExtraFieldName);
                this.columnEmpExtraFieldGroupName = new global::System.Data.DataColumn("EmpExtraFieldGroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpExtraFieldGroupName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpExtraFieldID}, true));
                this.columnEmpExtraFieldID.AllowDBNull = false;
                this.columnEmpExtraFieldID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldRow NewEmpExtraFieldRow() {
                return ((EmpExtraFieldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpExtraFieldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpExtraFieldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpExtraFieldRowChanged != null)) {
                    this.EmpExtraFieldRowChanged(this, new EmpExtraFieldRowChangeEvent(((EmpExtraFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpExtraFieldRowChanging != null)) {
                    this.EmpExtraFieldRowChanging(this, new EmpExtraFieldRowChangeEvent(((EmpExtraFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpExtraFieldRowDeleted != null)) {
                    this.EmpExtraFieldRowDeleted(this, new EmpExtraFieldRowChangeEvent(((EmpExtraFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpExtraFieldRowDeleting != null)) {
                    this.EmpExtraFieldRowDeleting(this, new EmpExtraFieldRowChangeEvent(((EmpExtraFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpExtraFieldRow(EmpExtraFieldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpExtraFieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpExtraFieldValueDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpExtraFieldValueID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpExtraFieldID;
            
            private global::System.Data.DataColumn columnEmpExtraFieldValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueDataTable() {
                this.TableName = "EmpExtraFieldValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpExtraFieldValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpExtraFieldValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpExtraFieldValueIDColumn {
                get {
                    return this.columnEmpExtraFieldValueID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpExtraFieldIDColumn {
                get {
                    return this.columnEmpExtraFieldID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpExtraFieldValueColumn {
                get {
                    return this.columnEmpExtraFieldValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueRow this[int index] {
                get {
                    return ((EmpExtraFieldValueRow)(this.Rows[index]));
                }
            }
            
            public event EmpExtraFieldValueRowChangeEventHandler EmpExtraFieldValueRowChanging;
            
            public event EmpExtraFieldValueRowChangeEventHandler EmpExtraFieldValueRowChanged;
            
            public event EmpExtraFieldValueRowChangeEventHandler EmpExtraFieldValueRowDeleting;
            
            public event EmpExtraFieldValueRowChangeEventHandler EmpExtraFieldValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpExtraFieldValueRow(EmpExtraFieldValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueRow AddEmpExtraFieldValueRow(int EmpExtraFieldValueID, employeedetailRow parentemployeedetailRowByemployeedetail_EmpExtraFieldValue, EmpExtraFieldRow parentEmpExtraFieldRowByEmpExtraField_EmpExtraFieldValue, string EmpExtraFieldValue) {
                EmpExtraFieldValueRow rowEmpExtraFieldValueRow = ((EmpExtraFieldValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpExtraFieldValueID,
                        null,
                        null,
                        EmpExtraFieldValue};
                if ((parentemployeedetailRowByemployeedetail_EmpExtraFieldValue != null)) {
                    columnValuesArray[1] = parentemployeedetailRowByemployeedetail_EmpExtraFieldValue[0];
                }
                if ((parentEmpExtraFieldRowByEmpExtraField_EmpExtraFieldValue != null)) {
                    columnValuesArray[2] = parentEmpExtraFieldRowByEmpExtraField_EmpExtraFieldValue[0];
                }
                rowEmpExtraFieldValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpExtraFieldValueRow);
                return rowEmpExtraFieldValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueRow FindByEmpExtraFieldValueID(int EmpExtraFieldValueID) {
                return ((EmpExtraFieldValueRow)(this.Rows.Find(new object[] {
                            EmpExtraFieldValueID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpExtraFieldValueDataTable cln = ((EmpExtraFieldValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpExtraFieldValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpExtraFieldValueID = base.Columns["EmpExtraFieldValueID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpExtraFieldID = base.Columns["EmpExtraFieldID"];
                this.columnEmpExtraFieldValue = base.Columns["EmpExtraFieldValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpExtraFieldValueID = new global::System.Data.DataColumn("EmpExtraFieldValueID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpExtraFieldValueID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpExtraFieldID = new global::System.Data.DataColumn("EmpExtraFieldID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpExtraFieldID);
                this.columnEmpExtraFieldValue = new global::System.Data.DataColumn("EmpExtraFieldValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpExtraFieldValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpExtraFieldValueID}, true));
                this.columnEmpExtraFieldValueID.AllowDBNull = false;
                this.columnEmpExtraFieldValueID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueRow NewEmpExtraFieldValueRow() {
                return ((EmpExtraFieldValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpExtraFieldValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpExtraFieldValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpExtraFieldValueRowChanged != null)) {
                    this.EmpExtraFieldValueRowChanged(this, new EmpExtraFieldValueRowChangeEvent(((EmpExtraFieldValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpExtraFieldValueRowChanging != null)) {
                    this.EmpExtraFieldValueRowChanging(this, new EmpExtraFieldValueRowChangeEvent(((EmpExtraFieldValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpExtraFieldValueRowDeleted != null)) {
                    this.EmpExtraFieldValueRowDeleted(this, new EmpExtraFieldValueRowChangeEvent(((EmpExtraFieldValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpExtraFieldValueRowDeleting != null)) {
                    this.EmpExtraFieldValueRowDeleting(this, new EmpExtraFieldValueRowChangeEvent(((EmpExtraFieldValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpExtraFieldValueRow(EmpExtraFieldValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeDetail ds = new EmployeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpExtraFieldValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class employeedetailRow : global::System.Data.DataRow {
            
            private employeedetailDataTable tableemployeedetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal employeedetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableemployeedetail = ((employeedetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tableemployeedetail.EmpIDColumn]));
                }
                set {
                    this[this.tableemployeedetail.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNo {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNo\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpStatus {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpStatus\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpEngSurname {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpEngSurnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpEngSurname\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpEngSurnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpEngOtherName {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpEngOtherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpEngOtherName\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpEngOtherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpEngFullName {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpEngFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpEngFullName\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpEngFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpChiFullName {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpChiFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpChiFullName\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpChiFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpAlias {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpAliasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpAlias\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpAliasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpHKID {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpHKIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpHKID\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpHKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpGender {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpGenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpGender\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpGenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpMaritalStatus {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpMaritalStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpMaritalStatus\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpMaritalStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpDateOfBirth {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableemployeedetail.EmpDateOfBirthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDateOfBirth\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpDateOfBirthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpPlaceOfBirth {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpPlaceOfBirthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPlaceOfBirth\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpPlaceOfBirthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNationality {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpNationalityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNationality\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpNationalityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpPassportNo {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpPassportNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPassportNo\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpPassportNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpPassportIssuedCountry {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpPassportIssuedCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPassportIssuedCountry\' in table \'employeedetail\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpPassportIssuedCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpPassportExpiryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableemployeedetail.EmpPassportExpiryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPassportExpiryDate\' in table \'employeedetail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpPassportExpiryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpResAddr {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpResAddrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpResAddr\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpResAddrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpResAddrAreaCode {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpResAddrAreaCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpResAddrAreaCode\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpResAddrAreaCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpCorAddr {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpCorAddrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpCorAddr\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpCorAddrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpDateOfJoin {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableemployeedetail.EmpDateOfJoinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDateOfJoin\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpDateOfJoinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpServiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableemployeedetail.EmpServiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpServiceDate\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpServiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpNoticePeriod {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.EmpNoticePeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNoticePeriod\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpNoticePeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNoticeUnit {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpNoticeUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNoticeUnit\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpNoticeUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpProbaPeriod {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.EmpProbaPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpProbaPeriod\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpProbaPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpProbaUnit {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpProbaUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpProbaUnit\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpProbaUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpProbaLastDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableemployeedetail.EmpProbaLastDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpProbaLastDate\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpProbaLastDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpEmail {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpEmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpEmail\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpEmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpHomePhoneNo {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpHomePhoneNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpHomePhoneNo\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpHomePhoneNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpMobileNo {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpMobileNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpMobileNo\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpMobileNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpOfficePhoneNo {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.EmpOfficePhoneNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpOfficePhoneNo\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpOfficePhoneNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusinessHierarchy {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.BusinessHierarchyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessHierarchy\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.BusinessHierarchyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpPosID {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.EmpPosIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPosID\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpPosIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpPosID1 {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.EmpPosID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPosID1\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpPosID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID1 {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.EmpID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID1\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpPosEffFr {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableemployeedetail.EmpPosEffFrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPosEffFr\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpPosEffFrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpPosEffTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableemployeedetail.EmpPosEffToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPosEffTo\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpPosEffToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.CompanyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyID\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.CompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionID {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.PositionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionID\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.PositionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RankID {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.RankIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RankID\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.RankIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StaffTypeID {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.StaffTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StaffTypeID\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.StaffTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayGroupID {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.PayGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupID\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.PayGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeavePlanID {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.LeavePlanIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeavePlanID\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.LeavePlanIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionID1 {
                get {
                    try {
                        return ((int)(this[this.tableemployeedetail.PositionID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionID1\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.PositionID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionCode {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.PositionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionCode\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.PositionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionDesc {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.PositionDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionDesc\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.PositionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyCode {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.CompanyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyCode\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.CompanyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyCode1 {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.HierarchyCode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyCode1\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.HierarchyCode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyDesc1 {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.HierarchyDesc1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyDesc1\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.HierarchyDesc1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyCode2 {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.HierarchyCode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyCode2\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.HierarchyCode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyDesc2 {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.HierarchyDesc2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyDesc2\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.HierarchyDesc2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyCode3 {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.HierarchyCode3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyCode3\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.HierarchyCode3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyDesc3 {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.HierarchyDesc3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyDesc3\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.HierarchyDesc3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyCode4 {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.HierarchyCode4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyCode4\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.HierarchyCode4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyDesc4 {
                get {
                    try {
                        return ((string)(this[this.tableemployeedetail.HierarchyDesc4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyDesc4\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.HierarchyDesc4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpTermLastDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableemployeedetail.EmpTermLastDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpTermLastDate\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.EmpTermLastDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double YearOfService {
                get {
                    try {
                        return ((double)(this[this.tableemployeedetail.YearOfServiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearOfService\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.YearOfServiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] PhotoByteArray {
                get {
                    try {
                        return ((byte[])(this[this.tableemployeedetail.PhotoByteArrayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhotoByteArray\' in table \'employeedetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemployeedetail.PhotoByteArrayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoNull() {
                return this.IsNull(this.tableemployeedetail.EmpNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoNull() {
                this[this.tableemployeedetail.EmpNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpStatusNull() {
                return this.IsNull(this.tableemployeedetail.EmpStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpStatusNull() {
                this[this.tableemployeedetail.EmpStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpEngSurnameNull() {
                return this.IsNull(this.tableemployeedetail.EmpEngSurnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpEngSurnameNull() {
                this[this.tableemployeedetail.EmpEngSurnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpEngOtherNameNull() {
                return this.IsNull(this.tableemployeedetail.EmpEngOtherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpEngOtherNameNull() {
                this[this.tableemployeedetail.EmpEngOtherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpEngFullNameNull() {
                return this.IsNull(this.tableemployeedetail.EmpEngFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpEngFullNameNull() {
                this[this.tableemployeedetail.EmpEngFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpChiFullNameNull() {
                return this.IsNull(this.tableemployeedetail.EmpChiFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpChiFullNameNull() {
                this[this.tableemployeedetail.EmpChiFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpAliasNull() {
                return this.IsNull(this.tableemployeedetail.EmpAliasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpAliasNull() {
                this[this.tableemployeedetail.EmpAliasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpHKIDNull() {
                return this.IsNull(this.tableemployeedetail.EmpHKIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpHKIDNull() {
                this[this.tableemployeedetail.EmpHKIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpGenderNull() {
                return this.IsNull(this.tableemployeedetail.EmpGenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpGenderNull() {
                this[this.tableemployeedetail.EmpGenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpMaritalStatusNull() {
                return this.IsNull(this.tableemployeedetail.EmpMaritalStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpMaritalStatusNull() {
                this[this.tableemployeedetail.EmpMaritalStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDateOfBirthNull() {
                return this.IsNull(this.tableemployeedetail.EmpDateOfBirthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDateOfBirthNull() {
                this[this.tableemployeedetail.EmpDateOfBirthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPlaceOfBirthNull() {
                return this.IsNull(this.tableemployeedetail.EmpPlaceOfBirthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPlaceOfBirthNull() {
                this[this.tableemployeedetail.EmpPlaceOfBirthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNationalityNull() {
                return this.IsNull(this.tableemployeedetail.EmpNationalityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNationalityNull() {
                this[this.tableemployeedetail.EmpNationalityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPassportNoNull() {
                return this.IsNull(this.tableemployeedetail.EmpPassportNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPassportNoNull() {
                this[this.tableemployeedetail.EmpPassportNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPassportIssuedCountryNull() {
                return this.IsNull(this.tableemployeedetail.EmpPassportIssuedCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPassportIssuedCountryNull() {
                this[this.tableemployeedetail.EmpPassportIssuedCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPassportExpiryDateNull() {
                return this.IsNull(this.tableemployeedetail.EmpPassportExpiryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPassportExpiryDateNull() {
                this[this.tableemployeedetail.EmpPassportExpiryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpResAddrNull() {
                return this.IsNull(this.tableemployeedetail.EmpResAddrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpResAddrNull() {
                this[this.tableemployeedetail.EmpResAddrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpResAddrAreaCodeNull() {
                return this.IsNull(this.tableemployeedetail.EmpResAddrAreaCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpResAddrAreaCodeNull() {
                this[this.tableemployeedetail.EmpResAddrAreaCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpCorAddrNull() {
                return this.IsNull(this.tableemployeedetail.EmpCorAddrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpCorAddrNull() {
                this[this.tableemployeedetail.EmpCorAddrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDateOfJoinNull() {
                return this.IsNull(this.tableemployeedetail.EmpDateOfJoinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDateOfJoinNull() {
                this[this.tableemployeedetail.EmpDateOfJoinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpServiceDateNull() {
                return this.IsNull(this.tableemployeedetail.EmpServiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpServiceDateNull() {
                this[this.tableemployeedetail.EmpServiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoticePeriodNull() {
                return this.IsNull(this.tableemployeedetail.EmpNoticePeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoticePeriodNull() {
                this[this.tableemployeedetail.EmpNoticePeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoticeUnitNull() {
                return this.IsNull(this.tableemployeedetail.EmpNoticeUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoticeUnitNull() {
                this[this.tableemployeedetail.EmpNoticeUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpProbaPeriodNull() {
                return this.IsNull(this.tableemployeedetail.EmpProbaPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpProbaPeriodNull() {
                this[this.tableemployeedetail.EmpProbaPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpProbaUnitNull() {
                return this.IsNull(this.tableemployeedetail.EmpProbaUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpProbaUnitNull() {
                this[this.tableemployeedetail.EmpProbaUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpProbaLastDateNull() {
                return this.IsNull(this.tableemployeedetail.EmpProbaLastDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpProbaLastDateNull() {
                this[this.tableemployeedetail.EmpProbaLastDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpEmailNull() {
                return this.IsNull(this.tableemployeedetail.EmpEmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpEmailNull() {
                this[this.tableemployeedetail.EmpEmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpHomePhoneNoNull() {
                return this.IsNull(this.tableemployeedetail.EmpHomePhoneNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpHomePhoneNoNull() {
                this[this.tableemployeedetail.EmpHomePhoneNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpMobileNoNull() {
                return this.IsNull(this.tableemployeedetail.EmpMobileNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpMobileNoNull() {
                this[this.tableemployeedetail.EmpMobileNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpOfficePhoneNoNull() {
                return this.IsNull(this.tableemployeedetail.EmpOfficePhoneNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpOfficePhoneNoNull() {
                this[this.tableemployeedetail.EmpOfficePhoneNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableemployeedetail.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableemployeedetail.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessHierarchyNull() {
                return this.IsNull(this.tableemployeedetail.BusinessHierarchyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessHierarchyNull() {
                this[this.tableemployeedetail.BusinessHierarchyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPosIDNull() {
                return this.IsNull(this.tableemployeedetail.EmpPosIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPosIDNull() {
                this[this.tableemployeedetail.EmpPosIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPosID1Null() {
                return this.IsNull(this.tableemployeedetail.EmpPosID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPosID1Null() {
                this[this.tableemployeedetail.EmpPosID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpID1Null() {
                return this.IsNull(this.tableemployeedetail.EmpID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpID1Null() {
                this[this.tableemployeedetail.EmpID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPosEffFrNull() {
                return this.IsNull(this.tableemployeedetail.EmpPosEffFrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPosEffFrNull() {
                this[this.tableemployeedetail.EmpPosEffFrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPosEffToNull() {
                return this.IsNull(this.tableemployeedetail.EmpPosEffToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPosEffToNull() {
                this[this.tableemployeedetail.EmpPosEffToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableemployeedetail.CompanyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyIDNull() {
                this[this.tableemployeedetail.CompanyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionIDNull() {
                return this.IsNull(this.tableemployeedetail.PositionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionIDNull() {
                this[this.tableemployeedetail.PositionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRankIDNull() {
                return this.IsNull(this.tableemployeedetail.RankIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRankIDNull() {
                this[this.tableemployeedetail.RankIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStaffTypeIDNull() {
                return this.IsNull(this.tableemployeedetail.StaffTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStaffTypeIDNull() {
                this[this.tableemployeedetail.StaffTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupIDNull() {
                return this.IsNull(this.tableemployeedetail.PayGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupIDNull() {
                this[this.tableemployeedetail.PayGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeavePlanIDNull() {
                return this.IsNull(this.tableemployeedetail.LeavePlanIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeavePlanIDNull() {
                this[this.tableemployeedetail.LeavePlanIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionID1Null() {
                return this.IsNull(this.tableemployeedetail.PositionID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionID1Null() {
                this[this.tableemployeedetail.PositionID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionCodeNull() {
                return this.IsNull(this.tableemployeedetail.PositionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionCodeNull() {
                this[this.tableemployeedetail.PositionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionDescNull() {
                return this.IsNull(this.tableemployeedetail.PositionDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionDescNull() {
                this[this.tableemployeedetail.PositionDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyCodeNull() {
                return this.IsNull(this.tableemployeedetail.CompanyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyCodeNull() {
                this[this.tableemployeedetail.CompanyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableemployeedetail.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableemployeedetail.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyCode1Null() {
                return this.IsNull(this.tableemployeedetail.HierarchyCode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyCode1Null() {
                this[this.tableemployeedetail.HierarchyCode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyDesc1Null() {
                return this.IsNull(this.tableemployeedetail.HierarchyDesc1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyDesc1Null() {
                this[this.tableemployeedetail.HierarchyDesc1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyCode2Null() {
                return this.IsNull(this.tableemployeedetail.HierarchyCode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyCode2Null() {
                this[this.tableemployeedetail.HierarchyCode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyDesc2Null() {
                return this.IsNull(this.tableemployeedetail.HierarchyDesc2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyDesc2Null() {
                this[this.tableemployeedetail.HierarchyDesc2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyCode3Null() {
                return this.IsNull(this.tableemployeedetail.HierarchyCode3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyCode3Null() {
                this[this.tableemployeedetail.HierarchyCode3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyDesc3Null() {
                return this.IsNull(this.tableemployeedetail.HierarchyDesc3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyDesc3Null() {
                this[this.tableemployeedetail.HierarchyDesc3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyCode4Null() {
                return this.IsNull(this.tableemployeedetail.HierarchyCode4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyCode4Null() {
                this[this.tableemployeedetail.HierarchyCode4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyDesc4Null() {
                return this.IsNull(this.tableemployeedetail.HierarchyDesc4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyDesc4Null() {
                this[this.tableemployeedetail.HierarchyDesc4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpTermLastDateNull() {
                return this.IsNull(this.tableemployeedetail.EmpTermLastDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpTermLastDateNull() {
                this[this.tableemployeedetail.EmpTermLastDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearOfServiceNull() {
                return this.IsNull(this.tableemployeedetail.YearOfServiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearOfServiceNull() {
                this[this.tableemployeedetail.YearOfServiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhotoByteArrayNull() {
                return this.IsNull(this.tableemployeedetail.PhotoByteArrayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhotoByteArrayNull() {
                this[this.tableemployeedetail.PhotoByteArrayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow[] GetLeaveBalanceRows() {
                if ((this.Table.ChildRelations["employeedetail_LeaveBalance"] == null)) {
                    return new LeaveBalanceRow[0];
                }
                else {
                    return ((LeaveBalanceRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_LeaveBalance"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveApplicationRow[] GetLeaveApplicationRows() {
                if ((this.Table.ChildRelations["employeedetail_LeaveApplication"] == null)) {
                    return new LeaveApplicationRow[0];
                }
                else {
                    return ((LeaveApplicationRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_LeaveApplication"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow[] GetEmpPositionInfoRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpPositionInfo"] == null)) {
                    return new EmpPositionInfoRow[0];
                }
                else {
                    return ((EmpPositionInfoRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpPositionInfo"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRecurringPaymentRow[] GetEmpRecurringPaymentRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpRecurringPayment"] == null)) {
                    return new EmpRecurringPaymentRow[0];
                }
                else {
                    return ((EmpRecurringPaymentRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpRecurringPayment"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountRow[] GetEmpBankAccountRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpBankAccount"] == null)) {
                    return new EmpBankAccountRow[0];
                }
                else {
                    return ((EmpBankAccountRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpBankAccount"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSpouseRow[] GetEmpSpouseRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpSpouse"] == null)) {
                    return new EmpSpouseRow[0];
                }
                else {
                    return ((EmpSpouseRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpSpouse"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDependantRow[] GetEmpDependantRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpDependant"] == null)) {
                    return new EmpDependantRow[0];
                }
                else {
                    return ((EmpDependantRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpDependant"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpQualificationRow[] GetEmpQualificationRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpQualification"] == null)) {
                    return new EmpQualificationRow[0];
                }
                else {
                    return ((EmpQualificationRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpQualification"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSkillRow[] GetEmpSkillRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpSkill"] == null)) {
                    return new EmpSkillRow[0];
                }
                else {
                    return ((EmpSkillRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpSkill"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRequestRow[] GetEmpRequestRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpRequest"] == null)) {
                    return new EmpRequestRow[0];
                }
                else {
                    return ((EmpRequestRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpRequest"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpWorkExpRow[] GetEmpWorkExpRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpWorkExp"] == null)) {
                    return new EmpWorkExpRow[0];
                }
                else {
                    return ((EmpWorkExpRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpWorkExp"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueRow[] GetEmpExtraFieldValueRows() {
                if ((this.Table.ChildRelations["employeedetail_EmpExtraFieldValue"] == null)) {
                    return new EmpExtraFieldValueRow[0];
                }
                else {
                    return ((EmpExtraFieldValueRow[])(base.GetChildRows(this.Table.ChildRelations["employeedetail_EmpExtraFieldValue"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LeaveBalanceRow : global::System.Data.DataRow {
            
            private LeaveBalanceDataTable tableLeaveBalance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LeaveBalanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLeaveBalance = ((LeaveBalanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeaveBalanceID {
                get {
                    return ((int)(this[this.tableLeaveBalance.LeaveBalanceIDColumn]));
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableLeaveBalance.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LeaveBalanceEffectiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLeaveBalance.LeaveBalanceEffectiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceEffectiveDate\' in table \'LeaveBalance\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceEffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeaveBalanceBF {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.LeaveBalanceBFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceBF\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceBFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeaveBalanceEntitled {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.LeaveBalanceEntitledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceEntitled\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceEntitledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeaveBalanceForfeiture {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.LeaveBalanceForfeitureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceForfeiture\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceForfeitureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLeaveBalance.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableLeaveBalance.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Balance {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.BalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Balance\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Taken {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.TakenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Taken\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.TakenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Adjust {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.AdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adjust\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.AdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Reserved {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.ReservedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reserved\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.ReservedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ExpiryForfeit {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.ExpiryForfeitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpiryForfeit\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.ExpiryForfeitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextExpiryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLeaveBalance.NextExpiryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NextExpiryDate\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.NextExpiryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NextExpiryForfeit {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.NextExpiryForfeitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NextExpiryForfeit\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.NextExpiryForfeitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StringFormat {
                get {
                    try {
                        return ((string)(this[this.tableLeaveBalance.StringFormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StringFormat\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.StringFormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_LeaveBalance"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_LeaveBalance"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableLeaveBalance.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableLeaveBalance.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceEffectiveDateNull() {
                return this.IsNull(this.tableLeaveBalance.LeaveBalanceEffectiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceEffectiveDateNull() {
                this[this.tableLeaveBalance.LeaveBalanceEffectiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceBFNull() {
                return this.IsNull(this.tableLeaveBalance.LeaveBalanceBFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceBFNull() {
                this[this.tableLeaveBalance.LeaveBalanceBFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceEntitledNull() {
                return this.IsNull(this.tableLeaveBalance.LeaveBalanceEntitledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceEntitledNull() {
                this[this.tableLeaveBalance.LeaveBalanceEntitledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceForfeitureNull() {
                return this.IsNull(this.tableLeaveBalance.LeaveBalanceForfeitureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceForfeitureNull() {
                this[this.tableLeaveBalance.LeaveBalanceForfeitureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLeaveBalance.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLeaveBalance.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableLeaveBalance.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableLeaveBalance.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceNull() {
                return this.IsNull(this.tableLeaveBalance.BalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceNull() {
                this[this.tableLeaveBalance.BalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTakenNull() {
                return this.IsNull(this.tableLeaveBalance.TakenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTakenNull() {
                this[this.tableLeaveBalance.TakenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustNull() {
                return this.IsNull(this.tableLeaveBalance.AdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustNull() {
                this[this.tableLeaveBalance.AdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReservedNull() {
                return this.IsNull(this.tableLeaveBalance.ReservedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReservedNull() {
                this[this.tableLeaveBalance.ReservedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpiryForfeitNull() {
                return this.IsNull(this.tableLeaveBalance.ExpiryForfeitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpiryForfeitNull() {
                this[this.tableLeaveBalance.ExpiryForfeitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextExpiryDateNull() {
                return this.IsNull(this.tableLeaveBalance.NextExpiryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextExpiryDateNull() {
                this[this.tableLeaveBalance.NextExpiryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextExpiryForfeitNull() {
                return this.IsNull(this.tableLeaveBalance.NextExpiryForfeitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextExpiryForfeitNull() {
                this[this.tableLeaveBalance.NextExpiryForfeitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStringFormatNull() {
                return this.IsNull(this.tableLeaveBalance.StringFormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStringFormatNull() {
                this[this.tableLeaveBalance.StringFormatColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LeaveApplicationRow : global::System.Data.DataRow {
            
            private LeaveApplicationDataTable tableLeaveApplication;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LeaveApplicationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLeaveApplication = ((LeaveApplicationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeaveAppID {
                get {
                    return ((int)(this[this.tableLeaveApplication.LeaveAppIDColumn]));
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableLeaveApplication.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeaveCodeID {
                get {
                    try {
                        return ((int)(this[this.tableLeaveApplication.LeaveCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveCodeID\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeaveAppUnit {
                get {
                    try {
                        return ((string)(this[this.tableLeaveApplication.LeaveAppUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppUnit\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LeaveAppDateFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLeaveApplication.LeaveAppDateFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppDateFrom\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppDateFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LeaveAppDateTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLeaveApplication.LeaveAppDateToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppDateTo\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppDateToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LeaveAppTimeFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLeaveApplication.LeaveAppTimeFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppTimeFrom\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppTimeFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LeaveAppTimeTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLeaveApplication.LeaveAppTimeToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppTimeTo\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppTimeToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeaveAppDays {
                get {
                    try {
                        return ((double)(this[this.tableLeaveApplication.LeaveAppDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppDays\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeaveAppRemark {
                get {
                    try {
                        return ((string)(this[this.tableLeaveApplication.LeaveAppRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppRemark\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LeaveAppHasMedicalCertificate {
                get {
                    try {
                        return ((bool)(this[this.tableLeaveApplication.LeaveAppHasMedicalCertificateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppHasMedicalCertificate\' in table \'LeaveApplication\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppHasMedicalCertificateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LeaveAppNoPayProcess {
                get {
                    try {
                        return ((bool)(this[this.tableLeaveApplication.LeaveAppNoPayProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAppNoPayProcess\' in table \'LeaveApplication\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveAppNoPayProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpPaymentID {
                get {
                    try {
                        return ((int)(this[this.tableLeaveApplication.EmpPaymentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPaymentID\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.EmpPaymentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeaveType {
                get {
                    try {
                        return ((string)(this[this.tableLeaveApplication.LeaveTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveType\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeaveTypeDesc {
                get {
                    try {
                        return ((string)(this[this.tableLeaveApplication.LeaveTypeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveTypeDesc\' in table \'LeaveApplication\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.LeaveTypeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayrollProcessPeriod {
                get {
                    try {
                        return ((string)(this[this.tableLeaveApplication.PayrollProcessPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayrollProcessPeriod\' in table \'LeaveApplication\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableLeaveApplication.PayrollProcessPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_LeaveApplication"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_LeaveApplication"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableLeaveApplication.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableLeaveApplication.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveCodeIDNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveCodeIDNull() {
                this[this.tableLeaveApplication.LeaveCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppUnitNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppUnitNull() {
                this[this.tableLeaveApplication.LeaveAppUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppDateFromNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppDateFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppDateFromNull() {
                this[this.tableLeaveApplication.LeaveAppDateFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppDateToNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppDateToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppDateToNull() {
                this[this.tableLeaveApplication.LeaveAppDateToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppTimeFromNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppTimeFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppTimeFromNull() {
                this[this.tableLeaveApplication.LeaveAppTimeFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppTimeToNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppTimeToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppTimeToNull() {
                this[this.tableLeaveApplication.LeaveAppTimeToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppDaysNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppDaysNull() {
                this[this.tableLeaveApplication.LeaveAppDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppRemarkNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppRemarkNull() {
                this[this.tableLeaveApplication.LeaveAppRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppHasMedicalCertificateNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppHasMedicalCertificateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppHasMedicalCertificateNull() {
                this[this.tableLeaveApplication.LeaveAppHasMedicalCertificateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAppNoPayProcessNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveAppNoPayProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAppNoPayProcessNull() {
                this[this.tableLeaveApplication.LeaveAppNoPayProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPaymentIDNull() {
                return this.IsNull(this.tableLeaveApplication.EmpPaymentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPaymentIDNull() {
                this[this.tableLeaveApplication.EmpPaymentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveTypeNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveTypeNull() {
                this[this.tableLeaveApplication.LeaveTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveTypeDescNull() {
                return this.IsNull(this.tableLeaveApplication.LeaveTypeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveTypeDescNull() {
                this[this.tableLeaveApplication.LeaveTypeDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayrollProcessPeriodNull() {
                return this.IsNull(this.tableLeaveApplication.PayrollProcessPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayrollProcessPeriodNull() {
                this[this.tableLeaveApplication.PayrollProcessPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpPositionInfoRow : global::System.Data.DataRow {
            
            private EmpPositionInfoDataTable tableEmpPositionInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpPositionInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpPositionInfo = ((EmpPositionInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpPosID {
                get {
                    return ((int)(this[this.tableEmpPositionInfo.EmpPosIDColumn]));
                }
                set {
                    this[this.tableEmpPositionInfo.EmpPosIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpPositionInfo.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpPosEffFr {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpPositionInfo.EmpPosEffFrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPosEffFr\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.EmpPosEffFrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpPosEffTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpPositionInfo.EmpPosEffToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPosEffTo\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.EmpPosEffToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyID {
                get {
                    try {
                        return ((int)(this[this.tableEmpPositionInfo.CompanyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyID\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.CompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionID {
                get {
                    try {
                        return ((int)(this[this.tableEmpPositionInfo.PositionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionID\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.PositionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RankID {
                get {
                    try {
                        return ((int)(this[this.tableEmpPositionInfo.RankIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RankID\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.RankIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StaffTypeID {
                get {
                    try {
                        return ((int)(this[this.tableEmpPositionInfo.StaffTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StaffTypeID\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.StaffTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayGroupID {
                get {
                    try {
                        return ((int)(this[this.tableEmpPositionInfo.PayGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupID\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.PayGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeavePlanID {
                get {
                    try {
                        return ((int)(this[this.tableEmpPositionInfo.LeavePlanIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeavePlanID\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.LeavePlanIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.PositionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionCode\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.PositionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.PositionDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionDesc\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.PositionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RankCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.RankCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RankCode\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.RankCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RankDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.RankDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RankDesc\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.RankDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyCode1 {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.HierarchyCode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyCode1\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.HierarchyCode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyDesc1 {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.HierarchyDesc1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyDesc1\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.HierarchyDesc1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyCode2 {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.HierarchyCode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyCode2\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.HierarchyCode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyDesc2 {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.HierarchyDesc2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyDesc2\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.HierarchyDesc2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyCode3 {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.HierarchyCode3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyCode3\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.HierarchyCode3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HierarchyDesc3 {
                get {
                    try {
                        return ((string)(this[this.tableEmpPositionInfo.HierarchyDesc3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HierarchyDesc3\' in table \'EmpPositionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpPositionInfo.HierarchyDesc3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpPositionInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpPositionInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayrollGroupRow PayrollGroupRow {
                get {
                    return ((PayrollGroupRow)(this.GetParentRow(this.Table.ParentRelations["PayrollGroup_EmpPositionInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PayrollGroup_EmpPositionInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow PositionRow {
                get {
                    return ((PositionRow)(this.GetParentRow(this.Table.ParentRelations["Position_EmpPositionInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Position_EmpPositionInfo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpPositionInfo.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpPositionInfo.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPosEffFrNull() {
                return this.IsNull(this.tableEmpPositionInfo.EmpPosEffFrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPosEffFrNull() {
                this[this.tableEmpPositionInfo.EmpPosEffFrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPosEffToNull() {
                return this.IsNull(this.tableEmpPositionInfo.EmpPosEffToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPosEffToNull() {
                this[this.tableEmpPositionInfo.EmpPosEffToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyIDNull() {
                return this.IsNull(this.tableEmpPositionInfo.CompanyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyIDNull() {
                this[this.tableEmpPositionInfo.CompanyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionIDNull() {
                return this.IsNull(this.tableEmpPositionInfo.PositionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionIDNull() {
                this[this.tableEmpPositionInfo.PositionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRankIDNull() {
                return this.IsNull(this.tableEmpPositionInfo.RankIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRankIDNull() {
                this[this.tableEmpPositionInfo.RankIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStaffTypeIDNull() {
                return this.IsNull(this.tableEmpPositionInfo.StaffTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStaffTypeIDNull() {
                this[this.tableEmpPositionInfo.StaffTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupIDNull() {
                return this.IsNull(this.tableEmpPositionInfo.PayGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupIDNull() {
                this[this.tableEmpPositionInfo.PayGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeavePlanIDNull() {
                return this.IsNull(this.tableEmpPositionInfo.LeavePlanIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeavePlanIDNull() {
                this[this.tableEmpPositionInfo.LeavePlanIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionCodeNull() {
                return this.IsNull(this.tableEmpPositionInfo.PositionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionCodeNull() {
                this[this.tableEmpPositionInfo.PositionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionDescNull() {
                return this.IsNull(this.tableEmpPositionInfo.PositionDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionDescNull() {
                this[this.tableEmpPositionInfo.PositionDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRankCodeNull() {
                return this.IsNull(this.tableEmpPositionInfo.RankCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRankCodeNull() {
                this[this.tableEmpPositionInfo.RankCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRankDescNull() {
                return this.IsNull(this.tableEmpPositionInfo.RankDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRankDescNull() {
                this[this.tableEmpPositionInfo.RankDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyCode1Null() {
                return this.IsNull(this.tableEmpPositionInfo.HierarchyCode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyCode1Null() {
                this[this.tableEmpPositionInfo.HierarchyCode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyDesc1Null() {
                return this.IsNull(this.tableEmpPositionInfo.HierarchyDesc1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyDesc1Null() {
                this[this.tableEmpPositionInfo.HierarchyDesc1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyCode2Null() {
                return this.IsNull(this.tableEmpPositionInfo.HierarchyCode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyCode2Null() {
                this[this.tableEmpPositionInfo.HierarchyCode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyDesc2Null() {
                return this.IsNull(this.tableEmpPositionInfo.HierarchyDesc2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyDesc2Null() {
                this[this.tableEmpPositionInfo.HierarchyDesc2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyCode3Null() {
                return this.IsNull(this.tableEmpPositionInfo.HierarchyCode3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyCode3Null() {
                this[this.tableEmpPositionInfo.HierarchyCode3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyDesc3Null() {
                return this.IsNull(this.tableEmpPositionInfo.HierarchyDesc3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyDesc3Null() {
                this[this.tableEmpPositionInfo.HierarchyDesc3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyRow[] GetEmpHierarchyRows() {
                if ((this.Table.ChildRelations["EmpPositionInfo_EmpHierarchy"] == null)) {
                    return new EmpHierarchyRow[0];
                }
                else {
                    return ((EmpHierarchyRow[])(base.GetChildRows(this.Table.ChildRelations["EmpPositionInfo_EmpHierarchy"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpRecurringPaymentRow : global::System.Data.DataRow {
            
            private EmpRecurringPaymentDataTable tableEmpRecurringPayment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpRecurringPaymentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpRecurringPayment = ((EmpRecurringPaymentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpRPID {
                get {
                    return ((int)(this[this.tableEmpRecurringPayment.EmpRPIDColumn]));
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpRPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpRPEffFr {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpRecurringPayment.EmpRPEffFrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRPEffFr\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpRPEffFrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpRPEffTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpRecurringPayment.EmpRPEffToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRPEffTo\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpRPEffToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayCodeID {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.PayCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayCodeID\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PayCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EmpRPAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableEmpRecurringPayment.EmpRPAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRPAmount\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpRPAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyID {
                get {
                    try {
                        return ((string)(this[this.tableEmpRecurringPayment.CurrencyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrencyID\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.CurrencyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpRPUnit {
                get {
                    try {
                        return ((string)(this[this.tableEmpRecurringPayment.EmpRPUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRPUnit\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpRPUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpRPMethod {
                get {
                    try {
                        return ((string)(this[this.tableEmpRecurringPayment.EmpRPMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRPMethod\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpRPMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpAccID {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.EmpAccIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpAccID\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpAccIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpRPRemark {
                get {
                    try {
                        return ((string)(this[this.tableEmpRecurringPayment.EmpRPRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRPRemark\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.EmpRPRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeID {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.PaymentCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeID\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PaymentCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpRecurringPayment.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCodeDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpRecurringPayment.PaymentCodeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDesc\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PaymentCodeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentTypeID {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.PaymentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentTypeID\' in table \'EmpRecurringPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PaymentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsProrata {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.PaymentCodeIsProrataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsProrata\' in table \'EmpRecurringPayment\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PaymentCodeIsProrataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsMPF {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.PaymentCodeIsMPFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsMPF\' in table \'EmpRecurringPayment\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PaymentCodeIsMPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsTopUp {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.PaymentCodeIsTopUpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsTopUp\' in table \'EmpRecurringPayment\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PaymentCodeIsTopUpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsWages {
                get {
                    try {
                        return ((int)(this[this.tableEmpRecurringPayment.PaymentCodeIsWagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsWages\' in table \'EmpRecurringPayment\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableEmpRecurringPayment.PaymentCodeIsWagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpRecurringPayment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpRecurringPayment"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpRecurringPayment.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpRecurringPayment.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRPEffFrNull() {
                return this.IsNull(this.tableEmpRecurringPayment.EmpRPEffFrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRPEffFrNull() {
                this[this.tableEmpRecurringPayment.EmpRPEffFrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRPEffToNull() {
                return this.IsNull(this.tableEmpRecurringPayment.EmpRPEffToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRPEffToNull() {
                this[this.tableEmpRecurringPayment.EmpRPEffToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayCodeIDNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PayCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayCodeIDNull() {
                this[this.tableEmpRecurringPayment.PayCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRPAmountNull() {
                return this.IsNull(this.tableEmpRecurringPayment.EmpRPAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRPAmountNull() {
                this[this.tableEmpRecurringPayment.EmpRPAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrencyIDNull() {
                return this.IsNull(this.tableEmpRecurringPayment.CurrencyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrencyIDNull() {
                this[this.tableEmpRecurringPayment.CurrencyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRPUnitNull() {
                return this.IsNull(this.tableEmpRecurringPayment.EmpRPUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRPUnitNull() {
                this[this.tableEmpRecurringPayment.EmpRPUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRPMethodNull() {
                return this.IsNull(this.tableEmpRecurringPayment.EmpRPMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRPMethodNull() {
                this[this.tableEmpRecurringPayment.EmpRPMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpAccIDNull() {
                return this.IsNull(this.tableEmpRecurringPayment.EmpAccIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpAccIDNull() {
                this[this.tableEmpRecurringPayment.EmpAccIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRPRemarkNull() {
                return this.IsNull(this.tableEmpRecurringPayment.EmpRPRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRPRemarkNull() {
                this[this.tableEmpRecurringPayment.EmpRPRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIDNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PaymentCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIDNull() {
                this[this.tableEmpRecurringPayment.PaymentCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tableEmpRecurringPayment.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDescNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PaymentCodeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDescNull() {
                this[this.tableEmpRecurringPayment.PaymentCodeDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentTypeIDNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PaymentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentTypeIDNull() {
                this[this.tableEmpRecurringPayment.PaymentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsProrataNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PaymentCodeIsProrataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsProrataNull() {
                this[this.tableEmpRecurringPayment.PaymentCodeIsProrataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsMPFNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PaymentCodeIsMPFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsMPFNull() {
                this[this.tableEmpRecurringPayment.PaymentCodeIsMPFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsTopUpNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PaymentCodeIsTopUpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsTopUpNull() {
                this[this.tableEmpRecurringPayment.PaymentCodeIsTopUpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsWagesNull() {
                return this.IsNull(this.tableEmpRecurringPayment.PaymentCodeIsWagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsWagesNull() {
                this[this.tableEmpRecurringPayment.PaymentCodeIsWagesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpBankAccountRow : global::System.Data.DataRow {
            
            private EmpBankAccountDataTable tableEmpBankAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpBankAccountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpBankAccount = ((EmpBankAccountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpBankAccountID {
                get {
                    return ((int)(this[this.tableEmpBankAccount.EmpBankAccountIDColumn]));
                }
                set {
                    this[this.tableEmpBankAccount.EmpBankAccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpBankAccount.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpBankAccount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpBankAccount.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpBankCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpBankAccount.EmpBankCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpBankCode\' in table \'EmpBankAccount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpBankAccount.EmpBankCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpBranchCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpBankAccount.EmpBranchCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpBranchCode\' in table \'EmpBankAccount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpBankAccount.EmpBranchCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpAccountNo {
                get {
                    try {
                        return ((string)(this[this.tableEmpBankAccount.EmpAccountNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpAccountNo\' in table \'EmpBankAccount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpBankAccount.EmpAccountNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpBankAccountHolderName {
                get {
                    try {
                        return ((string)(this[this.tableEmpBankAccount.EmpBankAccountHolderNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpBankAccountHolderName\' in table \'EmpBankAccount\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableEmpBankAccount.EmpBankAccountHolderNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EmpAccDefault {
                get {
                    try {
                        return ((bool)(this[this.tableEmpBankAccount.EmpAccDefaultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpAccDefault\' in table \'EmpBankAccount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpBankAccount.EmpAccDefaultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpBankAccountRemark {
                get {
                    try {
                        return ((string)(this[this.tableEmpBankAccount.EmpBankAccountRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpBankAccountRemark\' in table \'EmpBankAccount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpBankAccount.EmpBankAccountRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpBankAccount"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpBankAccount"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankListRow BankListRow {
                get {
                    return ((BankListRow)(this.GetParentRow(this.Table.ParentRelations["BankList_EmpBankAccount"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BankList_EmpBankAccount"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpBankAccount.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpBankAccount.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpBankCodeNull() {
                return this.IsNull(this.tableEmpBankAccount.EmpBankCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpBankCodeNull() {
                this[this.tableEmpBankAccount.EmpBankCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpBranchCodeNull() {
                return this.IsNull(this.tableEmpBankAccount.EmpBranchCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpBranchCodeNull() {
                this[this.tableEmpBankAccount.EmpBranchCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpAccountNoNull() {
                return this.IsNull(this.tableEmpBankAccount.EmpAccountNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpAccountNoNull() {
                this[this.tableEmpBankAccount.EmpAccountNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpBankAccountHolderNameNull() {
                return this.IsNull(this.tableEmpBankAccount.EmpBankAccountHolderNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpBankAccountHolderNameNull() {
                this[this.tableEmpBankAccount.EmpBankAccountHolderNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpAccDefaultNull() {
                return this.IsNull(this.tableEmpBankAccount.EmpAccDefaultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpAccDefaultNull() {
                this[this.tableEmpBankAccount.EmpAccDefaultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpBankAccountRemarkNull() {
                return this.IsNull(this.tableEmpBankAccount.EmpBankAccountRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpBankAccountRemarkNull() {
                this[this.tableEmpBankAccount.EmpBankAccountRemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpSpouseRow : global::System.Data.DataRow {
            
            private EmpSpouseDataTable tableEmpSpouse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpSpouseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpSpouse = ((EmpSpouseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpSpouseID {
                get {
                    return ((int)(this[this.tableEmpSpouse.EmpSpouseIDColumn]));
                }
                set {
                    this[this.tableEmpSpouse.EmpSpouseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpSpouse.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpSpouseSurname {
                get {
                    try {
                        return ((string)(this[this.tableEmpSpouse.EmpSpouseSurnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpSpouseSurname\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpSpouseSurnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpSpouseOtherName {
                get {
                    try {
                        return ((string)(this[this.tableEmpSpouse.EmpSpouseOtherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpSpouseOtherName\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpSpouseOtherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpSpouseChineseName {
                get {
                    try {
                        return ((string)(this[this.tableEmpSpouse.EmpSpouseChineseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpSpouseChineseName\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpSpouseChineseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpSpouseHKID {
                get {
                    try {
                        return ((string)(this[this.tableEmpSpouse.EmpSpouseHKIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpSpouseHKID\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpSpouseHKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpSpousePassportNo {
                get {
                    try {
                        return ((string)(this[this.tableEmpSpouse.EmpSpousePassportNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpSpousePassportNo\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpSpousePassportNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpSpousePassportIssuedCountry {
                get {
                    try {
                        return ((string)(this[this.tableEmpSpouse.EmpSpousePassportIssuedCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpSpousePassportIssuedCountry\' in table \'EmpSpouse\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpSpousePassportIssuedCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpGender {
                get {
                    try {
                        return ((string)(this[this.tableEmpSpouse.EmpGenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpGender\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpGenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpIsMedicalSchemaInsured {
                get {
                    try {
                        return ((string)(this[this.tableEmpSpouse.EmpIsMedicalSchemaInsuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpIsMedicalSchemaInsured\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpIsMedicalSchemaInsuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpMedicalEffectiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpSpouse.EmpMedicalEffectiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpMedicalEffectiveDate\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpMedicalEffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpMedicalExpiryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpSpouse.EmpMedicalExpiryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpMedicalExpiryDate\' in table \'EmpSpouse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSpouse.EmpMedicalExpiryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpSpouse"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpSpouse"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpSpouse.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpSpouse.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpSpouseSurnameNull() {
                return this.IsNull(this.tableEmpSpouse.EmpSpouseSurnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpSpouseSurnameNull() {
                this[this.tableEmpSpouse.EmpSpouseSurnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpSpouseOtherNameNull() {
                return this.IsNull(this.tableEmpSpouse.EmpSpouseOtherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpSpouseOtherNameNull() {
                this[this.tableEmpSpouse.EmpSpouseOtherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpSpouseChineseNameNull() {
                return this.IsNull(this.tableEmpSpouse.EmpSpouseChineseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpSpouseChineseNameNull() {
                this[this.tableEmpSpouse.EmpSpouseChineseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpSpouseHKIDNull() {
                return this.IsNull(this.tableEmpSpouse.EmpSpouseHKIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpSpouseHKIDNull() {
                this[this.tableEmpSpouse.EmpSpouseHKIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpSpousePassportNoNull() {
                return this.IsNull(this.tableEmpSpouse.EmpSpousePassportNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpSpousePassportNoNull() {
                this[this.tableEmpSpouse.EmpSpousePassportNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpSpousePassportIssuedCountryNull() {
                return this.IsNull(this.tableEmpSpouse.EmpSpousePassportIssuedCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpSpousePassportIssuedCountryNull() {
                this[this.tableEmpSpouse.EmpSpousePassportIssuedCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpGenderNull() {
                return this.IsNull(this.tableEmpSpouse.EmpGenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpGenderNull() {
                this[this.tableEmpSpouse.EmpGenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIsMedicalSchemaInsuredNull() {
                return this.IsNull(this.tableEmpSpouse.EmpIsMedicalSchemaInsuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIsMedicalSchemaInsuredNull() {
                this[this.tableEmpSpouse.EmpIsMedicalSchemaInsuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpMedicalEffectiveDateNull() {
                return this.IsNull(this.tableEmpSpouse.EmpMedicalEffectiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpMedicalEffectiveDateNull() {
                this[this.tableEmpSpouse.EmpMedicalEffectiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpMedicalExpiryDateNull() {
                return this.IsNull(this.tableEmpSpouse.EmpMedicalExpiryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpMedicalExpiryDateNull() {
                this[this.tableEmpSpouse.EmpMedicalExpiryDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpDependantRow : global::System.Data.DataRow {
            
            private EmpDependantDataTable tableEmpDependant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpDependantRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpDependant = ((EmpDependantDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpDependantID {
                get {
                    return ((int)(this[this.tableEmpDependant.EmpDependantIDColumn]));
                }
                set {
                    this[this.tableEmpDependant.EmpDependantIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpDependant.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpDependant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpDependantSurname {
                get {
                    try {
                        return ((string)(this[this.tableEmpDependant.EmpDependantSurnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDependantSurname\' in table \'EmpDependant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpDependantSurnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpDependantOtherName {
                get {
                    try {
                        return ((string)(this[this.tableEmpDependant.EmpDependantOtherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDependantOtherName\' in table \'EmpDependant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpDependantOtherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpDependantChineseName {
                get {
                    try {
                        return ((string)(this[this.tableEmpDependant.EmpDependantChineseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDependantChineseName\' in table \'EmpDependant\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpDependantChineseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpDependantGender {
                get {
                    try {
                        return ((string)(this[this.tableEmpDependant.EmpDependantGenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDependantGender\' in table \'EmpDependant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpDependantGenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpDependantHKID {
                get {
                    try {
                        return ((string)(this[this.tableEmpDependant.EmpDependantHKIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDependantHKID\' in table \'EmpDependant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpDependantHKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpDependantPassportNo {
                get {
                    try {
                        return ((string)(this[this.tableEmpDependant.EmpDependantPassportNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDependantPassportNo\' in table \'EmpDependant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpDependantPassportNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpDependantPassportIssuedCountry {
                get {
                    try {
                        return ((string)(this[this.tableEmpDependant.EmpDependantPassportIssuedCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDependantPassportIssuedCountry\' in table \'EmpDependant\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpDependantPassportIssuedCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpDependantRelationship {
                get {
                    try {
                        return ((string)(this[this.tableEmpDependant.EmpDependantRelationshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDependantRelationship\' in table \'EmpDependant\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableEmpDependant.EmpDependantRelationshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpDependant"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpDependant"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpDependant.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpDependant.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDependantSurnameNull() {
                return this.IsNull(this.tableEmpDependant.EmpDependantSurnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDependantSurnameNull() {
                this[this.tableEmpDependant.EmpDependantSurnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDependantOtherNameNull() {
                return this.IsNull(this.tableEmpDependant.EmpDependantOtherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDependantOtherNameNull() {
                this[this.tableEmpDependant.EmpDependantOtherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDependantChineseNameNull() {
                return this.IsNull(this.tableEmpDependant.EmpDependantChineseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDependantChineseNameNull() {
                this[this.tableEmpDependant.EmpDependantChineseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDependantGenderNull() {
                return this.IsNull(this.tableEmpDependant.EmpDependantGenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDependantGenderNull() {
                this[this.tableEmpDependant.EmpDependantGenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDependantHKIDNull() {
                return this.IsNull(this.tableEmpDependant.EmpDependantHKIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDependantHKIDNull() {
                this[this.tableEmpDependant.EmpDependantHKIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDependantPassportNoNull() {
                return this.IsNull(this.tableEmpDependant.EmpDependantPassportNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDependantPassportNoNull() {
                this[this.tableEmpDependant.EmpDependantPassportNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDependantPassportIssuedCountryNull() {
                return this.IsNull(this.tableEmpDependant.EmpDependantPassportIssuedCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDependantPassportIssuedCountryNull() {
                this[this.tableEmpDependant.EmpDependantPassportIssuedCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDependantRelationshipNull() {
                return this.IsNull(this.tableEmpDependant.EmpDependantRelationshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDependantRelationshipNull() {
                this[this.tableEmpDependant.EmpDependantRelationshipColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpQualificationRow : global::System.Data.DataRow {
            
            private EmpQualificationDataTable tableEmpQualification;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpQualificationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpQualification = ((EmpQualificationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpQualificationID {
                get {
                    return ((int)(this[this.tableEmpQualification.EmpQualificationIDColumn]));
                }
                set {
                    this[this.tableEmpQualification.EmpQualificationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpQualification.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpQualification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QualificationID {
                get {
                    try {
                        return ((int)(this[this.tableEmpQualification.QualificationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualificationID\' in table \'EmpQualification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.QualificationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpQualificationFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpQualification.EmpQualificationFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpQualificationFrom\' in table \'EmpQualification\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.EmpQualificationFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpQualificationTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpQualification.EmpQualificationToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpQualificationTo\' in table \'EmpQualification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.EmpQualificationToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpQualificationInstitution {
                get {
                    try {
                        return ((string)(this[this.tableEmpQualification.EmpQualificationInstitutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpQualificationInstitution\' in table \'EmpQualification\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.EmpQualificationInstitutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpQualificationRemark {
                get {
                    try {
                        return ((string)(this[this.tableEmpQualification.EmpQualificationRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpQualificationRemark\' in table \'EmpQualification\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.EmpQualificationRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QualificationID1 {
                get {
                    try {
                        return ((int)(this[this.tableEmpQualification.QualificationID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualificationID1\' in table \'EmpQualification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.QualificationID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QualificationCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpQualification.QualificationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualificationCode\' in table \'EmpQualification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.QualificationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QualificationDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpQualification.QualificationDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualificationDesc\' in table \'EmpQualification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpQualification.QualificationDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpQualification"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpQualification"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpQualification.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpQualification.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualificationIDNull() {
                return this.IsNull(this.tableEmpQualification.QualificationIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualificationIDNull() {
                this[this.tableEmpQualification.QualificationIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpQualificationFromNull() {
                return this.IsNull(this.tableEmpQualification.EmpQualificationFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpQualificationFromNull() {
                this[this.tableEmpQualification.EmpQualificationFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpQualificationToNull() {
                return this.IsNull(this.tableEmpQualification.EmpQualificationToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpQualificationToNull() {
                this[this.tableEmpQualification.EmpQualificationToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpQualificationInstitutionNull() {
                return this.IsNull(this.tableEmpQualification.EmpQualificationInstitutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpQualificationInstitutionNull() {
                this[this.tableEmpQualification.EmpQualificationInstitutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpQualificationRemarkNull() {
                return this.IsNull(this.tableEmpQualification.EmpQualificationRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpQualificationRemarkNull() {
                this[this.tableEmpQualification.EmpQualificationRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualificationID1Null() {
                return this.IsNull(this.tableEmpQualification.QualificationID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualificationID1Null() {
                this[this.tableEmpQualification.QualificationID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualificationCodeNull() {
                return this.IsNull(this.tableEmpQualification.QualificationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualificationCodeNull() {
                this[this.tableEmpQualification.QualificationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualificationDescNull() {
                return this.IsNull(this.tableEmpQualification.QualificationDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualificationDescNull() {
                this[this.tableEmpQualification.QualificationDescColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpSkillRow : global::System.Data.DataRow {
            
            private EmpSkillDataTable tableEmpSkill;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpSkillRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpSkill = ((EmpSkillDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpSkillID {
                get {
                    return ((int)(this[this.tableEmpSkill.EmpSkillIDColumn]));
                }
                set {
                    this[this.tableEmpSkill.EmpSkillIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpSkill.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SkillID {
                get {
                    try {
                        return ((int)(this[this.tableEmpSkill.SkillIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillID\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.SkillIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SkillLevelID {
                get {
                    try {
                        return ((int)(this[this.tableEmpSkill.SkillLevelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillLevelID\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.SkillLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SkillID1 {
                get {
                    try {
                        return ((int)(this[this.tableEmpSkill.SkillID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillID1\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.SkillID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpSkill.SkillCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillCode\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.SkillCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpSkill.SkillDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillDesc\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.SkillDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SkillLevelID1 {
                get {
                    try {
                        return ((int)(this[this.tableEmpSkill.SkillLevelID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillLevelID1\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.SkillLevelID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillLevelCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpSkill.SkillLevelCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillLevelCode\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.SkillLevelCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillLevelDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpSkill.SkillLevelDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillLevelDesc\' in table \'EmpSkill\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpSkill.SkillLevelDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpSkill"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpSkill"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpSkill.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpSkill.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillIDNull() {
                return this.IsNull(this.tableEmpSkill.SkillIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillIDNull() {
                this[this.tableEmpSkill.SkillIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillLevelIDNull() {
                return this.IsNull(this.tableEmpSkill.SkillLevelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillLevelIDNull() {
                this[this.tableEmpSkill.SkillLevelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillID1Null() {
                return this.IsNull(this.tableEmpSkill.SkillID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillID1Null() {
                this[this.tableEmpSkill.SkillID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillCodeNull() {
                return this.IsNull(this.tableEmpSkill.SkillCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillCodeNull() {
                this[this.tableEmpSkill.SkillCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillDescNull() {
                return this.IsNull(this.tableEmpSkill.SkillDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillDescNull() {
                this[this.tableEmpSkill.SkillDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillLevelID1Null() {
                return this.IsNull(this.tableEmpSkill.SkillLevelID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillLevelID1Null() {
                this[this.tableEmpSkill.SkillLevelID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillLevelCodeNull() {
                return this.IsNull(this.tableEmpSkill.SkillLevelCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillLevelCodeNull() {
                this[this.tableEmpSkill.SkillLevelCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillLevelDescNull() {
                return this.IsNull(this.tableEmpSkill.SkillLevelDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillLevelDescNull() {
                this[this.tableEmpSkill.SkillLevelDescColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpHierarchyRow : global::System.Data.DataRow {
            
            private EmpHierarchyDataTable tableEmpHierarchy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpHierarchyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpHierarchy = ((EmpHierarchyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpHierarchyID {
                get {
                    return ((int)(this[this.tableEmpHierarchy.EmpHierarchyIDColumn]));
                }
                set {
                    this[this.tableEmpHierarchy.EmpHierarchyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpHierarchy.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpHierarchy.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpPosID {
                get {
                    try {
                        return ((int)(this[this.tableEmpHierarchy.EmpPosIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPosID\' in table \'EmpHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpHierarchy.EmpPosIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HElementID {
                get {
                    try {
                        return ((int)(this[this.tableEmpHierarchy.HElementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementID\' in table \'EmpHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpHierarchy.HElementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HLevelID {
                get {
                    try {
                        return ((int)(this[this.tableEmpHierarchy.HLevelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLevelID\' in table \'EmpHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpHierarchy.HLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HElementCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpHierarchy.HElementCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementCode\' in table \'EmpHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpHierarchy.HElementCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HElementDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpHierarchy.HElementDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementDesc\' in table \'EmpHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpHierarchy.HElementDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HLevelSeqNo {
                get {
                    try {
                        return ((int)(this[this.tableEmpHierarchy.HLevelSeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLevelSeqNo\' in table \'EmpHierarchy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpHierarchy.HLevelSeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow EmpPositionInfoRow {
                get {
                    return ((EmpPositionInfoRow)(this.GetParentRow(this.Table.ParentRelations["EmpPositionInfo_EmpHierarchy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EmpPositionInfo_EmpHierarchy"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchyLevelRow HierarchyLevelRow {
                get {
                    return ((HierarchyLevelRow)(this.GetParentRow(this.Table.ParentRelations["HierarchyLevel_EmpHierarchy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["HierarchyLevel_EmpHierarchy"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpHierarchy.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpHierarchy.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPosIDNull() {
                return this.IsNull(this.tableEmpHierarchy.EmpPosIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPosIDNull() {
                this[this.tableEmpHierarchy.EmpPosIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementIDNull() {
                return this.IsNull(this.tableEmpHierarchy.HElementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementIDNull() {
                this[this.tableEmpHierarchy.HElementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLevelIDNull() {
                return this.IsNull(this.tableEmpHierarchy.HLevelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLevelIDNull() {
                this[this.tableEmpHierarchy.HLevelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementCodeNull() {
                return this.IsNull(this.tableEmpHierarchy.HElementCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementCodeNull() {
                this[this.tableEmpHierarchy.HElementCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementDescNull() {
                return this.IsNull(this.tableEmpHierarchy.HElementDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementDescNull() {
                this[this.tableEmpHierarchy.HElementDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLevelSeqNoNull() {
                return this.IsNull(this.tableEmpHierarchy.HLevelSeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLevelSeqNoNull() {
                this[this.tableEmpHierarchy.HLevelSeqNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HierarchyLevelRow : global::System.Data.DataRow {
            
            private HierarchyLevelDataTable tableHierarchyLevel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HierarchyLevelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHierarchyLevel = ((HierarchyLevelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HLevelID {
                get {
                    return ((int)(this[this.tableHierarchyLevel.HLevelIDColumn]));
                }
                set {
                    this[this.tableHierarchyLevel.HLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HLevelCode {
                get {
                    try {
                        return ((string)(this[this.tableHierarchyLevel.HLevelCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLevelCode\' in table \'HierarchyLevel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchyLevel.HLevelCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HLevelDesc {
                get {
                    try {
                        return ((string)(this[this.tableHierarchyLevel.HLevelDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLevelDesc\' in table \'HierarchyLevel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchyLevel.HLevelDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HLevelSeqNo {
                get {
                    try {
                        return ((int)(this[this.tableHierarchyLevel.HLevelSeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLevelSeqNo\' in table \'HierarchyLevel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHierarchyLevel.HLevelSeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLevelCodeNull() {
                return this.IsNull(this.tableHierarchyLevel.HLevelCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLevelCodeNull() {
                this[this.tableHierarchyLevel.HLevelCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLevelDescNull() {
                return this.IsNull(this.tableHierarchyLevel.HLevelDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLevelDescNull() {
                this[this.tableHierarchyLevel.HLevelDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLevelSeqNoNull() {
                return this.IsNull(this.tableHierarchyLevel.HLevelSeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLevelSeqNoNull() {
                this[this.tableHierarchyLevel.HLevelSeqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyRow[] GetEmpHierarchyRows() {
                if ((this.Table.ChildRelations["HierarchyLevel_EmpHierarchy"] == null)) {
                    return new EmpHierarchyRow[0];
                }
                else {
                    return ((EmpHierarchyRow[])(base.GetChildRows(this.Table.ChildRelations["HierarchyLevel_EmpHierarchy"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PayrollGroupRow : global::System.Data.DataRow {
            
            private PayrollGroupDataTable tablePayrollGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PayrollGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePayrollGroup = ((PayrollGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayGroupID {
                get {
                    return ((int)(this[this.tablePayrollGroup.PayGroupIDColumn]));
                }
                set {
                    this[this.tablePayrollGroup.PayGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayGroupCode {
                get {
                    try {
                        return ((string)(this[this.tablePayrollGroup.PayGroupCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupCode\' in table \'PayrollGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayrollGroup.PayGroupCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayGroupDesc {
                get {
                    try {
                        return ((string)(this[this.tablePayrollGroup.PayGroupDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupDesc\' in table \'PayrollGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayrollGroup.PayGroupDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupCodeNull() {
                return this.IsNull(this.tablePayrollGroup.PayGroupCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupCodeNull() {
                this[this.tablePayrollGroup.PayGroupCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupDescNull() {
                return this.IsNull(this.tablePayrollGroup.PayGroupDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupDescNull() {
                this[this.tablePayrollGroup.PayGroupDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow[] GetEmpPositionInfoRows() {
                if ((this.Table.ChildRelations["PayrollGroup_EmpPositionInfo"] == null)) {
                    return new EmpPositionInfoRow[0];
                }
                else {
                    return ((EmpPositionInfoRow[])(base.GetChildRows(this.Table.ChildRelations["PayrollGroup_EmpPositionInfo"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PositionRow : global::System.Data.DataRow {
            
            private PositionDataTable tablePosition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PositionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePosition = ((PositionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionID {
                get {
                    return ((int)(this[this.tablePosition.PositionIDColumn]));
                }
                set {
                    this[this.tablePosition.PositionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionCode {
                get {
                    try {
                        return ((string)(this[this.tablePosition.PositionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionCode\' in table \'Position\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosition.PositionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionDesc {
                get {
                    try {
                        return ((string)(this[this.tablePosition.PositionDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionDesc\' in table \'Position\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosition.PositionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionCapacity {
                get {
                    try {
                        return ((string)(this[this.tablePosition.PositionCapacityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionCapacity\' in table \'Position\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePosition.PositionCapacityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionCodeNull() {
                return this.IsNull(this.tablePosition.PositionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionCodeNull() {
                this[this.tablePosition.PositionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionDescNull() {
                return this.IsNull(this.tablePosition.PositionDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionDescNull() {
                this[this.tablePosition.PositionDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionCapacityNull() {
                return this.IsNull(this.tablePosition.PositionCapacityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionCapacityNull() {
                this[this.tablePosition.PositionCapacityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow[] GetEmpPositionInfoRows() {
                if ((this.Table.ChildRelations["Position_EmpPositionInfo"] == null)) {
                    return new EmpPositionInfoRow[0];
                }
                else {
                    return ((EmpPositionInfoRow[])(base.GetChildRows(this.Table.ChildRelations["Position_EmpPositionInfo"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BankListRow : global::System.Data.DataRow {
            
            private BankListDataTable tableBankList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BankListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBankList = ((BankListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankCode {
                get {
                    return ((string)(this[this.tableBankList.BankCodeColumn]));
                }
                set {
                    this[this.tableBankList.BankCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableBankList.BankNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BankName\' in table \'BankList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBankList.BankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tableBankList.BankNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tableBankList.BankNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountRow[] GetEmpBankAccountRows() {
                if ((this.Table.ChildRelations["BankList_EmpBankAccount"] == null)) {
                    return new EmpBankAccountRow[0];
                }
                else {
                    return ((EmpBankAccountRow[])(base.GetChildRows(this.Table.ChildRelations["BankList_EmpBankAccount"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpRequestRow : global::System.Data.DataRow {
            
            private EmpRequestDataTable tableEmpRequest;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpRequestRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpRequest = ((EmpRequestDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpRequestID {
                get {
                    return ((int)(this[this.tableEmpRequest.EmpRequestIDColumn]));
                }
                set {
                    this[this.tableEmpRequest.EmpRequestIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpRequest.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpRequestType {
                get {
                    try {
                        return ((string)(this[this.tableEmpRequest.EmpRequestTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRequestType\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpRequestTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpRequestRecordID {
                get {
                    try {
                        return ((int)(this[this.tableEmpRequest.EmpRequestRecordIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRequestRecordID\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpRequestRecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpRequestCreateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpRequest.EmpRequestCreateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRequestCreateDate\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpRequestCreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpRequestModifyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpRequest.EmpRequestModifyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRequestModifyDate\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpRequestModifyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpRequestStatusCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpRequest.EmpRequestStatusCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRequestStatusCode\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpRequestStatusCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpRequestStatus {
                get {
                    try {
                        return ((string)(this[this.tableEmpRequest.EmpRequestStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRequestStatus\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpRequestStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpRequestLastAuthorizationWorkFlowIndex {
                get {
                    try {
                        return ((int)(this[this.tableEmpRequest.EmpRequestLastAuthorizationWorkFlowIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRequestLastAuthorizationWorkFlowIndex\' in table \'EmpRequ" +
                                "est\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpRequestLastAuthorizationWorkFlowIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpRequestLastActionBy {
                get {
                    try {
                        return ((string)(this[this.tableEmpRequest.EmpRequestLastActionByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpRequestLastActionBy\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.EmpRequestLastActionByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpRequest.DateFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateFrom\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.DateFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpRequest.DateToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTo\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.DateToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Unit {
                get {
                    try {
                        return ((double)(this[this.tableEmpRequest.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableEmpRequest.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateFromAM {
                get {
                    try {
                        return ((string)(this[this.tableEmpRequest.DateFromAMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateFromAM\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.DateFromAMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateToAM {
                get {
                    try {
                        return ((string)(this[this.tableEmpRequest.DateToAMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateToAM\' in table \'EmpRequest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpRequest.DateToAMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpRequest"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpRequest"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpRequest.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpRequest.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRequestTypeNull() {
                return this.IsNull(this.tableEmpRequest.EmpRequestTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRequestTypeNull() {
                this[this.tableEmpRequest.EmpRequestTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRequestRecordIDNull() {
                return this.IsNull(this.tableEmpRequest.EmpRequestRecordIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRequestRecordIDNull() {
                this[this.tableEmpRequest.EmpRequestRecordIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRequestCreateDateNull() {
                return this.IsNull(this.tableEmpRequest.EmpRequestCreateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRequestCreateDateNull() {
                this[this.tableEmpRequest.EmpRequestCreateDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRequestModifyDateNull() {
                return this.IsNull(this.tableEmpRequest.EmpRequestModifyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRequestModifyDateNull() {
                this[this.tableEmpRequest.EmpRequestModifyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRequestStatusCodeNull() {
                return this.IsNull(this.tableEmpRequest.EmpRequestStatusCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRequestStatusCodeNull() {
                this[this.tableEmpRequest.EmpRequestStatusCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRequestStatusNull() {
                return this.IsNull(this.tableEmpRequest.EmpRequestStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRequestStatusNull() {
                this[this.tableEmpRequest.EmpRequestStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRequestLastAuthorizationWorkFlowIndexNull() {
                return this.IsNull(this.tableEmpRequest.EmpRequestLastAuthorizationWorkFlowIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRequestLastAuthorizationWorkFlowIndexNull() {
                this[this.tableEmpRequest.EmpRequestLastAuthorizationWorkFlowIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpRequestLastActionByNull() {
                return this.IsNull(this.tableEmpRequest.EmpRequestLastActionByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpRequestLastActionByNull() {
                this[this.tableEmpRequest.EmpRequestLastActionByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateFromNull() {
                return this.IsNull(this.tableEmpRequest.DateFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateFromNull() {
                this[this.tableEmpRequest.DateFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateToNull() {
                return this.IsNull(this.tableEmpRequest.DateToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateToNull() {
                this[this.tableEmpRequest.DateToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tableEmpRequest.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tableEmpRequest.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableEmpRequest.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableEmpRequest.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateFromAMNull() {
                return this.IsNull(this.tableEmpRequest.DateFromAMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateFromAMNull() {
                this[this.tableEmpRequest.DateFromAMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateToAMNull() {
                return this.IsNull(this.tableEmpRequest.DateToAMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateToAMNull() {
                this[this.tableEmpRequest.DateToAMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpWorkExpRow : global::System.Data.DataRow {
            
            private EmpWorkExpDataTable tableEmpWorkExp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpWorkExpRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpWorkExp = ((EmpWorkExpDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpWorkExpID {
                get {
                    return ((int)(this[this.tableEmpWorkExp.EmpWorkExpIDColumn]));
                }
                set {
                    this[this.tableEmpWorkExp.EmpWorkExpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpWorkExp.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpWorkExp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpWorkExp.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpWorkExpFromYear {
                get {
                    try {
                        return ((int)(this[this.tableEmpWorkExp.EmpWorkExpFromYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpWorkExpFromYear\' in table \'EmpWorkExp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpWorkExp.EmpWorkExpFromYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpWorkExpFromMonth {
                get {
                    try {
                        return ((int)(this[this.tableEmpWorkExp.EmpWorkExpFromMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpWorkExpFromMonth\' in table \'EmpWorkExp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpWorkExp.EmpWorkExpFromMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpWorkExpToYear {
                get {
                    try {
                        return ((int)(this[this.tableEmpWorkExp.EmpWorkExpToYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpWorkExpToYear\' in table \'EmpWorkExp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpWorkExp.EmpWorkExpToYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpWorkExpToMonth {
                get {
                    try {
                        return ((int)(this[this.tableEmpWorkExp.EmpWorkExpToMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpWorkExpToMonth\' in table \'EmpWorkExp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpWorkExp.EmpWorkExpToMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpWorkExpCompanyName {
                get {
                    try {
                        return ((string)(this[this.tableEmpWorkExp.EmpWorkExpCompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpWorkExpCompanyName\' in table \'EmpWorkExp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpWorkExp.EmpWorkExpCompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpWorkExpPosition {
                get {
                    try {
                        return ((string)(this[this.tableEmpWorkExp.EmpWorkExpPositionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpWorkExpPosition\' in table \'EmpWorkExp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpWorkExp.EmpWorkExpPositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpWorkExpRemark {
                get {
                    try {
                        return ((string)(this[this.tableEmpWorkExp.EmpWorkExpRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpWorkExpRemark\' in table \'EmpWorkExp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpWorkExp.EmpWorkExpRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpWorkExp"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpWorkExp"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpWorkExp.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpWorkExp.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpWorkExpFromYearNull() {
                return this.IsNull(this.tableEmpWorkExp.EmpWorkExpFromYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpWorkExpFromYearNull() {
                this[this.tableEmpWorkExp.EmpWorkExpFromYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpWorkExpFromMonthNull() {
                return this.IsNull(this.tableEmpWorkExp.EmpWorkExpFromMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpWorkExpFromMonthNull() {
                this[this.tableEmpWorkExp.EmpWorkExpFromMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpWorkExpToYearNull() {
                return this.IsNull(this.tableEmpWorkExp.EmpWorkExpToYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpWorkExpToYearNull() {
                this[this.tableEmpWorkExp.EmpWorkExpToYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpWorkExpToMonthNull() {
                return this.IsNull(this.tableEmpWorkExp.EmpWorkExpToMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpWorkExpToMonthNull() {
                this[this.tableEmpWorkExp.EmpWorkExpToMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpWorkExpCompanyNameNull() {
                return this.IsNull(this.tableEmpWorkExp.EmpWorkExpCompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpWorkExpCompanyNameNull() {
                this[this.tableEmpWorkExp.EmpWorkExpCompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpWorkExpPositionNull() {
                return this.IsNull(this.tableEmpWorkExp.EmpWorkExpPositionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpWorkExpPositionNull() {
                this[this.tableEmpWorkExp.EmpWorkExpPositionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpWorkExpRemarkNull() {
                return this.IsNull(this.tableEmpWorkExp.EmpWorkExpRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpWorkExpRemarkNull() {
                this[this.tableEmpWorkExp.EmpWorkExpRemarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpExtraFieldRow : global::System.Data.DataRow {
            
            private EmpExtraFieldDataTable tableEmpExtraField;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpExtraFieldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpExtraField = ((EmpExtraFieldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpExtraFieldID {
                get {
                    return ((int)(this[this.tableEmpExtraField.EmpExtraFieldIDColumn]));
                }
                set {
                    this[this.tableEmpExtraField.EmpExtraFieldIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpExtraFieldName {
                get {
                    try {
                        return ((string)(this[this.tableEmpExtraField.EmpExtraFieldNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpExtraFieldName\' in table \'EmpExtraField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpExtraField.EmpExtraFieldNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpExtraFieldGroupName {
                get {
                    try {
                        return ((string)(this[this.tableEmpExtraField.EmpExtraFieldGroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpExtraFieldGroupName\' in table \'EmpExtraField\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableEmpExtraField.EmpExtraFieldGroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpExtraFieldNameNull() {
                return this.IsNull(this.tableEmpExtraField.EmpExtraFieldNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpExtraFieldNameNull() {
                this[this.tableEmpExtraField.EmpExtraFieldNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpExtraFieldGroupNameNull() {
                return this.IsNull(this.tableEmpExtraField.EmpExtraFieldGroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpExtraFieldGroupNameNull() {
                this[this.tableEmpExtraField.EmpExtraFieldGroupNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueRow[] GetEmpExtraFieldValueRows() {
                if ((this.Table.ChildRelations["EmpExtraField_EmpExtraFieldValue"] == null)) {
                    return new EmpExtraFieldValueRow[0];
                }
                else {
                    return ((EmpExtraFieldValueRow[])(base.GetChildRows(this.Table.ChildRelations["EmpExtraField_EmpExtraFieldValue"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpExtraFieldValueRow : global::System.Data.DataRow {
            
            private EmpExtraFieldValueDataTable tableEmpExtraFieldValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpExtraFieldValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpExtraFieldValue = ((EmpExtraFieldValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpExtraFieldValueID {
                get {
                    return ((int)(this[this.tableEmpExtraFieldValue.EmpExtraFieldValueIDColumn]));
                }
                set {
                    this[this.tableEmpExtraFieldValue.EmpExtraFieldValueIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableEmpExtraFieldValue.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'EmpExtraFieldValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpExtraFieldValue.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpExtraFieldID {
                get {
                    try {
                        return ((int)(this[this.tableEmpExtraFieldValue.EmpExtraFieldIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpExtraFieldID\' in table \'EmpExtraFieldValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpExtraFieldValue.EmpExtraFieldIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpExtraFieldValue {
                get {
                    try {
                        return ((string)(this[this.tableEmpExtraFieldValue.EmpExtraFieldValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpExtraFieldValue\' in table \'EmpExtraFieldValue\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableEmpExtraFieldValue.EmpExtraFieldValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow employeedetailRow {
                get {
                    return ((employeedetailRow)(this.GetParentRow(this.Table.ParentRelations["employeedetail_EmpExtraFieldValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["employeedetail_EmpExtraFieldValue"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldRow EmpExtraFieldRow {
                get {
                    return ((EmpExtraFieldRow)(this.GetParentRow(this.Table.ParentRelations["EmpExtraField_EmpExtraFieldValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EmpExtraField_EmpExtraFieldValue"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableEmpExtraFieldValue.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableEmpExtraFieldValue.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpExtraFieldIDNull() {
                return this.IsNull(this.tableEmpExtraFieldValue.EmpExtraFieldIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpExtraFieldIDNull() {
                this[this.tableEmpExtraFieldValue.EmpExtraFieldIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpExtraFieldValueNull() {
                return this.IsNull(this.tableEmpExtraFieldValue.EmpExtraFieldValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpExtraFieldValueNull() {
                this[this.tableEmpExtraFieldValue.EmpExtraFieldValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class employeedetailRowChangeEvent : global::System.EventArgs {
            
            private employeedetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRowChangeEvent(employeedetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public employeedetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LeaveBalanceRowChangeEvent : global::System.EventArgs {
            
            private LeaveBalanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRowChangeEvent(LeaveBalanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LeaveApplicationRowChangeEvent : global::System.EventArgs {
            
            private LeaveApplicationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveApplicationRowChangeEvent(LeaveApplicationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveApplicationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpPositionInfoRowChangeEvent : global::System.EventArgs {
            
            private EmpPositionInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRowChangeEvent(EmpPositionInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpPositionInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpRecurringPaymentRowChangeEvent : global::System.EventArgs {
            
            private EmpRecurringPaymentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRecurringPaymentRowChangeEvent(EmpRecurringPaymentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRecurringPaymentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpBankAccountRowChangeEvent : global::System.EventArgs {
            
            private EmpBankAccountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountRowChangeEvent(EmpBankAccountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpBankAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpSpouseRowChangeEvent : global::System.EventArgs {
            
            private EmpSpouseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSpouseRowChangeEvent(EmpSpouseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSpouseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpDependantRowChangeEvent : global::System.EventArgs {
            
            private EmpDependantRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDependantRowChangeEvent(EmpDependantRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDependantRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpQualificationRowChangeEvent : global::System.EventArgs {
            
            private EmpQualificationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpQualificationRowChangeEvent(EmpQualificationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpQualificationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpSkillRowChangeEvent : global::System.EventArgs {
            
            private EmpSkillRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSkillRowChangeEvent(EmpSkillRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpSkillRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpHierarchyRowChangeEvent : global::System.EventArgs {
            
            private EmpHierarchyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyRowChangeEvent(EmpHierarchyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpHierarchyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HierarchyLevelRowChangeEvent : global::System.EventArgs {
            
            private HierarchyLevelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchyLevelRowChangeEvent(HierarchyLevelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HierarchyLevelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PayrollGroupRowChangeEvent : global::System.EventArgs {
            
            private PayrollGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayrollGroupRowChangeEvent(PayrollGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayrollGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PositionRowChangeEvent : global::System.EventArgs {
            
            private PositionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRowChangeEvent(PositionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BankListRowChangeEvent : global::System.EventArgs {
            
            private BankListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankListRowChangeEvent(BankListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BankListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpRequestRowChangeEvent : global::System.EventArgs {
            
            private EmpRequestRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRequestRowChangeEvent(EmpRequestRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpRequestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpWorkExpRowChangeEvent : global::System.EventArgs {
            
            private EmpWorkExpRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpWorkExpRowChangeEvent(EmpWorkExpRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpWorkExpRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpExtraFieldRowChangeEvent : global::System.EventArgs {
            
            private EmpExtraFieldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldRowChangeEvent(EmpExtraFieldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpExtraFieldValueRowChangeEvent : global::System.EventArgs {
            
            private EmpExtraFieldValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueRowChangeEvent(EmpExtraFieldValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpExtraFieldValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591