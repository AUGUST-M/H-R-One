//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.Reports.Taxation.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TaxationPaymentMapping")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TaxationPaymentMapping : global::System.Data.DataSet {
        
        private TaxPaymentMapDataTable tableTaxPaymentMap;
        
        private PaymentCodeDataTable tablePaymentCode;
        
        private TaxPaymentDataTable tableTaxPayment;
        
        private global::System.Data.DataRelation relationPaymentCode_TaxPaymentMap;
        
        private global::System.Data.DataRelation relationTaxPayment_TaxPaymentMap;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TaxationPaymentMapping() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TaxationPaymentMapping(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TaxPaymentMap"] != null)) {
                    base.Tables.Add(new TaxPaymentMapDataTable(ds.Tables["TaxPaymentMap"]));
                }
                if ((ds.Tables["PaymentCode"] != null)) {
                    base.Tables.Add(new PaymentCodeDataTable(ds.Tables["PaymentCode"]));
                }
                if ((ds.Tables["TaxPayment"] != null)) {
                    base.Tables.Add(new TaxPaymentDataTable(ds.Tables["TaxPayment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxPaymentMapDataTable TaxPaymentMap {
            get {
                return this.tableTaxPaymentMap;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentCodeDataTable PaymentCode {
            get {
                return this.tablePaymentCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxPaymentDataTable TaxPayment {
            get {
                return this.tableTaxPayment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TaxationPaymentMapping cln = ((TaxationPaymentMapping)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TaxPaymentMap"] != null)) {
                    base.Tables.Add(new TaxPaymentMapDataTable(ds.Tables["TaxPaymentMap"]));
                }
                if ((ds.Tables["PaymentCode"] != null)) {
                    base.Tables.Add(new PaymentCodeDataTable(ds.Tables["PaymentCode"]));
                }
                if ((ds.Tables["TaxPayment"] != null)) {
                    base.Tables.Add(new TaxPaymentDataTable(ds.Tables["TaxPayment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTaxPaymentMap = ((TaxPaymentMapDataTable)(base.Tables["TaxPaymentMap"]));
            if ((initTable == true)) {
                if ((this.tableTaxPaymentMap != null)) {
                    this.tableTaxPaymentMap.InitVars();
                }
            }
            this.tablePaymentCode = ((PaymentCodeDataTable)(base.Tables["PaymentCode"]));
            if ((initTable == true)) {
                if ((this.tablePaymentCode != null)) {
                    this.tablePaymentCode.InitVars();
                }
            }
            this.tableTaxPayment = ((TaxPaymentDataTable)(base.Tables["TaxPayment"]));
            if ((initTable == true)) {
                if ((this.tableTaxPayment != null)) {
                    this.tableTaxPayment.InitVars();
                }
            }
            this.relationPaymentCode_TaxPaymentMap = this.Relations["PaymentCode_TaxPaymentMap"];
            this.relationTaxPayment_TaxPaymentMap = this.Relations["TaxPayment_TaxPaymentMap"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TaxationPaymentMapping";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTaxPaymentMap = new TaxPaymentMapDataTable();
            base.Tables.Add(this.tableTaxPaymentMap);
            this.tablePaymentCode = new PaymentCodeDataTable();
            base.Tables.Add(this.tablePaymentCode);
            this.tableTaxPayment = new TaxPaymentDataTable();
            base.Tables.Add(this.tableTaxPayment);
            this.relationPaymentCode_TaxPaymentMap = new global::System.Data.DataRelation("PaymentCode_TaxPaymentMap", new global::System.Data.DataColumn[] {
                        this.tablePaymentCode.PaymentCodeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableTaxPaymentMap.PaymentCodeIDColumn}, false);
            this.Relations.Add(this.relationPaymentCode_TaxPaymentMap);
            this.relationTaxPayment_TaxPaymentMap = new global::System.Data.DataRelation("TaxPayment_TaxPaymentMap", new global::System.Data.DataColumn[] {
                        this.tableTaxPayment.TaxPayIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableTaxPaymentMap.TaxPayIDColumn}, false);
            this.Relations.Add(this.relationTaxPayment_TaxPaymentMap);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTaxPaymentMap() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaymentCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTaxPayment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TaxationPaymentMapping ds = new TaxationPaymentMapping();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TaxPaymentMapRowChangeEventHandler(object sender, TaxPaymentMapRowChangeEvent e);
        
        public delegate void PaymentCodeRowChangeEventHandler(object sender, PaymentCodeRowChangeEvent e);
        
        public delegate void TaxPaymentRowChangeEventHandler(object sender, TaxPaymentRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaxPaymentMapDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTaxPayMapID;
            
            private global::System.Data.DataColumn columnTaxPayID;
            
            private global::System.Data.DataColumn columnPaymentCodeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapDataTable() {
                this.TableName = "TaxPaymentMap";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxPaymentMapDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TaxPaymentMapDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPayMapIDColumn {
                get {
                    return this.columnTaxPayMapID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPayIDColumn {
                get {
                    return this.columnTaxPayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIDColumn {
                get {
                    return this.columnPaymentCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapRow this[int index] {
                get {
                    return ((TaxPaymentMapRow)(this.Rows[index]));
                }
            }
            
            public event TaxPaymentMapRowChangeEventHandler TaxPaymentMapRowChanging;
            
            public event TaxPaymentMapRowChangeEventHandler TaxPaymentMapRowChanged;
            
            public event TaxPaymentMapRowChangeEventHandler TaxPaymentMapRowDeleting;
            
            public event TaxPaymentMapRowChangeEventHandler TaxPaymentMapRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTaxPaymentMapRow(TaxPaymentMapRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapRow AddTaxPaymentMapRow(TaxPaymentRow parentTaxPaymentRowByTaxPayment_TaxPaymentMap, PaymentCodeRow parentPaymentCodeRowByPaymentCode_TaxPaymentMap) {
                TaxPaymentMapRow rowTaxPaymentMapRow = ((TaxPaymentMapRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null};
                if ((parentTaxPaymentRowByTaxPayment_TaxPaymentMap != null)) {
                    columnValuesArray[1] = parentTaxPaymentRowByTaxPayment_TaxPaymentMap[0];
                }
                if ((parentPaymentCodeRowByPaymentCode_TaxPaymentMap != null)) {
                    columnValuesArray[2] = parentPaymentCodeRowByPaymentCode_TaxPaymentMap[0];
                }
                rowTaxPaymentMapRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTaxPaymentMapRow);
                return rowTaxPaymentMapRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapRow FindByTaxPayMapID(int TaxPayMapID) {
                return ((TaxPaymentMapRow)(this.Rows.Find(new object[] {
                            TaxPayMapID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TaxPaymentMapDataTable cln = ((TaxPaymentMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TaxPaymentMapDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTaxPayMapID = base.Columns["TaxPayMapID"];
                this.columnTaxPayID = base.Columns["TaxPayID"];
                this.columnPaymentCodeID = base.Columns["PaymentCodeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTaxPayMapID = new global::System.Data.DataColumn("TaxPayMapID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPayMapID);
                this.columnTaxPayID = new global::System.Data.DataColumn("TaxPayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPayID);
                this.columnPaymentCodeID = new global::System.Data.DataColumn("PaymentCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTaxPayMapID}, true));
                this.columnTaxPayMapID.AutoIncrement = true;
                this.columnTaxPayMapID.AllowDBNull = false;
                this.columnTaxPayMapID.ReadOnly = true;
                this.columnTaxPayMapID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapRow NewTaxPaymentMapRow() {
                return ((TaxPaymentMapRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TaxPaymentMapRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TaxPaymentMapRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxPaymentMapRowChanged != null)) {
                    this.TaxPaymentMapRowChanged(this, new TaxPaymentMapRowChangeEvent(((TaxPaymentMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxPaymentMapRowChanging != null)) {
                    this.TaxPaymentMapRowChanging(this, new TaxPaymentMapRowChangeEvent(((TaxPaymentMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxPaymentMapRowDeleted != null)) {
                    this.TaxPaymentMapRowDeleted(this, new TaxPaymentMapRowChangeEvent(((TaxPaymentMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxPaymentMapRowDeleting != null)) {
                    this.TaxPaymentMapRowDeleting(this, new TaxPaymentMapRowChangeEvent(((TaxPaymentMapRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTaxPaymentMapRow(TaxPaymentMapRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TaxationPaymentMapping ds = new TaxationPaymentMapping();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaxPaymentMapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaymentCodeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPaymentCodeID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnPaymentCodeDesc;
            
            private global::System.Data.DataColumn columnPaymentTypeID;
            
            private global::System.Data.DataColumn columnPaymentCodeIsProrata;
            
            private global::System.Data.DataColumn columnPaymentCodeIsProrataLeave;
            
            private global::System.Data.DataColumn columnPaymentCodeIsMPF;
            
            private global::System.Data.DataColumn columnPaymentCodeIsTopUp;
            
            private global::System.Data.DataColumn columnPaymentCodeIsWages;
            
            private global::System.Data.DataColumn columnPaymentCodeIsORSO;
            
            private global::System.Data.DataColumn columnPaymentCodeDecimalPlace;
            
            private global::System.Data.DataColumn columnPaymentCodeRoundingRule;
            
            private global::System.Data.DataColumn columnPaymentCodeHideInPaySlip;
            
            private global::System.Data.DataColumn columnPaymentCodeDisplaySeqNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeDataTable() {
                this.TableName = "PaymentCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaymentCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIDColumn {
                get {
                    return this.columnPaymentCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDescColumn {
                get {
                    return this.columnPaymentCodeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentTypeIDColumn {
                get {
                    return this.columnPaymentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsProrataColumn {
                get {
                    return this.columnPaymentCodeIsProrata;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsProrataLeaveColumn {
                get {
                    return this.columnPaymentCodeIsProrataLeave;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsMPFColumn {
                get {
                    return this.columnPaymentCodeIsMPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsTopUpColumn {
                get {
                    return this.columnPaymentCodeIsTopUp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsWagesColumn {
                get {
                    return this.columnPaymentCodeIsWages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsORSOColumn {
                get {
                    return this.columnPaymentCodeIsORSO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDecimalPlaceColumn {
                get {
                    return this.columnPaymentCodeDecimalPlace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeRoundingRuleColumn {
                get {
                    return this.columnPaymentCodeRoundingRule;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeHideInPaySlipColumn {
                get {
                    return this.columnPaymentCodeHideInPaySlip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDisplaySeqNoColumn {
                get {
                    return this.columnPaymentCodeDisplaySeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow this[int index] {
                get {
                    return ((PaymentCodeRow)(this.Rows[index]));
                }
            }
            
            public event PaymentCodeRowChangeEventHandler PaymentCodeRowChanging;
            
            public event PaymentCodeRowChangeEventHandler PaymentCodeRowChanged;
            
            public event PaymentCodeRowChangeEventHandler PaymentCodeRowDeleting;
            
            public event PaymentCodeRowChangeEventHandler PaymentCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaymentCodeRow(PaymentCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow AddPaymentCodeRow(string PaymentCode, string PaymentCodeDesc, int PaymentTypeID, int PaymentCodeIsProrata, int PaymentCodeIsProrataLeave, int PaymentCodeIsMPF, int PaymentCodeIsTopUp, int PaymentCodeIsWages, int PaymentCodeIsORSO, int PaymentCodeDecimalPlace, string PaymentCodeRoundingRule, int PaymentCodeHideInPaySlip, int PaymentCodeDisplaySeqNo) {
                PaymentCodeRow rowPaymentCodeRow = ((PaymentCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PaymentCode,
                        PaymentCodeDesc,
                        PaymentTypeID,
                        PaymentCodeIsProrata,
                        PaymentCodeIsProrataLeave,
                        PaymentCodeIsMPF,
                        PaymentCodeIsTopUp,
                        PaymentCodeIsWages,
                        PaymentCodeIsORSO,
                        PaymentCodeDecimalPlace,
                        PaymentCodeRoundingRule,
                        PaymentCodeHideInPaySlip,
                        PaymentCodeDisplaySeqNo};
                rowPaymentCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaymentCodeRow);
                return rowPaymentCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow FindByPaymentCodeID(int PaymentCodeID) {
                return ((PaymentCodeRow)(this.Rows.Find(new object[] {
                            PaymentCodeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaymentCodeDataTable cln = ((PaymentCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaymentCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPaymentCodeID = base.Columns["PaymentCodeID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnPaymentCodeDesc = base.Columns["PaymentCodeDesc"];
                this.columnPaymentTypeID = base.Columns["PaymentTypeID"];
                this.columnPaymentCodeIsProrata = base.Columns["PaymentCodeIsProrata"];
                this.columnPaymentCodeIsProrataLeave = base.Columns["PaymentCodeIsProrataLeave"];
                this.columnPaymentCodeIsMPF = base.Columns["PaymentCodeIsMPF"];
                this.columnPaymentCodeIsTopUp = base.Columns["PaymentCodeIsTopUp"];
                this.columnPaymentCodeIsWages = base.Columns["PaymentCodeIsWages"];
                this.columnPaymentCodeIsORSO = base.Columns["PaymentCodeIsORSO"];
                this.columnPaymentCodeDecimalPlace = base.Columns["PaymentCodeDecimalPlace"];
                this.columnPaymentCodeRoundingRule = base.Columns["PaymentCodeRoundingRule"];
                this.columnPaymentCodeHideInPaySlip = base.Columns["PaymentCodeHideInPaySlip"];
                this.columnPaymentCodeDisplaySeqNo = base.Columns["PaymentCodeDisplaySeqNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPaymentCodeID = new global::System.Data.DataColumn("PaymentCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnPaymentCodeDesc = new global::System.Data.DataColumn("PaymentCodeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDesc);
                this.columnPaymentTypeID = new global::System.Data.DataColumn("PaymentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentTypeID);
                this.columnPaymentCodeIsProrata = new global::System.Data.DataColumn("PaymentCodeIsProrata", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsProrata);
                this.columnPaymentCodeIsProrataLeave = new global::System.Data.DataColumn("PaymentCodeIsProrataLeave", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsProrataLeave);
                this.columnPaymentCodeIsMPF = new global::System.Data.DataColumn("PaymentCodeIsMPF", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsMPF);
                this.columnPaymentCodeIsTopUp = new global::System.Data.DataColumn("PaymentCodeIsTopUp", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsTopUp);
                this.columnPaymentCodeIsWages = new global::System.Data.DataColumn("PaymentCodeIsWages", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsWages);
                this.columnPaymentCodeIsORSO = new global::System.Data.DataColumn("PaymentCodeIsORSO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsORSO);
                this.columnPaymentCodeDecimalPlace = new global::System.Data.DataColumn("PaymentCodeDecimalPlace", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDecimalPlace);
                this.columnPaymentCodeRoundingRule = new global::System.Data.DataColumn("PaymentCodeRoundingRule", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeRoundingRule);
                this.columnPaymentCodeHideInPaySlip = new global::System.Data.DataColumn("PaymentCodeHideInPaySlip", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeHideInPaySlip);
                this.columnPaymentCodeDisplaySeqNo = new global::System.Data.DataColumn("PaymentCodeDisplaySeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDisplaySeqNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPaymentCodeID}, true));
                this.columnPaymentCodeID.AutoIncrement = true;
                this.columnPaymentCodeID.AllowDBNull = false;
                this.columnPaymentCodeID.ReadOnly = true;
                this.columnPaymentCodeID.Unique = true;
                this.columnPaymentCode.MaxLength = 200;
                this.columnPaymentCodeDesc.MaxLength = 100;
                this.columnPaymentTypeID.AllowDBNull = false;
                this.columnPaymentCodeRoundingRule.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow NewPaymentCodeRow() {
                return ((PaymentCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaymentCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaymentCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentCodeRowChanged != null)) {
                    this.PaymentCodeRowChanged(this, new PaymentCodeRowChangeEvent(((PaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentCodeRowChanging != null)) {
                    this.PaymentCodeRowChanging(this, new PaymentCodeRowChangeEvent(((PaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentCodeRowDeleted != null)) {
                    this.PaymentCodeRowDeleted(this, new PaymentCodeRowChangeEvent(((PaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentCodeRowDeleting != null)) {
                    this.PaymentCodeRowDeleting(this, new PaymentCodeRowChangeEvent(((PaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaymentCodeRow(PaymentCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TaxationPaymentMapping ds = new TaxationPaymentMapping();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaxPaymentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTaxPayID;
            
            private global::System.Data.DataColumn columnTaxFormType;
            
            private global::System.Data.DataColumn columnTaxPayCode;
            
            private global::System.Data.DataColumn columnTaxPayDesc;
            
            private global::System.Data.DataColumn columnTaxPayNature;
            
            private global::System.Data.DataColumn columnTaxPayIsShowNature;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentDataTable() {
                this.TableName = "TaxPayment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxPaymentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TaxPaymentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPayIDColumn {
                get {
                    return this.columnTaxPayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxFormTypeColumn {
                get {
                    return this.columnTaxFormType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPayCodeColumn {
                get {
                    return this.columnTaxPayCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPayDescColumn {
                get {
                    return this.columnTaxPayDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPayNatureColumn {
                get {
                    return this.columnTaxPayNature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPayIsShowNatureColumn {
                get {
                    return this.columnTaxPayIsShowNature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentRow this[int index] {
                get {
                    return ((TaxPaymentRow)(this.Rows[index]));
                }
            }
            
            public event TaxPaymentRowChangeEventHandler TaxPaymentRowChanging;
            
            public event TaxPaymentRowChangeEventHandler TaxPaymentRowChanged;
            
            public event TaxPaymentRowChangeEventHandler TaxPaymentRowDeleting;
            
            public event TaxPaymentRowChangeEventHandler TaxPaymentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTaxPaymentRow(TaxPaymentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentRow AddTaxPaymentRow(string TaxFormType, string TaxPayCode, string TaxPayDesc, string TaxPayNature, string TaxPayIsShowNature) {
                TaxPaymentRow rowTaxPaymentRow = ((TaxPaymentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TaxFormType,
                        TaxPayCode,
                        TaxPayDesc,
                        TaxPayNature,
                        TaxPayIsShowNature};
                rowTaxPaymentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTaxPaymentRow);
                return rowTaxPaymentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentRow FindByTaxPayID(int TaxPayID) {
                return ((TaxPaymentRow)(this.Rows.Find(new object[] {
                            TaxPayID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TaxPaymentDataTable cln = ((TaxPaymentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TaxPaymentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTaxPayID = base.Columns["TaxPayID"];
                this.columnTaxFormType = base.Columns["TaxFormType"];
                this.columnTaxPayCode = base.Columns["TaxPayCode"];
                this.columnTaxPayDesc = base.Columns["TaxPayDesc"];
                this.columnTaxPayNature = base.Columns["TaxPayNature"];
                this.columnTaxPayIsShowNature = base.Columns["TaxPayIsShowNature"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTaxPayID = new global::System.Data.DataColumn("TaxPayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPayID);
                this.columnTaxFormType = new global::System.Data.DataColumn("TaxFormType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxFormType);
                this.columnTaxPayCode = new global::System.Data.DataColumn("TaxPayCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPayCode);
                this.columnTaxPayDesc = new global::System.Data.DataColumn("TaxPayDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPayDesc);
                this.columnTaxPayNature = new global::System.Data.DataColumn("TaxPayNature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPayNature);
                this.columnTaxPayIsShowNature = new global::System.Data.DataColumn("TaxPayIsShowNature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPayIsShowNature);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTaxPayID}, true));
                this.columnTaxPayID.AutoIncrement = true;
                this.columnTaxPayID.AllowDBNull = false;
                this.columnTaxPayID.ReadOnly = true;
                this.columnTaxPayID.Unique = true;
                this.columnTaxFormType.MaxLength = 1;
                this.columnTaxPayCode.MaxLength = 10;
                this.columnTaxPayDesc.MaxLength = 200;
                this.columnTaxPayNature.MaxLength = 35;
                this.columnTaxPayIsShowNature.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentRow NewTaxPaymentRow() {
                return ((TaxPaymentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TaxPaymentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TaxPaymentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxPaymentRowChanged != null)) {
                    this.TaxPaymentRowChanged(this, new TaxPaymentRowChangeEvent(((TaxPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxPaymentRowChanging != null)) {
                    this.TaxPaymentRowChanging(this, new TaxPaymentRowChangeEvent(((TaxPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxPaymentRowDeleted != null)) {
                    this.TaxPaymentRowDeleted(this, new TaxPaymentRowChangeEvent(((TaxPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxPaymentRowDeleting != null)) {
                    this.TaxPaymentRowDeleting(this, new TaxPaymentRowChangeEvent(((TaxPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTaxPaymentRow(TaxPaymentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TaxationPaymentMapping ds = new TaxationPaymentMapping();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaxPaymentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TaxPaymentMapRow : global::System.Data.DataRow {
            
            private TaxPaymentMapDataTable tableTaxPaymentMap;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxPaymentMapRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaxPaymentMap = ((TaxPaymentMapDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaxPayMapID {
                get {
                    return ((int)(this[this.tableTaxPaymentMap.TaxPayMapIDColumn]));
                }
                set {
                    this[this.tableTaxPaymentMap.TaxPayMapIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaxPayID {
                get {
                    try {
                        return ((int)(this[this.tableTaxPaymentMap.TaxPayIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPayID\' in table \'TaxPaymentMap\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxPaymentMap.TaxPayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeID {
                get {
                    try {
                        return ((int)(this[this.tableTaxPaymentMap.PaymentCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeID\' in table \'TaxPaymentMap\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxPaymentMap.PaymentCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow PaymentCodeRow {
                get {
                    return ((PaymentCodeRow)(this.GetParentRow(this.Table.ParentRelations["PaymentCode_TaxPaymentMap"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PaymentCode_TaxPaymentMap"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentRow TaxPaymentRow {
                get {
                    return ((TaxPaymentRow)(this.GetParentRow(this.Table.ParentRelations["TaxPayment_TaxPaymentMap"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TaxPayment_TaxPaymentMap"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayIDNull() {
                return this.IsNull(this.tableTaxPaymentMap.TaxPayIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPayIDNull() {
                this[this.tableTaxPaymentMap.TaxPayIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIDNull() {
                return this.IsNull(this.tableTaxPaymentMap.PaymentCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIDNull() {
                this[this.tableTaxPaymentMap.PaymentCodeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaymentCodeRow : global::System.Data.DataRow {
            
            private PaymentCodeDataTable tablePaymentCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentCode = ((PaymentCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeID {
                get {
                    return ((int)(this[this.tablePaymentCode.PaymentCodeIDColumn]));
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tablePaymentCode.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCodeDesc {
                get {
                    try {
                        return ((string)(this[this.tablePaymentCode.PaymentCodeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDesc\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentTypeID {
                get {
                    return ((int)(this[this.tablePaymentCode.PaymentTypeIDColumn]));
                }
                set {
                    this[this.tablePaymentCode.PaymentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsProrata {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeIsProrataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsProrata\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeIsProrataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsProrataLeave {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeIsProrataLeaveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsProrataLeave\' in table \'PaymentCode\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeIsProrataLeaveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsMPF {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeIsMPFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsMPF\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeIsMPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsTopUp {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeIsTopUpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsTopUp\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeIsTopUpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsWages {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeIsWagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsWages\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeIsWagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeIsORSO {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeIsORSOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsORSO\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeIsORSOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeDecimalPlace {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeDecimalPlaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDecimalPlace\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeDecimalPlaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCodeRoundingRule {
                get {
                    try {
                        return ((string)(this[this.tablePaymentCode.PaymentCodeRoundingRuleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeRoundingRule\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeRoundingRuleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeHideInPaySlip {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeHideInPaySlipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeHideInPaySlip\' in table \'PaymentCode\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeHideInPaySlipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeDisplaySeqNo {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeDisplaySeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDisplaySeqNo\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeDisplaySeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tablePaymentCode.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDescNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDescNull() {
                this[this.tablePaymentCode.PaymentCodeDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsProrataNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeIsProrataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsProrataNull() {
                this[this.tablePaymentCode.PaymentCodeIsProrataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsProrataLeaveNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeIsProrataLeaveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsProrataLeaveNull() {
                this[this.tablePaymentCode.PaymentCodeIsProrataLeaveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsMPFNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeIsMPFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsMPFNull() {
                this[this.tablePaymentCode.PaymentCodeIsMPFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsTopUpNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeIsTopUpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsTopUpNull() {
                this[this.tablePaymentCode.PaymentCodeIsTopUpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsWagesNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeIsWagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsWagesNull() {
                this[this.tablePaymentCode.PaymentCodeIsWagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsORSONull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeIsORSOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsORSONull() {
                this[this.tablePaymentCode.PaymentCodeIsORSOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDecimalPlaceNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeDecimalPlaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDecimalPlaceNull() {
                this[this.tablePaymentCode.PaymentCodeDecimalPlaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeRoundingRuleNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeRoundingRuleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeRoundingRuleNull() {
                this[this.tablePaymentCode.PaymentCodeRoundingRuleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeHideInPaySlipNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeHideInPaySlipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeHideInPaySlipNull() {
                this[this.tablePaymentCode.PaymentCodeHideInPaySlipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDisplaySeqNoNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeDisplaySeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDisplaySeqNoNull() {
                this[this.tablePaymentCode.PaymentCodeDisplaySeqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapRow[] GetTaxPaymentMapRows() {
                if ((this.Table.ChildRelations["PaymentCode_TaxPaymentMap"] == null)) {
                    return new TaxPaymentMapRow[0];
                }
                else {
                    return ((TaxPaymentMapRow[])(base.GetChildRows(this.Table.ChildRelations["PaymentCode_TaxPaymentMap"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TaxPaymentRow : global::System.Data.DataRow {
            
            private TaxPaymentDataTable tableTaxPayment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxPaymentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaxPayment = ((TaxPaymentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaxPayID {
                get {
                    return ((int)(this[this.tableTaxPayment.TaxPayIDColumn]));
                }
                set {
                    this[this.tableTaxPayment.TaxPayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxFormType {
                get {
                    try {
                        return ((string)(this[this.tableTaxPayment.TaxFormTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxFormType\' in table \'TaxPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxPayment.TaxFormTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxPayCode {
                get {
                    try {
                        return ((string)(this[this.tableTaxPayment.TaxPayCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPayCode\' in table \'TaxPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxPayment.TaxPayCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxPayDesc {
                get {
                    try {
                        return ((string)(this[this.tableTaxPayment.TaxPayDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPayDesc\' in table \'TaxPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxPayment.TaxPayDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxPayNature {
                get {
                    try {
                        return ((string)(this[this.tableTaxPayment.TaxPayNatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPayNature\' in table \'TaxPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxPayment.TaxPayNatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxPayIsShowNature {
                get {
                    try {
                        return ((string)(this[this.tableTaxPayment.TaxPayIsShowNatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPayIsShowNature\' in table \'TaxPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxPayment.TaxPayIsShowNatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxFormTypeNull() {
                return this.IsNull(this.tableTaxPayment.TaxFormTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxFormTypeNull() {
                this[this.tableTaxPayment.TaxFormTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayCodeNull() {
                return this.IsNull(this.tableTaxPayment.TaxPayCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPayCodeNull() {
                this[this.tableTaxPayment.TaxPayCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayDescNull() {
                return this.IsNull(this.tableTaxPayment.TaxPayDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPayDescNull() {
                this[this.tableTaxPayment.TaxPayDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayNatureNull() {
                return this.IsNull(this.tableTaxPayment.TaxPayNatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPayNatureNull() {
                this[this.tableTaxPayment.TaxPayNatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayIsShowNatureNull() {
                return this.IsNull(this.tableTaxPayment.TaxPayIsShowNatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPayIsShowNatureNull() {
                this[this.tableTaxPayment.TaxPayIsShowNatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapRow[] GetTaxPaymentMapRows() {
                if ((this.Table.ChildRelations["TaxPayment_TaxPaymentMap"] == null)) {
                    return new TaxPaymentMapRow[0];
                }
                else {
                    return ((TaxPaymentMapRow[])(base.GetChildRows(this.Table.ChildRelations["TaxPayment_TaxPaymentMap"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TaxPaymentMapRowChangeEvent : global::System.EventArgs {
            
            private TaxPaymentMapRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapRowChangeEvent(TaxPaymentMapRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaymentCodeRowChangeEvent : global::System.EventArgs {
            
            private PaymentCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRowChangeEvent(PaymentCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TaxPaymentRowChangeEvent : global::System.EventArgs {
            
            private TaxPaymentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentRowChangeEvent(TaxPaymentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxPaymentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591