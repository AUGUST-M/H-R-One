//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.Reports.Payroll.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Payroll_MPFRemittanceStatement")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Payroll_MPFRemittanceStatement : global::System.Data.DataSet {
        
        private ExistingMemberDataTable tableExistingMember;
        
        private NewJoinMemberDataTable tableNewJoinMember;
        
        private AdditionalMemberDataTable tableAdditionalMember;
        
        private MPFPlanDataTable tableMPFPlan;
        
        private MPFSchemeDataTable tableMPFScheme;
        
        private global::System.Data.DataRelation relationMPFSchemeID_MPFPlan;
        
        private global::System.Data.DataRelation relationMPFPlan_ExistingMember;
        
        private global::System.Data.DataRelation relationMPFPlan_NewJoinMember;
        
        private global::System.Data.DataRelation relationMPFPlan_AdditionalMember;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Payroll_MPFRemittanceStatement() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Payroll_MPFRemittanceStatement(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ExistingMember"] != null)) {
                    base.Tables.Add(new ExistingMemberDataTable(ds.Tables["ExistingMember"]));
                }
                if ((ds.Tables["NewJoinMember"] != null)) {
                    base.Tables.Add(new NewJoinMemberDataTable(ds.Tables["NewJoinMember"]));
                }
                if ((ds.Tables["AdditionalMember"] != null)) {
                    base.Tables.Add(new AdditionalMemberDataTable(ds.Tables["AdditionalMember"]));
                }
                if ((ds.Tables["MPFPlan"] != null)) {
                    base.Tables.Add(new MPFPlanDataTable(ds.Tables["MPFPlan"]));
                }
                if ((ds.Tables["MPFScheme"] != null)) {
                    base.Tables.Add(new MPFSchemeDataTable(ds.Tables["MPFScheme"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExistingMemberDataTable ExistingMember {
            get {
                return this.tableExistingMember;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NewJoinMemberDataTable NewJoinMember {
            get {
                return this.tableNewJoinMember;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdditionalMemberDataTable AdditionalMember {
            get {
                return this.tableAdditionalMember;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MPFPlanDataTable MPFPlan {
            get {
                return this.tableMPFPlan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MPFSchemeDataTable MPFScheme {
            get {
                return this.tableMPFScheme;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Payroll_MPFRemittanceStatement cln = ((Payroll_MPFRemittanceStatement)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ExistingMember"] != null)) {
                    base.Tables.Add(new ExistingMemberDataTable(ds.Tables["ExistingMember"]));
                }
                if ((ds.Tables["NewJoinMember"] != null)) {
                    base.Tables.Add(new NewJoinMemberDataTable(ds.Tables["NewJoinMember"]));
                }
                if ((ds.Tables["AdditionalMember"] != null)) {
                    base.Tables.Add(new AdditionalMemberDataTable(ds.Tables["AdditionalMember"]));
                }
                if ((ds.Tables["MPFPlan"] != null)) {
                    base.Tables.Add(new MPFPlanDataTable(ds.Tables["MPFPlan"]));
                }
                if ((ds.Tables["MPFScheme"] != null)) {
                    base.Tables.Add(new MPFSchemeDataTable(ds.Tables["MPFScheme"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableExistingMember = ((ExistingMemberDataTable)(base.Tables["ExistingMember"]));
            if ((initTable == true)) {
                if ((this.tableExistingMember != null)) {
                    this.tableExistingMember.InitVars();
                }
            }
            this.tableNewJoinMember = ((NewJoinMemberDataTable)(base.Tables["NewJoinMember"]));
            if ((initTable == true)) {
                if ((this.tableNewJoinMember != null)) {
                    this.tableNewJoinMember.InitVars();
                }
            }
            this.tableAdditionalMember = ((AdditionalMemberDataTable)(base.Tables["AdditionalMember"]));
            if ((initTable == true)) {
                if ((this.tableAdditionalMember != null)) {
                    this.tableAdditionalMember.InitVars();
                }
            }
            this.tableMPFPlan = ((MPFPlanDataTable)(base.Tables["MPFPlan"]));
            if ((initTable == true)) {
                if ((this.tableMPFPlan != null)) {
                    this.tableMPFPlan.InitVars();
                }
            }
            this.tableMPFScheme = ((MPFSchemeDataTable)(base.Tables["MPFScheme"]));
            if ((initTable == true)) {
                if ((this.tableMPFScheme != null)) {
                    this.tableMPFScheme.InitVars();
                }
            }
            this.relationMPFSchemeID_MPFPlan = this.Relations["MPFSchemeID_MPFPlan"];
            this.relationMPFPlan_ExistingMember = this.Relations["MPFPlan_ExistingMember"];
            this.relationMPFPlan_NewJoinMember = this.Relations["MPFPlan_NewJoinMember"];
            this.relationMPFPlan_AdditionalMember = this.Relations["MPFPlan_AdditionalMember"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Payroll_MPFRemittanceStatement";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Payroll_MPFRemittanceStatement.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableExistingMember = new ExistingMemberDataTable();
            base.Tables.Add(this.tableExistingMember);
            this.tableNewJoinMember = new NewJoinMemberDataTable();
            base.Tables.Add(this.tableNewJoinMember);
            this.tableAdditionalMember = new AdditionalMemberDataTable();
            base.Tables.Add(this.tableAdditionalMember);
            this.tableMPFPlan = new MPFPlanDataTable();
            base.Tables.Add(this.tableMPFPlan);
            this.tableMPFScheme = new MPFSchemeDataTable();
            base.Tables.Add(this.tableMPFScheme);
            this.relationMPFSchemeID_MPFPlan = new global::System.Data.DataRelation("MPFSchemeID_MPFPlan", new global::System.Data.DataColumn[] {
                        this.tableMPFScheme.MPFSchemeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableMPFPlan.MPFSchemeIDColumn}, false);
            this.Relations.Add(this.relationMPFSchemeID_MPFPlan);
            this.relationMPFPlan_ExistingMember = new global::System.Data.DataRelation("MPFPlan_ExistingMember", new global::System.Data.DataColumn[] {
                        this.tableMPFPlan.MPFPlanIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableExistingMember.MPFPlanIDColumn}, false);
            this.Relations.Add(this.relationMPFPlan_ExistingMember);
            this.relationMPFPlan_NewJoinMember = new global::System.Data.DataRelation("MPFPlan_NewJoinMember", new global::System.Data.DataColumn[] {
                        this.tableMPFPlan.MPFPlanIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableNewJoinMember.MPFPlanIDColumn}, false);
            this.Relations.Add(this.relationMPFPlan_NewJoinMember);
            this.relationMPFPlan_AdditionalMember = new global::System.Data.DataRelation("MPFPlan_AdditionalMember", new global::System.Data.DataColumn[] {
                        this.tableMPFPlan.MPFPlanIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableAdditionalMember.MPFPlanIDColumn}, false);
            this.Relations.Add(this.relationMPFPlan_AdditionalMember);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExistingMember() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNewJoinMember() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdditionalMember() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMPFPlan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMPFScheme() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Payroll_MPFRemittanceStatement ds = new Payroll_MPFRemittanceStatement();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ExistingMemberRowChangeEventHandler(object sender, ExistingMemberRowChangeEvent e);
        
        public delegate void NewJoinMemberRowChangeEventHandler(object sender, NewJoinMemberRowChangeEvent e);
        
        public delegate void AdditionalMemberRowChangeEventHandler(object sender, AdditionalMemberRowChangeEvent e);
        
        public delegate void MPFPlanRowChangeEventHandler(object sender, MPFPlanRowChangeEvent e);
        
        public delegate void MPFSchemeRowChangeEventHandler(object sender, MPFSchemeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExistingMemberDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnMPFPlanID;
            
            private global::System.Data.DataColumn columnEmpNo;
            
            private global::System.Data.DataColumn columnEmpName;
            
            private global::System.Data.DataColumn columnHKID;
            
            private global::System.Data.DataColumn columnPeriodFrom;
            
            private global::System.Data.DataColumn columnPeriodTo;
            
            private global::System.Data.DataColumn columnRelevantIncome;
            
            private global::System.Data.DataColumn columnMCER;
            
            private global::System.Data.DataColumn columnMCEE;
            
            private global::System.Data.DataColumn columnVCER;
            
            private global::System.Data.DataColumn columnVCEE;
            
            private global::System.Data.DataColumn columnLastEmploymentDate;
            
            private global::System.Data.DataColumn columnTermCode;
            
            private global::System.Data.DataColumn columnIsLSP;
            
            private global::System.Data.DataColumn columnIsSP;
            
            private global::System.Data.DataColumn columnLSPSPAmount;
            
            private global::System.Data.DataColumn columnLSPSPAmountPaidByER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExistingMemberDataTable() {
                this.TableName = "ExistingMember";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExistingMemberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExistingMemberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanIDColumn {
                get {
                    return this.columnMPFPlanID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoColumn {
                get {
                    return this.columnEmpNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNameColumn {
                get {
                    return this.columnEmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HKIDColumn {
                get {
                    return this.columnHKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodFromColumn {
                get {
                    return this.columnPeriodFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodToColumn {
                get {
                    return this.columnPeriodTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelevantIncomeColumn {
                get {
                    return this.columnRelevantIncome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCERColumn {
                get {
                    return this.columnMCER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCEEColumn {
                get {
                    return this.columnMCEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VCERColumn {
                get {
                    return this.columnVCER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VCEEColumn {
                get {
                    return this.columnVCEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastEmploymentDateColumn {
                get {
                    return this.columnLastEmploymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TermCodeColumn {
                get {
                    return this.columnTermCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsLSPColumn {
                get {
                    return this.columnIsLSP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSPColumn {
                get {
                    return this.columnIsSP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LSPSPAmountColumn {
                get {
                    return this.columnLSPSPAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LSPSPAmountPaidByERColumn {
                get {
                    return this.columnLSPSPAmountPaidByER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExistingMemberRow this[int index] {
                get {
                    return ((ExistingMemberRow)(this.Rows[index]));
                }
            }
            
            public event ExistingMemberRowChangeEventHandler ExistingMemberRowChanging;
            
            public event ExistingMemberRowChangeEventHandler ExistingMemberRowChanged;
            
            public event ExistingMemberRowChangeEventHandler ExistingMemberRowDeleting;
            
            public event ExistingMemberRowChangeEventHandler ExistingMemberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExistingMemberRow(ExistingMemberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExistingMemberRow AddExistingMemberRow(
                        int EmpID, 
                        MPFPlanRow parentMPFPlanRowByMPFPlan_ExistingMember, 
                        string EmpNo, 
                        string EmpName, 
                        string HKID, 
                        System.DateTime PeriodFrom, 
                        System.DateTime PeriodTo, 
                        double RelevantIncome, 
                        double MCER, 
                        double MCEE, 
                        double VCER, 
                        double VCEE, 
                        System.DateTime LastEmploymentDate, 
                        string TermCode, 
                        bool IsLSP, 
                        bool IsSP, 
                        double LSPSPAmount, 
                        double LSPSPAmountPaidByER) {
                ExistingMemberRow rowExistingMemberRow = ((ExistingMemberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpID,
                        null,
                        EmpNo,
                        EmpName,
                        HKID,
                        PeriodFrom,
                        PeriodTo,
                        RelevantIncome,
                        MCER,
                        MCEE,
                        VCER,
                        VCEE,
                        LastEmploymentDate,
                        TermCode,
                        IsLSP,
                        IsSP,
                        LSPSPAmount,
                        LSPSPAmountPaidByER};
                if ((parentMPFPlanRowByMPFPlan_ExistingMember != null)) {
                    columnValuesArray[1] = parentMPFPlanRowByMPFPlan_ExistingMember[0];
                }
                rowExistingMemberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExistingMemberRow);
                return rowExistingMemberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExistingMemberDataTable cln = ((ExistingMemberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExistingMemberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnMPFPlanID = base.Columns["MPFPlanID"];
                this.columnEmpNo = base.Columns["EmpNo"];
                this.columnEmpName = base.Columns["EmpName"];
                this.columnHKID = base.Columns["HKID"];
                this.columnPeriodFrom = base.Columns["PeriodFrom"];
                this.columnPeriodTo = base.Columns["PeriodTo"];
                this.columnRelevantIncome = base.Columns["RelevantIncome"];
                this.columnMCER = base.Columns["MCER"];
                this.columnMCEE = base.Columns["MCEE"];
                this.columnVCER = base.Columns["VCER"];
                this.columnVCEE = base.Columns["VCEE"];
                this.columnLastEmploymentDate = base.Columns["LastEmploymentDate"];
                this.columnTermCode = base.Columns["TermCode"];
                this.columnIsLSP = base.Columns["IsLSP"];
                this.columnIsSP = base.Columns["IsSP"];
                this.columnLSPSPAmount = base.Columns["LSPSPAmount"];
                this.columnLSPSPAmountPaidByER = base.Columns["LSPSPAmountPaidByER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnMPFPlanID = new global::System.Data.DataColumn("MPFPlanID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanID);
                this.columnEmpNo = new global::System.Data.DataColumn("EmpNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNo);
                this.columnEmpName = new global::System.Data.DataColumn("EmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpName);
                this.columnHKID = new global::System.Data.DataColumn("HKID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHKID);
                this.columnPeriodFrom = new global::System.Data.DataColumn("PeriodFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodFrom);
                this.columnPeriodTo = new global::System.Data.DataColumn("PeriodTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodTo);
                this.columnRelevantIncome = new global::System.Data.DataColumn("RelevantIncome", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelevantIncome);
                this.columnMCER = new global::System.Data.DataColumn("MCER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCER);
                this.columnMCEE = new global::System.Data.DataColumn("MCEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCEE);
                this.columnVCER = new global::System.Data.DataColumn("VCER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVCER);
                this.columnVCEE = new global::System.Data.DataColumn("VCEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVCEE);
                this.columnLastEmploymentDate = new global::System.Data.DataColumn("LastEmploymentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastEmploymentDate);
                this.columnTermCode = new global::System.Data.DataColumn("TermCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermCode);
                this.columnIsLSP = new global::System.Data.DataColumn("IsLSP", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLSP);
                this.columnIsSP = new global::System.Data.DataColumn("IsSP", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSP);
                this.columnLSPSPAmount = new global::System.Data.DataColumn("LSPSPAmount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLSPSPAmount);
                this.columnLSPSPAmountPaidByER = new global::System.Data.DataColumn("LSPSPAmountPaidByER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLSPSPAmountPaidByER);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExistingMemberRow NewExistingMemberRow() {
                return ((ExistingMemberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExistingMemberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExistingMemberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExistingMemberRowChanged != null)) {
                    this.ExistingMemberRowChanged(this, new ExistingMemberRowChangeEvent(((ExistingMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExistingMemberRowChanging != null)) {
                    this.ExistingMemberRowChanging(this, new ExistingMemberRowChangeEvent(((ExistingMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExistingMemberRowDeleted != null)) {
                    this.ExistingMemberRowDeleted(this, new ExistingMemberRowChangeEvent(((ExistingMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExistingMemberRowDeleting != null)) {
                    this.ExistingMemberRowDeleting(this, new ExistingMemberRowChangeEvent(((ExistingMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExistingMemberRow(ExistingMemberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_MPFRemittanceStatement ds = new Payroll_MPFRemittanceStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExistingMemberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NewJoinMemberDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnMPFPlanID;
            
            private global::System.Data.DataColumn columnEmpNo;
            
            private global::System.Data.DataColumn columnEmpSurname;
            
            private global::System.Data.DataColumn columnEmpOtherName;
            
            private global::System.Data.DataColumn columnSex;
            
            private global::System.Data.DataColumn columnDateOfBirth;
            
            private global::System.Data.DataColumn columnHKIDType;
            
            private global::System.Data.DataColumn columnHKID;
            
            private global::System.Data.DataColumn columnMemberType;
            
            private global::System.Data.DataColumn columnSchemeJoinDate;
            
            private global::System.Data.DataColumn columnClassNo;
            
            private global::System.Data.DataColumn columnPeriodFrom;
            
            private global::System.Data.DataColumn columnPeriodTo;
            
            private global::System.Data.DataColumn columnRelevantIncome;
            
            private global::System.Data.DataColumn columnMCER;
            
            private global::System.Data.DataColumn columnMCEE;
            
            private global::System.Data.DataColumn columnVCER;
            
            private global::System.Data.DataColumn columnVCEE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewJoinMemberDataTable() {
                this.TableName = "NewJoinMember";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NewJoinMemberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NewJoinMemberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanIDColumn {
                get {
                    return this.columnMPFPlanID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoColumn {
                get {
                    return this.columnEmpNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpSurnameColumn {
                get {
                    return this.columnEmpSurname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpOtherNameColumn {
                get {
                    return this.columnEmpOtherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOfBirthColumn {
                get {
                    return this.columnDateOfBirth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HKIDTypeColumn {
                get {
                    return this.columnHKIDType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HKIDColumn {
                get {
                    return this.columnHKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberTypeColumn {
                get {
                    return this.columnMemberType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchemeJoinDateColumn {
                get {
                    return this.columnSchemeJoinDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassNoColumn {
                get {
                    return this.columnClassNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodFromColumn {
                get {
                    return this.columnPeriodFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodToColumn {
                get {
                    return this.columnPeriodTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelevantIncomeColumn {
                get {
                    return this.columnRelevantIncome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCERColumn {
                get {
                    return this.columnMCER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCEEColumn {
                get {
                    return this.columnMCEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VCERColumn {
                get {
                    return this.columnVCER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VCEEColumn {
                get {
                    return this.columnVCEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewJoinMemberRow this[int index] {
                get {
                    return ((NewJoinMemberRow)(this.Rows[index]));
                }
            }
            
            public event NewJoinMemberRowChangeEventHandler NewJoinMemberRowChanging;
            
            public event NewJoinMemberRowChangeEventHandler NewJoinMemberRowChanged;
            
            public event NewJoinMemberRowChangeEventHandler NewJoinMemberRowDeleting;
            
            public event NewJoinMemberRowChangeEventHandler NewJoinMemberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNewJoinMemberRow(NewJoinMemberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewJoinMemberRow AddNewJoinMemberRow(
                        int EmpID, 
                        MPFPlanRow parentMPFPlanRowByMPFPlan_NewJoinMember, 
                        string EmpNo, 
                        string EmpSurname, 
                        string EmpOtherName, 
                        string Sex, 
                        System.DateTime DateOfBirth, 
                        int HKIDType, 
                        string HKID, 
                        int MemberType, 
                        System.DateTime SchemeJoinDate, 
                        string ClassNo, 
                        System.DateTime PeriodFrom, 
                        System.DateTime PeriodTo, 
                        double RelevantIncome, 
                        double MCER, 
                        double MCEE, 
                        double VCER, 
                        double VCEE) {
                NewJoinMemberRow rowNewJoinMemberRow = ((NewJoinMemberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpID,
                        null,
                        EmpNo,
                        EmpSurname,
                        EmpOtherName,
                        Sex,
                        DateOfBirth,
                        HKIDType,
                        HKID,
                        MemberType,
                        SchemeJoinDate,
                        ClassNo,
                        PeriodFrom,
                        PeriodTo,
                        RelevantIncome,
                        MCER,
                        MCEE,
                        VCER,
                        VCEE};
                if ((parentMPFPlanRowByMPFPlan_NewJoinMember != null)) {
                    columnValuesArray[1] = parentMPFPlanRowByMPFPlan_NewJoinMember[0];
                }
                rowNewJoinMemberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNewJoinMemberRow);
                return rowNewJoinMemberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NewJoinMemberDataTable cln = ((NewJoinMemberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NewJoinMemberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnMPFPlanID = base.Columns["MPFPlanID"];
                this.columnEmpNo = base.Columns["EmpNo"];
                this.columnEmpSurname = base.Columns["EmpSurname"];
                this.columnEmpOtherName = base.Columns["EmpOtherName"];
                this.columnSex = base.Columns["Sex"];
                this.columnDateOfBirth = base.Columns["DateOfBirth"];
                this.columnHKIDType = base.Columns["HKIDType"];
                this.columnHKID = base.Columns["HKID"];
                this.columnMemberType = base.Columns["MemberType"];
                this.columnSchemeJoinDate = base.Columns["SchemeJoinDate"];
                this.columnClassNo = base.Columns["ClassNo"];
                this.columnPeriodFrom = base.Columns["PeriodFrom"];
                this.columnPeriodTo = base.Columns["PeriodTo"];
                this.columnRelevantIncome = base.Columns["RelevantIncome"];
                this.columnMCER = base.Columns["MCER"];
                this.columnMCEE = base.Columns["MCEE"];
                this.columnVCER = base.Columns["VCER"];
                this.columnVCEE = base.Columns["VCEE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnMPFPlanID = new global::System.Data.DataColumn("MPFPlanID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanID);
                this.columnEmpNo = new global::System.Data.DataColumn("EmpNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNo);
                this.columnEmpSurname = new global::System.Data.DataColumn("EmpSurname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpSurname);
                this.columnEmpOtherName = new global::System.Data.DataColumn("EmpOtherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpOtherName);
                this.columnSex = new global::System.Data.DataColumn("Sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.columnDateOfBirth = new global::System.Data.DataColumn("DateOfBirth", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfBirth);
                this.columnHKIDType = new global::System.Data.DataColumn("HKIDType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHKIDType);
                this.columnHKID = new global::System.Data.DataColumn("HKID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHKID);
                this.columnMemberType = new global::System.Data.DataColumn("MemberType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberType);
                this.columnSchemeJoinDate = new global::System.Data.DataColumn("SchemeJoinDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemeJoinDate);
                this.columnClassNo = new global::System.Data.DataColumn("ClassNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassNo);
                this.columnPeriodFrom = new global::System.Data.DataColumn("PeriodFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodFrom);
                this.columnPeriodTo = new global::System.Data.DataColumn("PeriodTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodTo);
                this.columnRelevantIncome = new global::System.Data.DataColumn("RelevantIncome", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelevantIncome);
                this.columnMCER = new global::System.Data.DataColumn("MCER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCER);
                this.columnMCEE = new global::System.Data.DataColumn("MCEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCEE);
                this.columnVCER = new global::System.Data.DataColumn("VCER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVCER);
                this.columnVCEE = new global::System.Data.DataColumn("VCEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVCEE);
                this.columnEmpOtherName.Caption = "EmpName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewJoinMemberRow NewNewJoinMemberRow() {
                return ((NewJoinMemberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NewJoinMemberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NewJoinMemberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NewJoinMemberRowChanged != null)) {
                    this.NewJoinMemberRowChanged(this, new NewJoinMemberRowChangeEvent(((NewJoinMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NewJoinMemberRowChanging != null)) {
                    this.NewJoinMemberRowChanging(this, new NewJoinMemberRowChangeEvent(((NewJoinMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NewJoinMemberRowDeleted != null)) {
                    this.NewJoinMemberRowDeleted(this, new NewJoinMemberRowChangeEvent(((NewJoinMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NewJoinMemberRowDeleting != null)) {
                    this.NewJoinMemberRowDeleting(this, new NewJoinMemberRowChangeEvent(((NewJoinMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNewJoinMemberRow(NewJoinMemberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_MPFRemittanceStatement ds = new Payroll_MPFRemittanceStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NewJoinMemberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdditionalMemberDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnMPFPlanID;
            
            private global::System.Data.DataColumn columnEmpNo;
            
            private global::System.Data.DataColumn columnEmpName;
            
            private global::System.Data.DataColumn columnHKID;
            
            private global::System.Data.DataColumn columnPeriodFrom;
            
            private global::System.Data.DataColumn columnPeriodTo;
            
            private global::System.Data.DataColumn columnRelevantIncome;
            
            private global::System.Data.DataColumn columnMCER;
            
            private global::System.Data.DataColumn columnMCEE;
            
            private global::System.Data.DataColumn columnVCER;
            
            private global::System.Data.DataColumn columnVCEE;
            
            private global::System.Data.DataColumn columnLastEmploymentDate;
            
            private global::System.Data.DataColumn columnTermCode;
            
            private global::System.Data.DataColumn columnIsLSP;
            
            private global::System.Data.DataColumn columnIsSP;
            
            private global::System.Data.DataColumn columnLSPSPAmount;
            
            private global::System.Data.DataColumn columnLSPSPAmountPaidByER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalMemberDataTable() {
                this.TableName = "AdditionalMember";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdditionalMemberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdditionalMemberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanIDColumn {
                get {
                    return this.columnMPFPlanID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoColumn {
                get {
                    return this.columnEmpNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNameColumn {
                get {
                    return this.columnEmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HKIDColumn {
                get {
                    return this.columnHKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodFromColumn {
                get {
                    return this.columnPeriodFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodToColumn {
                get {
                    return this.columnPeriodTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelevantIncomeColumn {
                get {
                    return this.columnRelevantIncome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCERColumn {
                get {
                    return this.columnMCER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MCEEColumn {
                get {
                    return this.columnMCEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VCERColumn {
                get {
                    return this.columnVCER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VCEEColumn {
                get {
                    return this.columnVCEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastEmploymentDateColumn {
                get {
                    return this.columnLastEmploymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TermCodeColumn {
                get {
                    return this.columnTermCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsLSPColumn {
                get {
                    return this.columnIsLSP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSPColumn {
                get {
                    return this.columnIsSP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LSPSPAmountColumn {
                get {
                    return this.columnLSPSPAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LSPSPAmountPaidByERColumn {
                get {
                    return this.columnLSPSPAmountPaidByER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalMemberRow this[int index] {
                get {
                    return ((AdditionalMemberRow)(this.Rows[index]));
                }
            }
            
            public event AdditionalMemberRowChangeEventHandler AdditionalMemberRowChanging;
            
            public event AdditionalMemberRowChangeEventHandler AdditionalMemberRowChanged;
            
            public event AdditionalMemberRowChangeEventHandler AdditionalMemberRowDeleting;
            
            public event AdditionalMemberRowChangeEventHandler AdditionalMemberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdditionalMemberRow(AdditionalMemberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalMemberRow AddAdditionalMemberRow(
                        int EmpID, 
                        MPFPlanRow parentMPFPlanRowByMPFPlan_AdditionalMember, 
                        string EmpNo, 
                        string EmpName, 
                        string HKID, 
                        System.DateTime PeriodFrom, 
                        System.DateTime PeriodTo, 
                        double RelevantIncome, 
                        double MCER, 
                        double MCEE, 
                        double VCER, 
                        double VCEE, 
                        System.DateTime LastEmploymentDate, 
                        string TermCode, 
                        bool IsLSP, 
                        bool IsSP, 
                        double LSPSPAmount, 
                        double LSPSPAmountPaidByER) {
                AdditionalMemberRow rowAdditionalMemberRow = ((AdditionalMemberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpID,
                        null,
                        EmpNo,
                        EmpName,
                        HKID,
                        PeriodFrom,
                        PeriodTo,
                        RelevantIncome,
                        MCER,
                        MCEE,
                        VCER,
                        VCEE,
                        LastEmploymentDate,
                        TermCode,
                        IsLSP,
                        IsSP,
                        LSPSPAmount,
                        LSPSPAmountPaidByER};
                if ((parentMPFPlanRowByMPFPlan_AdditionalMember != null)) {
                    columnValuesArray[1] = parentMPFPlanRowByMPFPlan_AdditionalMember[0];
                }
                rowAdditionalMemberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdditionalMemberRow);
                return rowAdditionalMemberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AdditionalMemberDataTable cln = ((AdditionalMemberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdditionalMemberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnMPFPlanID = base.Columns["MPFPlanID"];
                this.columnEmpNo = base.Columns["EmpNo"];
                this.columnEmpName = base.Columns["EmpName"];
                this.columnHKID = base.Columns["HKID"];
                this.columnPeriodFrom = base.Columns["PeriodFrom"];
                this.columnPeriodTo = base.Columns["PeriodTo"];
                this.columnRelevantIncome = base.Columns["RelevantIncome"];
                this.columnMCER = base.Columns["MCER"];
                this.columnMCEE = base.Columns["MCEE"];
                this.columnVCER = base.Columns["VCER"];
                this.columnVCEE = base.Columns["VCEE"];
                this.columnLastEmploymentDate = base.Columns["LastEmploymentDate"];
                this.columnTermCode = base.Columns["TermCode"];
                this.columnIsLSP = base.Columns["IsLSP"];
                this.columnIsSP = base.Columns["IsSP"];
                this.columnLSPSPAmount = base.Columns["LSPSPAmount"];
                this.columnLSPSPAmountPaidByER = base.Columns["LSPSPAmountPaidByER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnMPFPlanID = new global::System.Data.DataColumn("MPFPlanID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanID);
                this.columnEmpNo = new global::System.Data.DataColumn("EmpNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNo);
                this.columnEmpName = new global::System.Data.DataColumn("EmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpName);
                this.columnHKID = new global::System.Data.DataColumn("HKID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHKID);
                this.columnPeriodFrom = new global::System.Data.DataColumn("PeriodFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodFrom);
                this.columnPeriodTo = new global::System.Data.DataColumn("PeriodTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodTo);
                this.columnRelevantIncome = new global::System.Data.DataColumn("RelevantIncome", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelevantIncome);
                this.columnMCER = new global::System.Data.DataColumn("MCER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCER);
                this.columnMCEE = new global::System.Data.DataColumn("MCEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMCEE);
                this.columnVCER = new global::System.Data.DataColumn("VCER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVCER);
                this.columnVCEE = new global::System.Data.DataColumn("VCEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVCEE);
                this.columnLastEmploymentDate = new global::System.Data.DataColumn("LastEmploymentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastEmploymentDate);
                this.columnTermCode = new global::System.Data.DataColumn("TermCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermCode);
                this.columnIsLSP = new global::System.Data.DataColumn("IsLSP", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLSP);
                this.columnIsSP = new global::System.Data.DataColumn("IsSP", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSP);
                this.columnLSPSPAmount = new global::System.Data.DataColumn("LSPSPAmount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLSPSPAmount);
                this.columnLSPSPAmountPaidByER = new global::System.Data.DataColumn("LSPSPAmountPaidByER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLSPSPAmountPaidByER);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalMemberRow NewAdditionalMemberRow() {
                return ((AdditionalMemberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdditionalMemberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AdditionalMemberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdditionalMemberRowChanged != null)) {
                    this.AdditionalMemberRowChanged(this, new AdditionalMemberRowChangeEvent(((AdditionalMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdditionalMemberRowChanging != null)) {
                    this.AdditionalMemberRowChanging(this, new AdditionalMemberRowChangeEvent(((AdditionalMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdditionalMemberRowDeleted != null)) {
                    this.AdditionalMemberRowDeleted(this, new AdditionalMemberRowChangeEvent(((AdditionalMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdditionalMemberRowDeleting != null)) {
                    this.AdditionalMemberRowDeleting(this, new AdditionalMemberRowChangeEvent(((AdditionalMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdditionalMemberRow(AdditionalMemberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_MPFRemittanceStatement ds = new Payroll_MPFRemittanceStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdditionalMemberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MPFPlanDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMPFPlanID;
            
            private global::System.Data.DataColumn columnMPFPlanCode;
            
            private global::System.Data.DataColumn columnMPFPlanDesc;
            
            private global::System.Data.DataColumn columnMPFPlanTrusteeName;
            
            private global::System.Data.DataColumn columnMPFPlanSchemeNo;
            
            private global::System.Data.DataColumn columnMPFPlanCompanyName;
            
            private global::System.Data.DataColumn columnMPFPlanCompanyAddress;
            
            private global::System.Data.DataColumn columnMPFPlanContactName;
            
            private global::System.Data.DataColumn columnMPFPlanContactNo;
            
            private global::System.Data.DataColumn columnMPFSchemeID;
            
            private global::System.Data.DataColumn columnMPFPlanParticipationNo;
            
            private global::System.Data.DataColumn columnMPFHSBCPayCenter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanDataTable() {
                this.TableName = "MPFPlan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MPFPlanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MPFPlanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanIDColumn {
                get {
                    return this.columnMPFPlanID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanCodeColumn {
                get {
                    return this.columnMPFPlanCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanDescColumn {
                get {
                    return this.columnMPFPlanDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanTrusteeNameColumn {
                get {
                    return this.columnMPFPlanTrusteeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanSchemeNoColumn {
                get {
                    return this.columnMPFPlanSchemeNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanCompanyNameColumn {
                get {
                    return this.columnMPFPlanCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanCompanyAddressColumn {
                get {
                    return this.columnMPFPlanCompanyAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanContactNameColumn {
                get {
                    return this.columnMPFPlanContactName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanContactNoColumn {
                get {
                    return this.columnMPFPlanContactNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFSchemeIDColumn {
                get {
                    return this.columnMPFSchemeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFPlanParticipationNoColumn {
                get {
                    return this.columnMPFPlanParticipationNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFHSBCPayCenterColumn {
                get {
                    return this.columnMPFHSBCPayCenter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow this[int index] {
                get {
                    return ((MPFPlanRow)(this.Rows[index]));
                }
            }
            
            public event MPFPlanRowChangeEventHandler MPFPlanRowChanging;
            
            public event MPFPlanRowChangeEventHandler MPFPlanRowChanged;
            
            public event MPFPlanRowChangeEventHandler MPFPlanRowDeleting;
            
            public event MPFPlanRowChangeEventHandler MPFPlanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMPFPlanRow(MPFPlanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow AddMPFPlanRow(int MPFPlanID, string MPFPlanCode, string MPFPlanDesc, string MPFPlanTrusteeName, string MPFPlanSchemeNo, string MPFPlanCompanyName, string MPFPlanCompanyAddress, string MPFPlanContactName, string MPFPlanContactNo, MPFSchemeRow parentMPFSchemeRowByMPFSchemeID_MPFPlan, string MPFPlanParticipationNo, string MPFHSBCPayCenter) {
                MPFPlanRow rowMPFPlanRow = ((MPFPlanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MPFPlanID,
                        MPFPlanCode,
                        MPFPlanDesc,
                        MPFPlanTrusteeName,
                        MPFPlanSchemeNo,
                        MPFPlanCompanyName,
                        MPFPlanCompanyAddress,
                        MPFPlanContactName,
                        MPFPlanContactNo,
                        null,
                        MPFPlanParticipationNo,
                        MPFHSBCPayCenter};
                if ((parentMPFSchemeRowByMPFSchemeID_MPFPlan != null)) {
                    columnValuesArray[9] = parentMPFSchemeRowByMPFSchemeID_MPFPlan[0];
                }
                rowMPFPlanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMPFPlanRow);
                return rowMPFPlanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow FindByMPFPlanID(int MPFPlanID) {
                return ((MPFPlanRow)(this.Rows.Find(new object[] {
                            MPFPlanID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MPFPlanDataTable cln = ((MPFPlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MPFPlanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMPFPlanID = base.Columns["MPFPlanID"];
                this.columnMPFPlanCode = base.Columns["MPFPlanCode"];
                this.columnMPFPlanDesc = base.Columns["MPFPlanDesc"];
                this.columnMPFPlanTrusteeName = base.Columns["MPFPlanTrusteeName"];
                this.columnMPFPlanSchemeNo = base.Columns["MPFPlanSchemeNo"];
                this.columnMPFPlanCompanyName = base.Columns["MPFPlanCompanyName"];
                this.columnMPFPlanCompanyAddress = base.Columns["MPFPlanCompanyAddress"];
                this.columnMPFPlanContactName = base.Columns["MPFPlanContactName"];
                this.columnMPFPlanContactNo = base.Columns["MPFPlanContactNo"];
                this.columnMPFSchemeID = base.Columns["MPFSchemeID"];
                this.columnMPFPlanParticipationNo = base.Columns["MPFPlanParticipationNo"];
                this.columnMPFHSBCPayCenter = base.Columns["MPFHSBCPayCenter"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMPFPlanID = new global::System.Data.DataColumn("MPFPlanID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanID);
                this.columnMPFPlanCode = new global::System.Data.DataColumn("MPFPlanCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanCode);
                this.columnMPFPlanDesc = new global::System.Data.DataColumn("MPFPlanDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanDesc);
                this.columnMPFPlanTrusteeName = new global::System.Data.DataColumn("MPFPlanTrusteeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanTrusteeName);
                this.columnMPFPlanSchemeNo = new global::System.Data.DataColumn("MPFPlanSchemeNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanSchemeNo);
                this.columnMPFPlanCompanyName = new global::System.Data.DataColumn("MPFPlanCompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanCompanyName);
                this.columnMPFPlanCompanyAddress = new global::System.Data.DataColumn("MPFPlanCompanyAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanCompanyAddress);
                this.columnMPFPlanContactName = new global::System.Data.DataColumn("MPFPlanContactName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanContactName);
                this.columnMPFPlanContactNo = new global::System.Data.DataColumn("MPFPlanContactNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanContactNo);
                this.columnMPFSchemeID = new global::System.Data.DataColumn("MPFSchemeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFSchemeID);
                this.columnMPFPlanParticipationNo = new global::System.Data.DataColumn("MPFPlanParticipationNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFPlanParticipationNo);
                this.columnMPFHSBCPayCenter = new global::System.Data.DataColumn("MPFHSBCPayCenter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFHSBCPayCenter);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMPFPlanID}, true));
                this.columnMPFPlanID.AllowDBNull = false;
                this.columnMPFPlanID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow NewMPFPlanRow() {
                return ((MPFPlanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MPFPlanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MPFPlanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MPFPlanRowChanged != null)) {
                    this.MPFPlanRowChanged(this, new MPFPlanRowChangeEvent(((MPFPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MPFPlanRowChanging != null)) {
                    this.MPFPlanRowChanging(this, new MPFPlanRowChangeEvent(((MPFPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MPFPlanRowDeleted != null)) {
                    this.MPFPlanRowDeleted(this, new MPFPlanRowChangeEvent(((MPFPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MPFPlanRowDeleting != null)) {
                    this.MPFPlanRowDeleting(this, new MPFPlanRowChangeEvent(((MPFPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMPFPlanRow(MPFPlanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_MPFRemittanceStatement ds = new Payroll_MPFRemittanceStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MPFPlanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MPFSchemeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMPFSchemeID;
            
            private global::System.Data.DataColumn columnMPFSchemeCode;
            
            private global::System.Data.DataColumn columnMPFSchemeDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFSchemeDataTable() {
                this.TableName = "MPFScheme";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MPFSchemeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MPFSchemeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFSchemeIDColumn {
                get {
                    return this.columnMPFSchemeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFSchemeCodeColumn {
                get {
                    return this.columnMPFSchemeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFSchemeDescColumn {
                get {
                    return this.columnMPFSchemeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFSchemeRow this[int index] {
                get {
                    return ((MPFSchemeRow)(this.Rows[index]));
                }
            }
            
            public event MPFSchemeRowChangeEventHandler MPFSchemeRowChanging;
            
            public event MPFSchemeRowChangeEventHandler MPFSchemeRowChanged;
            
            public event MPFSchemeRowChangeEventHandler MPFSchemeRowDeleting;
            
            public event MPFSchemeRowChangeEventHandler MPFSchemeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMPFSchemeRow(MPFSchemeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFSchemeRow AddMPFSchemeRow(int MPFSchemeID, string MPFSchemeCode, string MPFSchemeDesc) {
                MPFSchemeRow rowMPFSchemeRow = ((MPFSchemeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MPFSchemeID,
                        MPFSchemeCode,
                        MPFSchemeDesc};
                rowMPFSchemeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMPFSchemeRow);
                return rowMPFSchemeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFSchemeRow FindByMPFSchemeID(int MPFSchemeID) {
                return ((MPFSchemeRow)(this.Rows.Find(new object[] {
                            MPFSchemeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MPFSchemeDataTable cln = ((MPFSchemeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MPFSchemeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMPFSchemeID = base.Columns["MPFSchemeID"];
                this.columnMPFSchemeCode = base.Columns["MPFSchemeCode"];
                this.columnMPFSchemeDesc = base.Columns["MPFSchemeDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMPFSchemeID = new global::System.Data.DataColumn("MPFSchemeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFSchemeID);
                this.columnMPFSchemeCode = new global::System.Data.DataColumn("MPFSchemeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFSchemeCode);
                this.columnMPFSchemeDesc = new global::System.Data.DataColumn("MPFSchemeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFSchemeDesc);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMPFSchemeID}, true));
                this.columnMPFSchemeID.AllowDBNull = false;
                this.columnMPFSchemeID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFSchemeRow NewMPFSchemeRow() {
                return ((MPFSchemeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MPFSchemeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MPFSchemeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MPFSchemeRowChanged != null)) {
                    this.MPFSchemeRowChanged(this, new MPFSchemeRowChangeEvent(((MPFSchemeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MPFSchemeRowChanging != null)) {
                    this.MPFSchemeRowChanging(this, new MPFSchemeRowChangeEvent(((MPFSchemeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MPFSchemeRowDeleted != null)) {
                    this.MPFSchemeRowDeleted(this, new MPFSchemeRowChangeEvent(((MPFSchemeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MPFSchemeRowDeleting != null)) {
                    this.MPFSchemeRowDeleting(this, new MPFSchemeRowChangeEvent(((MPFSchemeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMPFSchemeRow(MPFSchemeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_MPFRemittanceStatement ds = new Payroll_MPFRemittanceStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MPFSchemeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExistingMemberRow : global::System.Data.DataRow {
            
            private ExistingMemberDataTable tableExistingMember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExistingMemberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExistingMember = ((ExistingMemberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableExistingMember.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MPFPlanID {
                get {
                    try {
                        return ((int)(this[this.tableExistingMember.MPFPlanIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanID\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.MPFPlanIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNo {
                get {
                    try {
                        return ((string)(this[this.tableExistingMember.EmpNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNo\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.EmpNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpName {
                get {
                    try {
                        return ((string)(this[this.tableExistingMember.EmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpName\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.EmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HKID {
                get {
                    try {
                        return ((string)(this[this.tableExistingMember.HKIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HKID\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.HKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableExistingMember.PeriodFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodFrom\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.PeriodFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableExistingMember.PeriodToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodTo\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.PeriodToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RelevantIncome {
                get {
                    try {
                        return ((double)(this[this.tableExistingMember.RelevantIncomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RelevantIncome\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.RelevantIncomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MCER {
                get {
                    try {
                        return ((double)(this[this.tableExistingMember.MCERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCER\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.MCERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MCEE {
                get {
                    try {
                        return ((double)(this[this.tableExistingMember.MCEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCEE\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.MCEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VCER {
                get {
                    try {
                        return ((double)(this[this.tableExistingMember.VCERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VCER\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.VCERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VCEE {
                get {
                    try {
                        return ((double)(this[this.tableExistingMember.VCEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VCEE\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.VCEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastEmploymentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableExistingMember.LastEmploymentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastEmploymentDate\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.LastEmploymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TermCode {
                get {
                    try {
                        return ((string)(this[this.tableExistingMember.TermCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TermCode\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.TermCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLSP {
                get {
                    try {
                        return ((bool)(this[this.tableExistingMember.IsLSPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsLSP\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.IsLSPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSP {
                get {
                    try {
                        return ((bool)(this[this.tableExistingMember.IsSPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSP\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.IsSPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LSPSPAmount {
                get {
                    try {
                        return ((double)(this[this.tableExistingMember.LSPSPAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LSPSPAmount\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.LSPSPAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LSPSPAmountPaidByER {
                get {
                    try {
                        return ((double)(this[this.tableExistingMember.LSPSPAmountPaidByERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LSPSPAmountPaidByER\' in table \'ExistingMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExistingMember.LSPSPAmountPaidByERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow MPFPlanRow {
                get {
                    return ((MPFPlanRow)(this.GetParentRow(this.Table.ParentRelations["MPFPlan_ExistingMember"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MPFPlan_ExistingMember"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableExistingMember.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableExistingMember.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanIDNull() {
                return this.IsNull(this.tableExistingMember.MPFPlanIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanIDNull() {
                this[this.tableExistingMember.MPFPlanIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoNull() {
                return this.IsNull(this.tableExistingMember.EmpNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoNull() {
                this[this.tableExistingMember.EmpNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNameNull() {
                return this.IsNull(this.tableExistingMember.EmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNameNull() {
                this[this.tableExistingMember.EmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHKIDNull() {
                return this.IsNull(this.tableExistingMember.HKIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHKIDNull() {
                this[this.tableExistingMember.HKIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodFromNull() {
                return this.IsNull(this.tableExistingMember.PeriodFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodFromNull() {
                this[this.tableExistingMember.PeriodFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodToNull() {
                return this.IsNull(this.tableExistingMember.PeriodToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodToNull() {
                this[this.tableExistingMember.PeriodToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelevantIncomeNull() {
                return this.IsNull(this.tableExistingMember.RelevantIncomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelevantIncomeNull() {
                this[this.tableExistingMember.RelevantIncomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMCERNull() {
                return this.IsNull(this.tableExistingMember.MCERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMCERNull() {
                this[this.tableExistingMember.MCERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMCEENull() {
                return this.IsNull(this.tableExistingMember.MCEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMCEENull() {
                this[this.tableExistingMember.MCEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCERNull() {
                return this.IsNull(this.tableExistingMember.VCERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCERNull() {
                this[this.tableExistingMember.VCERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCEENull() {
                return this.IsNull(this.tableExistingMember.VCEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCEENull() {
                this[this.tableExistingMember.VCEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastEmploymentDateNull() {
                return this.IsNull(this.tableExistingMember.LastEmploymentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastEmploymentDateNull() {
                this[this.tableExistingMember.LastEmploymentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTermCodeNull() {
                return this.IsNull(this.tableExistingMember.TermCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTermCodeNull() {
                this[this.tableExistingMember.TermCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLSPNull() {
                return this.IsNull(this.tableExistingMember.IsLSPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLSPNull() {
                this[this.tableExistingMember.IsLSPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSPNull() {
                return this.IsNull(this.tableExistingMember.IsSPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSPNull() {
                this[this.tableExistingMember.IsSPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLSPSPAmountNull() {
                return this.IsNull(this.tableExistingMember.LSPSPAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLSPSPAmountNull() {
                this[this.tableExistingMember.LSPSPAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLSPSPAmountPaidByERNull() {
                return this.IsNull(this.tableExistingMember.LSPSPAmountPaidByERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLSPSPAmountPaidByERNull() {
                this[this.tableExistingMember.LSPSPAmountPaidByERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NewJoinMemberRow : global::System.Data.DataRow {
            
            private NewJoinMemberDataTable tableNewJoinMember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NewJoinMemberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNewJoinMember = ((NewJoinMemberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableNewJoinMember.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MPFPlanID {
                get {
                    try {
                        return ((int)(this[this.tableNewJoinMember.MPFPlanIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanID\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.MPFPlanIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNo {
                get {
                    try {
                        return ((string)(this[this.tableNewJoinMember.EmpNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNo\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.EmpNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpSurname {
                get {
                    try {
                        return ((string)(this[this.tableNewJoinMember.EmpSurnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpSurname\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.EmpSurnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpOtherName {
                get {
                    try {
                        return ((string)(this[this.tableNewJoinMember.EmpOtherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpOtherName\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.EmpOtherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sex {
                get {
                    try {
                        return ((string)(this[this.tableNewJoinMember.SexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sex\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.SexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfBirth {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNewJoinMember.DateOfBirthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOfBirth\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.DateOfBirthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HKIDType {
                get {
                    try {
                        return ((int)(this[this.tableNewJoinMember.HKIDTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HKIDType\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.HKIDTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HKID {
                get {
                    try {
                        return ((string)(this[this.tableNewJoinMember.HKIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HKID\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.HKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberType {
                get {
                    try {
                        return ((int)(this[this.tableNewJoinMember.MemberTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberType\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.MemberTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SchemeJoinDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNewJoinMember.SchemeJoinDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchemeJoinDate\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.SchemeJoinDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassNo {
                get {
                    try {
                        return ((string)(this[this.tableNewJoinMember.ClassNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassNo\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.ClassNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNewJoinMember.PeriodFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodFrom\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.PeriodFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNewJoinMember.PeriodToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodTo\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.PeriodToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RelevantIncome {
                get {
                    try {
                        return ((double)(this[this.tableNewJoinMember.RelevantIncomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RelevantIncome\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.RelevantIncomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MCER {
                get {
                    try {
                        return ((double)(this[this.tableNewJoinMember.MCERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCER\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.MCERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MCEE {
                get {
                    try {
                        return ((double)(this[this.tableNewJoinMember.MCEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCEE\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.MCEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VCER {
                get {
                    try {
                        return ((double)(this[this.tableNewJoinMember.VCERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VCER\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.VCERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VCEE {
                get {
                    try {
                        return ((double)(this[this.tableNewJoinMember.VCEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VCEE\' in table \'NewJoinMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewJoinMember.VCEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow MPFPlanRow {
                get {
                    return ((MPFPlanRow)(this.GetParentRow(this.Table.ParentRelations["MPFPlan_NewJoinMember"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MPFPlan_NewJoinMember"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableNewJoinMember.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableNewJoinMember.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanIDNull() {
                return this.IsNull(this.tableNewJoinMember.MPFPlanIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanIDNull() {
                this[this.tableNewJoinMember.MPFPlanIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoNull() {
                return this.IsNull(this.tableNewJoinMember.EmpNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoNull() {
                this[this.tableNewJoinMember.EmpNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpSurnameNull() {
                return this.IsNull(this.tableNewJoinMember.EmpSurnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpSurnameNull() {
                this[this.tableNewJoinMember.EmpSurnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpOtherNameNull() {
                return this.IsNull(this.tableNewJoinMember.EmpOtherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpOtherNameNull() {
                this[this.tableNewJoinMember.EmpOtherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSexNull() {
                return this.IsNull(this.tableNewJoinMember.SexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSexNull() {
                this[this.tableNewJoinMember.SexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOfBirthNull() {
                return this.IsNull(this.tableNewJoinMember.DateOfBirthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOfBirthNull() {
                this[this.tableNewJoinMember.DateOfBirthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHKIDTypeNull() {
                return this.IsNull(this.tableNewJoinMember.HKIDTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHKIDTypeNull() {
                this[this.tableNewJoinMember.HKIDTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHKIDNull() {
                return this.IsNull(this.tableNewJoinMember.HKIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHKIDNull() {
                this[this.tableNewJoinMember.HKIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberTypeNull() {
                return this.IsNull(this.tableNewJoinMember.MemberTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberTypeNull() {
                this[this.tableNewJoinMember.MemberTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchemeJoinDateNull() {
                return this.IsNull(this.tableNewJoinMember.SchemeJoinDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchemeJoinDateNull() {
                this[this.tableNewJoinMember.SchemeJoinDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNoNull() {
                return this.IsNull(this.tableNewJoinMember.ClassNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNoNull() {
                this[this.tableNewJoinMember.ClassNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodFromNull() {
                return this.IsNull(this.tableNewJoinMember.PeriodFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodFromNull() {
                this[this.tableNewJoinMember.PeriodFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodToNull() {
                return this.IsNull(this.tableNewJoinMember.PeriodToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodToNull() {
                this[this.tableNewJoinMember.PeriodToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelevantIncomeNull() {
                return this.IsNull(this.tableNewJoinMember.RelevantIncomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelevantIncomeNull() {
                this[this.tableNewJoinMember.RelevantIncomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMCERNull() {
                return this.IsNull(this.tableNewJoinMember.MCERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMCERNull() {
                this[this.tableNewJoinMember.MCERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMCEENull() {
                return this.IsNull(this.tableNewJoinMember.MCEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMCEENull() {
                this[this.tableNewJoinMember.MCEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCERNull() {
                return this.IsNull(this.tableNewJoinMember.VCERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCERNull() {
                this[this.tableNewJoinMember.VCERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCEENull() {
                return this.IsNull(this.tableNewJoinMember.VCEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCEENull() {
                this[this.tableNewJoinMember.VCEEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdditionalMemberRow : global::System.Data.DataRow {
            
            private AdditionalMemberDataTable tableAdditionalMember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdditionalMemberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdditionalMember = ((AdditionalMemberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableAdditionalMember.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MPFPlanID {
                get {
                    try {
                        return ((int)(this[this.tableAdditionalMember.MPFPlanIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanID\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.MPFPlanIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNo {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalMember.EmpNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNo\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.EmpNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpName {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalMember.EmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpName\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.EmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HKID {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalMember.HKIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HKID\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.HKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdditionalMember.PeriodFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodFrom\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.PeriodFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdditionalMember.PeriodToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodTo\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.PeriodToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RelevantIncome {
                get {
                    try {
                        return ((double)(this[this.tableAdditionalMember.RelevantIncomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RelevantIncome\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.RelevantIncomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MCER {
                get {
                    try {
                        return ((double)(this[this.tableAdditionalMember.MCERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCER\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.MCERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MCEE {
                get {
                    try {
                        return ((double)(this[this.tableAdditionalMember.MCEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MCEE\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.MCEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VCER {
                get {
                    try {
                        return ((double)(this[this.tableAdditionalMember.VCERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VCER\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.VCERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VCEE {
                get {
                    try {
                        return ((double)(this[this.tableAdditionalMember.VCEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VCEE\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.VCEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastEmploymentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAdditionalMember.LastEmploymentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastEmploymentDate\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.LastEmploymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TermCode {
                get {
                    try {
                        return ((string)(this[this.tableAdditionalMember.TermCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TermCode\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.TermCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLSP {
                get {
                    try {
                        return ((bool)(this[this.tableAdditionalMember.IsLSPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsLSP\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.IsLSPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSP {
                get {
                    try {
                        return ((bool)(this[this.tableAdditionalMember.IsSPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSP\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.IsSPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LSPSPAmount {
                get {
                    try {
                        return ((double)(this[this.tableAdditionalMember.LSPSPAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LSPSPAmount\' in table \'AdditionalMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.LSPSPAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LSPSPAmountPaidByER {
                get {
                    try {
                        return ((double)(this[this.tableAdditionalMember.LSPSPAmountPaidByERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LSPSPAmountPaidByER\' in table \'AdditionalMember\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAdditionalMember.LSPSPAmountPaidByERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow MPFPlanRow {
                get {
                    return ((MPFPlanRow)(this.GetParentRow(this.Table.ParentRelations["MPFPlan_AdditionalMember"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MPFPlan_AdditionalMember"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableAdditionalMember.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableAdditionalMember.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanIDNull() {
                return this.IsNull(this.tableAdditionalMember.MPFPlanIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanIDNull() {
                this[this.tableAdditionalMember.MPFPlanIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoNull() {
                return this.IsNull(this.tableAdditionalMember.EmpNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoNull() {
                this[this.tableAdditionalMember.EmpNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNameNull() {
                return this.IsNull(this.tableAdditionalMember.EmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNameNull() {
                this[this.tableAdditionalMember.EmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHKIDNull() {
                return this.IsNull(this.tableAdditionalMember.HKIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHKIDNull() {
                this[this.tableAdditionalMember.HKIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodFromNull() {
                return this.IsNull(this.tableAdditionalMember.PeriodFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodFromNull() {
                this[this.tableAdditionalMember.PeriodFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodToNull() {
                return this.IsNull(this.tableAdditionalMember.PeriodToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodToNull() {
                this[this.tableAdditionalMember.PeriodToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelevantIncomeNull() {
                return this.IsNull(this.tableAdditionalMember.RelevantIncomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelevantIncomeNull() {
                this[this.tableAdditionalMember.RelevantIncomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMCERNull() {
                return this.IsNull(this.tableAdditionalMember.MCERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMCERNull() {
                this[this.tableAdditionalMember.MCERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMCEENull() {
                return this.IsNull(this.tableAdditionalMember.MCEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMCEENull() {
                this[this.tableAdditionalMember.MCEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCERNull() {
                return this.IsNull(this.tableAdditionalMember.VCERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCERNull() {
                this[this.tableAdditionalMember.VCERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCEENull() {
                return this.IsNull(this.tableAdditionalMember.VCEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCEENull() {
                this[this.tableAdditionalMember.VCEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastEmploymentDateNull() {
                return this.IsNull(this.tableAdditionalMember.LastEmploymentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastEmploymentDateNull() {
                this[this.tableAdditionalMember.LastEmploymentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTermCodeNull() {
                return this.IsNull(this.tableAdditionalMember.TermCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTermCodeNull() {
                this[this.tableAdditionalMember.TermCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLSPNull() {
                return this.IsNull(this.tableAdditionalMember.IsLSPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLSPNull() {
                this[this.tableAdditionalMember.IsLSPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSPNull() {
                return this.IsNull(this.tableAdditionalMember.IsSPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSPNull() {
                this[this.tableAdditionalMember.IsSPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLSPSPAmountNull() {
                return this.IsNull(this.tableAdditionalMember.LSPSPAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLSPSPAmountNull() {
                this[this.tableAdditionalMember.LSPSPAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLSPSPAmountPaidByERNull() {
                return this.IsNull(this.tableAdditionalMember.LSPSPAmountPaidByERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLSPSPAmountPaidByERNull() {
                this[this.tableAdditionalMember.LSPSPAmountPaidByERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MPFPlanRow : global::System.Data.DataRow {
            
            private MPFPlanDataTable tableMPFPlan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MPFPlanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMPFPlan = ((MPFPlanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MPFPlanID {
                get {
                    return ((int)(this[this.tableMPFPlan.MPFPlanIDColumn]));
                }
                set {
                    this[this.tableMPFPlan.MPFPlanIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanCode {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanCode\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanDesc {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanDesc\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanTrusteeName {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanTrusteeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanTrusteeName\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanTrusteeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanSchemeNo {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanSchemeNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanSchemeNo\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanSchemeNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanCompanyName {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanCompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanCompanyName\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanCompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanCompanyAddress {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanCompanyAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanCompanyAddress\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanCompanyAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanContactName {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanContactNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanContactName\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanContactNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanContactNo {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanContactNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanContactNo\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanContactNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MPFSchemeID {
                get {
                    try {
                        return ((int)(this[this.tableMPFPlan.MPFSchemeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFSchemeID\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFSchemeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFPlanParticipationNo {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFPlanParticipationNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFPlanParticipationNo\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFPlanParticipationNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFHSBCPayCenter {
                get {
                    try {
                        return ((string)(this[this.tableMPFPlan.MPFHSBCPayCenterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFHSBCPayCenter\' in table \'MPFPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFPlan.MPFHSBCPayCenterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFSchemeRow MPFSchemeRow {
                get {
                    return ((MPFSchemeRow)(this.GetParentRow(this.Table.ParentRelations["MPFSchemeID_MPFPlan"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MPFSchemeID_MPFPlan"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanCodeNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanCodeNull() {
                this[this.tableMPFPlan.MPFPlanCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanDescNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanDescNull() {
                this[this.tableMPFPlan.MPFPlanDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanTrusteeNameNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanTrusteeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanTrusteeNameNull() {
                this[this.tableMPFPlan.MPFPlanTrusteeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanSchemeNoNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanSchemeNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanSchemeNoNull() {
                this[this.tableMPFPlan.MPFPlanSchemeNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanCompanyNameNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanCompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanCompanyNameNull() {
                this[this.tableMPFPlan.MPFPlanCompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanCompanyAddressNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanCompanyAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanCompanyAddressNull() {
                this[this.tableMPFPlan.MPFPlanCompanyAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanContactNameNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanContactNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanContactNameNull() {
                this[this.tableMPFPlan.MPFPlanContactNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanContactNoNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanContactNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanContactNoNull() {
                this[this.tableMPFPlan.MPFPlanContactNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFSchemeIDNull() {
                return this.IsNull(this.tableMPFPlan.MPFSchemeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFSchemeIDNull() {
                this[this.tableMPFPlan.MPFSchemeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFPlanParticipationNoNull() {
                return this.IsNull(this.tableMPFPlan.MPFPlanParticipationNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFPlanParticipationNoNull() {
                this[this.tableMPFPlan.MPFPlanParticipationNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFHSBCPayCenterNull() {
                return this.IsNull(this.tableMPFPlan.MPFHSBCPayCenterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFHSBCPayCenterNull() {
                this[this.tableMPFPlan.MPFHSBCPayCenterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExistingMemberRow[] GetExistingMemberRows() {
                if ((this.Table.ChildRelations["MPFPlan_ExistingMember"] == null)) {
                    return new ExistingMemberRow[0];
                }
                else {
                    return ((ExistingMemberRow[])(base.GetChildRows(this.Table.ChildRelations["MPFPlan_ExistingMember"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewJoinMemberRow[] GetNewJoinMemberRows() {
                if ((this.Table.ChildRelations["MPFPlan_NewJoinMember"] == null)) {
                    return new NewJoinMemberRow[0];
                }
                else {
                    return ((NewJoinMemberRow[])(base.GetChildRows(this.Table.ChildRelations["MPFPlan_NewJoinMember"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalMemberRow[] GetAdditionalMemberRows() {
                if ((this.Table.ChildRelations["MPFPlan_AdditionalMember"] == null)) {
                    return new AdditionalMemberRow[0];
                }
                else {
                    return ((AdditionalMemberRow[])(base.GetChildRows(this.Table.ChildRelations["MPFPlan_AdditionalMember"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MPFSchemeRow : global::System.Data.DataRow {
            
            private MPFSchemeDataTable tableMPFScheme;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MPFSchemeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMPFScheme = ((MPFSchemeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MPFSchemeID {
                get {
                    return ((int)(this[this.tableMPFScheme.MPFSchemeIDColumn]));
                }
                set {
                    this[this.tableMPFScheme.MPFSchemeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFSchemeCode {
                get {
                    try {
                        return ((string)(this[this.tableMPFScheme.MPFSchemeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFSchemeCode\' in table \'MPFScheme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFScheme.MPFSchemeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPFSchemeDesc {
                get {
                    try {
                        return ((string)(this[this.tableMPFScheme.MPFSchemeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFSchemeDesc\' in table \'MPFScheme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMPFScheme.MPFSchemeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFSchemeCodeNull() {
                return this.IsNull(this.tableMPFScheme.MPFSchemeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFSchemeCodeNull() {
                this[this.tableMPFScheme.MPFSchemeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFSchemeDescNull() {
                return this.IsNull(this.tableMPFScheme.MPFSchemeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFSchemeDescNull() {
                this[this.tableMPFScheme.MPFSchemeDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow[] GetMPFPlanRows() {
                if ((this.Table.ChildRelations["MPFSchemeID_MPFPlan"] == null)) {
                    return new MPFPlanRow[0];
                }
                else {
                    return ((MPFPlanRow[])(base.GetChildRows(this.Table.ChildRelations["MPFSchemeID_MPFPlan"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExistingMemberRowChangeEvent : global::System.EventArgs {
            
            private ExistingMemberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExistingMemberRowChangeEvent(ExistingMemberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExistingMemberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NewJoinMemberRowChangeEvent : global::System.EventArgs {
            
            private NewJoinMemberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewJoinMemberRowChangeEvent(NewJoinMemberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewJoinMemberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdditionalMemberRowChangeEvent : global::System.EventArgs {
            
            private AdditionalMemberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalMemberRowChangeEvent(AdditionalMemberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdditionalMemberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MPFPlanRowChangeEvent : global::System.EventArgs {
            
            private MPFPlanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRowChangeEvent(MPFPlanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFPlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MPFSchemeRowChangeEvent : global::System.EventArgs {
            
            private MPFSchemeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFSchemeRowChangeEvent(MPFSchemeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPFSchemeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591