//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.Reports.Payroll.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Payroll_EEDAWList")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Payroll_EEDAWList : global::System.Data.DataSet {
        
        private EmpDAWDataTable tableEmpDAW;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Payroll_EEDAWList() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Payroll_EEDAWList(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EmpDAW"] != null)) {
                    base.Tables.Add(new EmpDAWDataTable(ds.Tables["EmpDAW"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpDAWDataTable EmpDAW {
            get {
                return this.tableEmpDAW;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Payroll_EEDAWList cln = ((Payroll_EEDAWList)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EmpDAW"] != null)) {
                    base.Tables.Add(new EmpDAWDataTable(ds.Tables["EmpDAW"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEmpDAW = ((EmpDAWDataTable)(base.Tables["EmpDAW"]));
            if ((initTable == true)) {
                if ((this.tableEmpDAW != null)) {
                    this.tableEmpDAW.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Payroll_EEDAWList";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Payroll_EEDAWList.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEmpDAW = new EmpDAWDataTable();
            base.Tables.Add(this.tableEmpDAW);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpDAW() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Payroll_EEDAWList ds = new Payroll_EEDAWList();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EmpDAWRowChangeEventHandler(object sender, EmpDAWRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpDAWDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpNo;
            
            private global::System.Data.DataColumn columnEmpName;
            
            private global::System.Data.DataColumn columnJoinDate;
            
            private global::System.Data.DataColumn columnPeriodFrom;
            
            private global::System.Data.DataColumn columnPeriodTo;
            
            private global::System.Data.DataColumn columnTotalWages;
            
            private global::System.Data.DataColumn columnExcludeWages;
            
            private global::System.Data.DataColumn columnOTWages;
            
            private global::System.Data.DataColumn columnIsWagesIncludeOT;
            
            private global::System.Data.DataColumn columnTotalWorkDays;
            
            private global::System.Data.DataColumn columnExcludeDays;
            
            private global::System.Data.DataColumn columnAverageWages;
            
            private global::System.Data.DataColumn columnBasicSalary;
            
            private global::System.Data.DataColumn columnPayPeriodDays;
            
            private global::System.Data.DataColumn columnServiceDate;
            
            private global::System.Data.DataColumn columnEmpAlias;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDAWDataTable() {
                this.TableName = "EmpDAW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpDAWDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpDAWDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoColumn {
                get {
                    return this.columnEmpNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNameColumn {
                get {
                    return this.columnEmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinDateColumn {
                get {
                    return this.columnJoinDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodFromColumn {
                get {
                    return this.columnPeriodFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodToColumn {
                get {
                    return this.columnPeriodTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalWagesColumn {
                get {
                    return this.columnTotalWages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExcludeWagesColumn {
                get {
                    return this.columnExcludeWages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OTWagesColumn {
                get {
                    return this.columnOTWages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWagesIncludeOTColumn {
                get {
                    return this.columnIsWagesIncludeOT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalWorkDaysColumn {
                get {
                    return this.columnTotalWorkDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExcludeDaysColumn {
                get {
                    return this.columnExcludeDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageWagesColumn {
                get {
                    return this.columnAverageWages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasicSalaryColumn {
                get {
                    return this.columnBasicSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayPeriodDaysColumn {
                get {
                    return this.columnPayPeriodDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDateColumn {
                get {
                    return this.columnServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpAliasColumn {
                get {
                    return this.columnEmpAlias;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDAWRow this[int index] {
                get {
                    return ((EmpDAWRow)(this.Rows[index]));
                }
            }
            
            public event EmpDAWRowChangeEventHandler EmpDAWRowChanging;
            
            public event EmpDAWRowChangeEventHandler EmpDAWRowChanged;
            
            public event EmpDAWRowChangeEventHandler EmpDAWRowDeleting;
            
            public event EmpDAWRowChangeEventHandler EmpDAWRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpDAWRow(EmpDAWRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDAWRow AddEmpDAWRow(
                        int EmpID, 
                        string EmpNo, 
                        string EmpName, 
                        System.DateTime JoinDate, 
                        System.DateTime PeriodFrom, 
                        System.DateTime PeriodTo, 
                        double TotalWages, 
                        double ExcludeWages, 
                        double OTWages, 
                        bool IsWagesIncludeOT, 
                        double TotalWorkDays, 
                        double ExcludeDays, 
                        double AverageWages, 
                        double BasicSalary, 
                        int PayPeriodDays, 
                        System.DateTime ServiceDate, 
                        string EmpAlias) {
                EmpDAWRow rowEmpDAWRow = ((EmpDAWRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpID,
                        EmpNo,
                        EmpName,
                        JoinDate,
                        PeriodFrom,
                        PeriodTo,
                        TotalWages,
                        ExcludeWages,
                        OTWages,
                        IsWagesIncludeOT,
                        TotalWorkDays,
                        ExcludeDays,
                        AverageWages,
                        BasicSalary,
                        PayPeriodDays,
                        ServiceDate,
                        EmpAlias};
                rowEmpDAWRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpDAWRow);
                return rowEmpDAWRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDAWRow FindByEmpID(int EmpID) {
                return ((EmpDAWRow)(this.Rows.Find(new object[] {
                            EmpID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpDAWDataTable cln = ((EmpDAWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpDAWDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpNo = base.Columns["EmpNo"];
                this.columnEmpName = base.Columns["EmpName"];
                this.columnJoinDate = base.Columns["JoinDate"];
                this.columnPeriodFrom = base.Columns["PeriodFrom"];
                this.columnPeriodTo = base.Columns["PeriodTo"];
                this.columnTotalWages = base.Columns["TotalWages"];
                this.columnExcludeWages = base.Columns["ExcludeWages"];
                this.columnOTWages = base.Columns["OTWages"];
                this.columnIsWagesIncludeOT = base.Columns["IsWagesIncludeOT"];
                this.columnTotalWorkDays = base.Columns["TotalWorkDays"];
                this.columnExcludeDays = base.Columns["ExcludeDays"];
                this.columnAverageWages = base.Columns["AverageWages"];
                this.columnBasicSalary = base.Columns["BasicSalary"];
                this.columnPayPeriodDays = base.Columns["PayPeriodDays"];
                this.columnServiceDate = base.Columns["ServiceDate"];
                this.columnEmpAlias = base.Columns["EmpAlias"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpNo = new global::System.Data.DataColumn("EmpNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNo);
                this.columnEmpName = new global::System.Data.DataColumn("EmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpName);
                this.columnJoinDate = new global::System.Data.DataColumn("JoinDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDate);
                this.columnPeriodFrom = new global::System.Data.DataColumn("PeriodFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodFrom);
                this.columnPeriodTo = new global::System.Data.DataColumn("PeriodTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodTo);
                this.columnTotalWages = new global::System.Data.DataColumn("TotalWages", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalWages);
                this.columnExcludeWages = new global::System.Data.DataColumn("ExcludeWages", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExcludeWages);
                this.columnOTWages = new global::System.Data.DataColumn("OTWages", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOTWages);
                this.columnIsWagesIncludeOT = new global::System.Data.DataColumn("IsWagesIncludeOT", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsWagesIncludeOT);
                this.columnTotalWorkDays = new global::System.Data.DataColumn("TotalWorkDays", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalWorkDays);
                this.columnExcludeDays = new global::System.Data.DataColumn("ExcludeDays", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExcludeDays);
                this.columnAverageWages = new global::System.Data.DataColumn("AverageWages", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageWages);
                this.columnBasicSalary = new global::System.Data.DataColumn("BasicSalary", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasicSalary);
                this.columnPayPeriodDays = new global::System.Data.DataColumn("PayPeriodDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayPeriodDays);
                this.columnServiceDate = new global::System.Data.DataColumn("ServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDate);
                this.columnEmpAlias = new global::System.Data.DataColumn("EmpAlias", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpAlias);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpID}, true));
                this.columnEmpID.AllowDBNull = false;
                this.columnEmpID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDAWRow NewEmpDAWRow() {
                return ((EmpDAWRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpDAWRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpDAWRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpDAWRowChanged != null)) {
                    this.EmpDAWRowChanged(this, new EmpDAWRowChangeEvent(((EmpDAWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpDAWRowChanging != null)) {
                    this.EmpDAWRowChanging(this, new EmpDAWRowChangeEvent(((EmpDAWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpDAWRowDeleted != null)) {
                    this.EmpDAWRowDeleted(this, new EmpDAWRowChangeEvent(((EmpDAWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpDAWRowDeleting != null)) {
                    this.EmpDAWRowDeleting(this, new EmpDAWRowChangeEvent(((EmpDAWRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpDAWRow(EmpDAWRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_EEDAWList ds = new Payroll_EEDAWList();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpDAWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpDAWRow : global::System.Data.DataRow {
            
            private EmpDAWDataTable tableEmpDAW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpDAWRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpDAW = ((EmpDAWDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tableEmpDAW.EmpIDColumn]));
                }
                set {
                    this[this.tableEmpDAW.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNo {
                get {
                    try {
                        return ((string)(this[this.tableEmpDAW.EmpNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNo\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.EmpNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpName {
                get {
                    try {
                        return ((string)(this[this.tableEmpDAW.EmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpName\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.EmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime JoinDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpDAW.JoinDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JoinDate\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.JoinDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpDAW.PeriodFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodFrom\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.PeriodFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpDAW.PeriodToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodTo\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.PeriodToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalWages {
                get {
                    try {
                        return ((double)(this[this.tableEmpDAW.TotalWagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalWages\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.TotalWagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ExcludeWages {
                get {
                    try {
                        return ((double)(this[this.tableEmpDAW.ExcludeWagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExcludeWages\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.ExcludeWagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OTWages {
                get {
                    try {
                        return ((double)(this[this.tableEmpDAW.OTWagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OTWages\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.OTWagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWagesIncludeOT {
                get {
                    try {
                        return ((bool)(this[this.tableEmpDAW.IsWagesIncludeOTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsWagesIncludeOT\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.IsWagesIncludeOTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalWorkDays {
                get {
                    try {
                        return ((double)(this[this.tableEmpDAW.TotalWorkDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalWorkDays\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.TotalWorkDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ExcludeDays {
                get {
                    try {
                        return ((double)(this[this.tableEmpDAW.ExcludeDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExcludeDays\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.ExcludeDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageWages {
                get {
                    try {
                        return ((double)(this[this.tableEmpDAW.AverageWagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageWages\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.AverageWagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BasicSalary {
                get {
                    try {
                        return ((double)(this[this.tableEmpDAW.BasicSalaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasicSalary\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.BasicSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayPeriodDays {
                get {
                    try {
                        return ((int)(this[this.tableEmpDAW.PayPeriodDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayPeriodDays\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.PayPeriodDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ServiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpDAW.ServiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDate\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.ServiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpAlias {
                get {
                    try {
                        return ((string)(this[this.tableEmpDAW.EmpAliasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpAlias\' in table \'EmpDAW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpDAW.EmpAliasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoNull() {
                return this.IsNull(this.tableEmpDAW.EmpNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoNull() {
                this[this.tableEmpDAW.EmpNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNameNull() {
                return this.IsNull(this.tableEmpDAW.EmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNameNull() {
                this[this.tableEmpDAW.EmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinDateNull() {
                return this.IsNull(this.tableEmpDAW.JoinDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinDateNull() {
                this[this.tableEmpDAW.JoinDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodFromNull() {
                return this.IsNull(this.tableEmpDAW.PeriodFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodFromNull() {
                this[this.tableEmpDAW.PeriodFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodToNull() {
                return this.IsNull(this.tableEmpDAW.PeriodToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodToNull() {
                this[this.tableEmpDAW.PeriodToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalWagesNull() {
                return this.IsNull(this.tableEmpDAW.TotalWagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalWagesNull() {
                this[this.tableEmpDAW.TotalWagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExcludeWagesNull() {
                return this.IsNull(this.tableEmpDAW.ExcludeWagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExcludeWagesNull() {
                this[this.tableEmpDAW.ExcludeWagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOTWagesNull() {
                return this.IsNull(this.tableEmpDAW.OTWagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOTWagesNull() {
                this[this.tableEmpDAW.OTWagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWagesIncludeOTNull() {
                return this.IsNull(this.tableEmpDAW.IsWagesIncludeOTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWagesIncludeOTNull() {
                this[this.tableEmpDAW.IsWagesIncludeOTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalWorkDaysNull() {
                return this.IsNull(this.tableEmpDAW.TotalWorkDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalWorkDaysNull() {
                this[this.tableEmpDAW.TotalWorkDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExcludeDaysNull() {
                return this.IsNull(this.tableEmpDAW.ExcludeDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExcludeDaysNull() {
                this[this.tableEmpDAW.ExcludeDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageWagesNull() {
                return this.IsNull(this.tableEmpDAW.AverageWagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageWagesNull() {
                this[this.tableEmpDAW.AverageWagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasicSalaryNull() {
                return this.IsNull(this.tableEmpDAW.BasicSalaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasicSalaryNull() {
                this[this.tableEmpDAW.BasicSalaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayPeriodDaysNull() {
                return this.IsNull(this.tableEmpDAW.PayPeriodDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayPeriodDaysNull() {
                this[this.tableEmpDAW.PayPeriodDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDateNull() {
                return this.IsNull(this.tableEmpDAW.ServiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDateNull() {
                this[this.tableEmpDAW.ServiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpAliasNull() {
                return this.IsNull(this.tableEmpDAW.EmpAliasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpAliasNull() {
                this[this.tableEmpDAW.EmpAliasColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpDAWRowChangeEvent : global::System.EventArgs {
            
            private EmpDAWRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDAWRowChangeEvent(EmpDAWRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpDAWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591