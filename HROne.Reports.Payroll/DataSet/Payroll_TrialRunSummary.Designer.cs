//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.Reports.Payroll.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PayrollTrialRunSummaryDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PayrollTrialRunSummaryDataSet : global::System.Data.DataSet {
        
        private TrialRunSummaryDataTable tableTrialRunSummary;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PayrollTrialRunSummaryDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PayrollTrialRunSummaryDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TrialRunSummary"] != null)) {
                    base.Tables.Add(new TrialRunSummaryDataTable(ds.Tables["TrialRunSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrialRunSummaryDataTable TrialRunSummary {
            get {
                return this.tableTrialRunSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PayrollTrialRunSummaryDataSet cln = ((PayrollTrialRunSummaryDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TrialRunSummary"] != null)) {
                    base.Tables.Add(new TrialRunSummaryDataTable(ds.Tables["TrialRunSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTrialRunSummary = ((TrialRunSummaryDataTable)(base.Tables["TrialRunSummary"]));
            if ((initTable == true)) {
                if ((this.tableTrialRunSummary != null)) {
                    this.tableTrialRunSummary.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PayrollTrialRunSummaryDataSet";
            this.Prefix = "HROne.DataSet";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTrialRunSummary = new TrialRunSummaryDataTable();
            base.Tables.Add(this.tableTrialRunSummary);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTrialRunSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PayrollTrialRunSummaryDataSet ds = new PayrollTrialRunSummaryDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TrialRunSummaryRowChangeEventHandler(object sender, TrialRunSummaryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrialRunSummaryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpPayrollID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpNo;
            
            private global::System.Data.DataColumn columnEmpName;
            
            private global::System.Data.DataColumn columnEmpAlias;
            
            private global::System.Data.DataColumn columnHLevelDesc1;
            
            private global::System.Data.DataColumn columnHElementCode1;
            
            private global::System.Data.DataColumn columnHElementDesc1;
            
            private global::System.Data.DataColumn columnHLevelDesc2;
            
            private global::System.Data.DataColumn columnHElementCode2;
            
            private global::System.Data.DataColumn columnHElementDesc2;
            
            private global::System.Data.DataColumn columnPayGroupID;
            
            private global::System.Data.DataColumn columnPayGroupDesc;
            
            private global::System.Data.DataColumn columnPayrollPeriod;
            
            private global::System.Data.DataColumn columnPayBatchValueDate;
            
            private global::System.Data.DataColumn columnPayBatchRemark;
            
            private global::System.Data.DataColumn columnRecurringBasicSalary;
            
            private global::System.Data.DataColumn columnBasicSalary;
            
            private global::System.Data.DataColumn columnLeaveAllowance;
            
            private global::System.Data.DataColumn columnOvertime;
            
            private global::System.Data.DataColumn columnBonus;
            
            private global::System.Data.DataColumn columnCommission;
            
            private global::System.Data.DataColumn columnOthers;
            
            private global::System.Data.DataColumn columnTotalIncome;
            
            private global::System.Data.DataColumn columnPFundEE;
            
            private global::System.Data.DataColumn columnPFundER;
            
            private global::System.Data.DataColumn columnNetIncome;
            
            private global::System.Data.DataColumn columnPayMethodAutoPay;
            
            private global::System.Data.DataColumn columnPayMethodCheque;
            
            private global::System.Data.DataColumn columnPayMethodCash;
            
            private global::System.Data.DataColumn columnPayMethodOthers;
            
            private global::System.Data.DataColumn columnTotalWagesForMinWages;
            
            private global::System.Data.DataColumn columnTotalWorkingHours;
            
            private global::System.Data.DataColumn columnMinWagesRequired;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrialRunSummaryDataTable() {
                this.TableName = "TrialRunSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrialRunSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrialRunSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpPayrollIDColumn {
                get {
                    return this.columnEmpPayrollID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoColumn {
                get {
                    return this.columnEmpNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNameColumn {
                get {
                    return this.columnEmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpAliasColumn {
                get {
                    return this.columnEmpAlias;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLevelDesc1Column {
                get {
                    return this.columnHLevelDesc1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementCode1Column {
                get {
                    return this.columnHElementCode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementDesc1Column {
                get {
                    return this.columnHElementDesc1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HLevelDesc2Column {
                get {
                    return this.columnHLevelDesc2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementCode2Column {
                get {
                    return this.columnHElementCode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HElementDesc2Column {
                get {
                    return this.columnHElementDesc2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupIDColumn {
                get {
                    return this.columnPayGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupDescColumn {
                get {
                    return this.columnPayGroupDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayrollPeriodColumn {
                get {
                    return this.columnPayrollPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayBatchValueDateColumn {
                get {
                    return this.columnPayBatchValueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayBatchRemarkColumn {
                get {
                    return this.columnPayBatchRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecurringBasicSalaryColumn {
                get {
                    return this.columnRecurringBasicSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasicSalaryColumn {
                get {
                    return this.columnBasicSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveAllowanceColumn {
                get {
                    return this.columnLeaveAllowance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OvertimeColumn {
                get {
                    return this.columnOvertime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BonusColumn {
                get {
                    return this.columnBonus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionColumn {
                get {
                    return this.columnCommission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OthersColumn {
                get {
                    return this.columnOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalIncomeColumn {
                get {
                    return this.columnTotalIncome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFundEEColumn {
                get {
                    return this.columnPFundEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFundERColumn {
                get {
                    return this.columnPFundER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetIncomeColumn {
                get {
                    return this.columnNetIncome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayMethodAutoPayColumn {
                get {
                    return this.columnPayMethodAutoPay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayMethodChequeColumn {
                get {
                    return this.columnPayMethodCheque;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayMethodCashColumn {
                get {
                    return this.columnPayMethodCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayMethodOthersColumn {
                get {
                    return this.columnPayMethodOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalWagesForMinWagesColumn {
                get {
                    return this.columnTotalWagesForMinWages;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalWorkingHoursColumn {
                get {
                    return this.columnTotalWorkingHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinWagesRequiredColumn {
                get {
                    return this.columnMinWagesRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrialRunSummaryRow this[int index] {
                get {
                    return ((TrialRunSummaryRow)(this.Rows[index]));
                }
            }
            
            public event TrialRunSummaryRowChangeEventHandler TrialRunSummaryRowChanging;
            
            public event TrialRunSummaryRowChangeEventHandler TrialRunSummaryRowChanged;
            
            public event TrialRunSummaryRowChangeEventHandler TrialRunSummaryRowDeleting;
            
            public event TrialRunSummaryRowChangeEventHandler TrialRunSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrialRunSummaryRow(TrialRunSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrialRunSummaryRow AddTrialRunSummaryRow(
                        int EmpPayrollID, 
                        int EmpID, 
                        string EmpNo, 
                        string EmpName, 
                        string EmpAlias, 
                        string HLevelDesc1, 
                        string HElementCode1, 
                        string HElementDesc1, 
                        string HLevelDesc2, 
                        string HElementCode2, 
                        string HElementDesc2, 
                        int PayGroupID, 
                        string PayGroupDesc, 
                        string PayrollPeriod, 
                        System.DateTime PayBatchValueDate, 
                        string PayBatchRemark, 
                        double RecurringBasicSalary, 
                        double BasicSalary, 
                        double LeaveAllowance, 
                        double Overtime, 
                        double Bonus, 
                        double Commission, 
                        double Others, 
                        double TotalIncome, 
                        double PFundEE, 
                        double PFundER, 
                        double NetIncome, 
                        double PayMethodAutoPay, 
                        double PayMethodCheque, 
                        double PayMethodCash, 
                        double PayMethodOthers, 
                        double TotalWagesForMinWages, 
                        double TotalWorkingHours, 
                        double MinWagesRequired) {
                TrialRunSummaryRow rowTrialRunSummaryRow = ((TrialRunSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpPayrollID,
                        EmpID,
                        EmpNo,
                        EmpName,
                        EmpAlias,
                        HLevelDesc1,
                        HElementCode1,
                        HElementDesc1,
                        HLevelDesc2,
                        HElementCode2,
                        HElementDesc2,
                        PayGroupID,
                        PayGroupDesc,
                        PayrollPeriod,
                        PayBatchValueDate,
                        PayBatchRemark,
                        RecurringBasicSalary,
                        BasicSalary,
                        LeaveAllowance,
                        Overtime,
                        Bonus,
                        Commission,
                        Others,
                        TotalIncome,
                        PFundEE,
                        PFundER,
                        NetIncome,
                        PayMethodAutoPay,
                        PayMethodCheque,
                        PayMethodCash,
                        PayMethodOthers,
                        TotalWagesForMinWages,
                        TotalWorkingHours,
                        MinWagesRequired};
                rowTrialRunSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTrialRunSummaryRow);
                return rowTrialRunSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TrialRunSummaryDataTable cln = ((TrialRunSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TrialRunSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpPayrollID = base.Columns["EmpPayrollID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpNo = base.Columns["EmpNo"];
                this.columnEmpName = base.Columns["EmpName"];
                this.columnEmpAlias = base.Columns["EmpAlias"];
                this.columnHLevelDesc1 = base.Columns["HLevelDesc1"];
                this.columnHElementCode1 = base.Columns["HElementCode1"];
                this.columnHElementDesc1 = base.Columns["HElementDesc1"];
                this.columnHLevelDesc2 = base.Columns["HLevelDesc2"];
                this.columnHElementCode2 = base.Columns["HElementCode2"];
                this.columnHElementDesc2 = base.Columns["HElementDesc2"];
                this.columnPayGroupID = base.Columns["PayGroupID"];
                this.columnPayGroupDesc = base.Columns["PayGroupDesc"];
                this.columnPayrollPeriod = base.Columns["PayrollPeriod"];
                this.columnPayBatchValueDate = base.Columns["PayBatchValueDate"];
                this.columnPayBatchRemark = base.Columns["PayBatchRemark"];
                this.columnRecurringBasicSalary = base.Columns["RecurringBasicSalary"];
                this.columnBasicSalary = base.Columns["BasicSalary"];
                this.columnLeaveAllowance = base.Columns["LeaveAllowance"];
                this.columnOvertime = base.Columns["Overtime"];
                this.columnBonus = base.Columns["Bonus"];
                this.columnCommission = base.Columns["Commission"];
                this.columnOthers = base.Columns["Others"];
                this.columnTotalIncome = base.Columns["TotalIncome"];
                this.columnPFundEE = base.Columns["PFundEE"];
                this.columnPFundER = base.Columns["PFundER"];
                this.columnNetIncome = base.Columns["NetIncome"];
                this.columnPayMethodAutoPay = base.Columns["PayMethodAutoPay"];
                this.columnPayMethodCheque = base.Columns["PayMethodCheque"];
                this.columnPayMethodCash = base.Columns["PayMethodCash"];
                this.columnPayMethodOthers = base.Columns["PayMethodOthers"];
                this.columnTotalWagesForMinWages = base.Columns["TotalWagesForMinWages"];
                this.columnTotalWorkingHours = base.Columns["TotalWorkingHours"];
                this.columnMinWagesRequired = base.Columns["MinWagesRequired"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpPayrollID = new global::System.Data.DataColumn("EmpPayrollID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpPayrollID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpNo = new global::System.Data.DataColumn("EmpNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNo);
                this.columnEmpName = new global::System.Data.DataColumn("EmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpName);
                this.columnEmpAlias = new global::System.Data.DataColumn("EmpAlias", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpAlias);
                this.columnHLevelDesc1 = new global::System.Data.DataColumn("HLevelDesc1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLevelDesc1);
                this.columnHElementCode1 = new global::System.Data.DataColumn("HElementCode1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementCode1);
                this.columnHElementDesc1 = new global::System.Data.DataColumn("HElementDesc1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementDesc1);
                this.columnHLevelDesc2 = new global::System.Data.DataColumn("HLevelDesc2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHLevelDesc2);
                this.columnHElementCode2 = new global::System.Data.DataColumn("HElementCode2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementCode2);
                this.columnHElementDesc2 = new global::System.Data.DataColumn("HElementDesc2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHElementDesc2);
                this.columnPayGroupID = new global::System.Data.DataColumn("PayGroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupID);
                this.columnPayGroupDesc = new global::System.Data.DataColumn("PayGroupDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupDesc);
                this.columnPayrollPeriod = new global::System.Data.DataColumn("PayrollPeriod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayrollPeriod);
                this.columnPayBatchValueDate = new global::System.Data.DataColumn("PayBatchValueDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayBatchValueDate);
                this.columnPayBatchRemark = new global::System.Data.DataColumn("PayBatchRemark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayBatchRemark);
                this.columnRecurringBasicSalary = new global::System.Data.DataColumn("RecurringBasicSalary", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurringBasicSalary);
                this.columnBasicSalary = new global::System.Data.DataColumn("BasicSalary", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasicSalary);
                this.columnLeaveAllowance = new global::System.Data.DataColumn("LeaveAllowance", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveAllowance);
                this.columnOvertime = new global::System.Data.DataColumn("Overtime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOvertime);
                this.columnBonus = new global::System.Data.DataColumn("Bonus", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonus);
                this.columnCommission = new global::System.Data.DataColumn("Commission", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommission);
                this.columnOthers = new global::System.Data.DataColumn("Others", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOthers);
                this.columnTotalIncome = new global::System.Data.DataColumn("TotalIncome", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalIncome);
                this.columnPFundEE = new global::System.Data.DataColumn("PFundEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPFundEE);
                this.columnPFundER = new global::System.Data.DataColumn("PFundER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPFundER);
                this.columnNetIncome = new global::System.Data.DataColumn("NetIncome", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetIncome);
                this.columnPayMethodAutoPay = new global::System.Data.DataColumn("PayMethodAutoPay", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayMethodAutoPay);
                this.columnPayMethodCheque = new global::System.Data.DataColumn("PayMethodCheque", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayMethodCheque);
                this.columnPayMethodCash = new global::System.Data.DataColumn("PayMethodCash", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayMethodCash);
                this.columnPayMethodOthers = new global::System.Data.DataColumn("PayMethodOthers", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayMethodOthers);
                this.columnTotalWagesForMinWages = new global::System.Data.DataColumn("TotalWagesForMinWages", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalWagesForMinWages);
                this.columnTotalWorkingHours = new global::System.Data.DataColumn("TotalWorkingHours", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalWorkingHours);
                this.columnMinWagesRequired = new global::System.Data.DataColumn("MinWagesRequired", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinWagesRequired);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TrialRunSummaryKey", new global::System.Data.DataColumn[] {
                                this.columnEmpPayrollID}, false));
                this.columnEmpPayrollID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrialRunSummaryRow NewTrialRunSummaryRow() {
                return ((TrialRunSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TrialRunSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TrialRunSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrialRunSummaryRowChanged != null)) {
                    this.TrialRunSummaryRowChanged(this, new TrialRunSummaryRowChangeEvent(((TrialRunSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrialRunSummaryRowChanging != null)) {
                    this.TrialRunSummaryRowChanging(this, new TrialRunSummaryRowChangeEvent(((TrialRunSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrialRunSummaryRowDeleted != null)) {
                    this.TrialRunSummaryRowDeleted(this, new TrialRunSummaryRowChangeEvent(((TrialRunSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrialRunSummaryRowDeleting != null)) {
                    this.TrialRunSummaryRowDeleting(this, new TrialRunSummaryRowChangeEvent(((TrialRunSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrialRunSummaryRow(TrialRunSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PayrollTrialRunSummaryDataSet ds = new PayrollTrialRunSummaryDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrialRunSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrialRunSummaryRow : global::System.Data.DataRow {
            
            private TrialRunSummaryDataTable tableTrialRunSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrialRunSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrialRunSummary = ((TrialRunSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpPayrollID {
                get {
                    try {
                        return ((int)(this[this.tableTrialRunSummary.EmpPayrollIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpPayrollID\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.EmpPayrollIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableTrialRunSummary.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNo {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.EmpNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNo\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.EmpNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpName {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.EmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpName\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.EmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpAlias {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.EmpAliasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpAlias\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.EmpAliasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HLevelDesc1 {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.HLevelDesc1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLevelDesc1\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.HLevelDesc1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HElementCode1 {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.HElementCode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementCode1\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.HElementCode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HElementDesc1 {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.HElementDesc1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementDesc1\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.HElementDesc1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HLevelDesc2 {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.HLevelDesc2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HLevelDesc2\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.HLevelDesc2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HElementCode2 {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.HElementCode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementCode2\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.HElementCode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HElementDesc2 {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.HElementDesc2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HElementDesc2\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.HElementDesc2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayGroupID {
                get {
                    try {
                        return ((int)(this[this.tableTrialRunSummary.PayGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupID\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayGroupDesc {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.PayGroupDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupDesc\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayGroupDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayrollPeriod {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.PayrollPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayrollPeriod\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayrollPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PayBatchValueDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTrialRunSummary.PayBatchValueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayBatchValueDate\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayBatchValueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayBatchRemark {
                get {
                    try {
                        return ((string)(this[this.tableTrialRunSummary.PayBatchRemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayBatchRemark\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayBatchRemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RecurringBasicSalary {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.RecurringBasicSalaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecurringBasicSalary\' in table \'TrialRunSummary\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.RecurringBasicSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BasicSalary {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.BasicSalaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasicSalary\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.BasicSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeaveAllowance {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.LeaveAllowanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveAllowance\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.LeaveAllowanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Overtime {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.OvertimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Overtime\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.OvertimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Bonus {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.BonusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bonus\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.BonusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Commission {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.CommissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Commission\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.CommissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Others {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.OthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Others\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.OthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalIncome {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.TotalIncomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalIncome\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.TotalIncomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PFundEE {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.PFundEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PFundEE\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PFundEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PFundER {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.PFundERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PFundER\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PFundERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NetIncome {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.NetIncomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetIncome\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.NetIncomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PayMethodAutoPay {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.PayMethodAutoPayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayMethodAutoPay\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayMethodAutoPayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PayMethodCheque {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.PayMethodChequeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayMethodCheque\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayMethodChequeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PayMethodCash {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.PayMethodCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayMethodCash\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayMethodCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PayMethodOthers {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.PayMethodOthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayMethodOthers\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.PayMethodOthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalWagesForMinWages {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.TotalWagesForMinWagesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalWagesForMinWages\' in table \'TrialRunSummary\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.TotalWagesForMinWagesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalWorkingHours {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.TotalWorkingHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalWorkingHours\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.TotalWorkingHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MinWagesRequired {
                get {
                    try {
                        return ((double)(this[this.tableTrialRunSummary.MinWagesRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinWagesRequired\' in table \'TrialRunSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrialRunSummary.MinWagesRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpPayrollIDNull() {
                return this.IsNull(this.tableTrialRunSummary.EmpPayrollIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpPayrollIDNull() {
                this[this.tableTrialRunSummary.EmpPayrollIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableTrialRunSummary.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableTrialRunSummary.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoNull() {
                return this.IsNull(this.tableTrialRunSummary.EmpNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoNull() {
                this[this.tableTrialRunSummary.EmpNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNameNull() {
                return this.IsNull(this.tableTrialRunSummary.EmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNameNull() {
                this[this.tableTrialRunSummary.EmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpAliasNull() {
                return this.IsNull(this.tableTrialRunSummary.EmpAliasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpAliasNull() {
                this[this.tableTrialRunSummary.EmpAliasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLevelDesc1Null() {
                return this.IsNull(this.tableTrialRunSummary.HLevelDesc1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLevelDesc1Null() {
                this[this.tableTrialRunSummary.HLevelDesc1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementCode1Null() {
                return this.IsNull(this.tableTrialRunSummary.HElementCode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementCode1Null() {
                this[this.tableTrialRunSummary.HElementCode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementDesc1Null() {
                return this.IsNull(this.tableTrialRunSummary.HElementDesc1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementDesc1Null() {
                this[this.tableTrialRunSummary.HElementDesc1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHLevelDesc2Null() {
                return this.IsNull(this.tableTrialRunSummary.HLevelDesc2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHLevelDesc2Null() {
                this[this.tableTrialRunSummary.HLevelDesc2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementCode2Null() {
                return this.IsNull(this.tableTrialRunSummary.HElementCode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementCode2Null() {
                this[this.tableTrialRunSummary.HElementCode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHElementDesc2Null() {
                return this.IsNull(this.tableTrialRunSummary.HElementDesc2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHElementDesc2Null() {
                this[this.tableTrialRunSummary.HElementDesc2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupIDNull() {
                return this.IsNull(this.tableTrialRunSummary.PayGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupIDNull() {
                this[this.tableTrialRunSummary.PayGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupDescNull() {
                return this.IsNull(this.tableTrialRunSummary.PayGroupDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupDescNull() {
                this[this.tableTrialRunSummary.PayGroupDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayrollPeriodNull() {
                return this.IsNull(this.tableTrialRunSummary.PayrollPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayrollPeriodNull() {
                this[this.tableTrialRunSummary.PayrollPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayBatchValueDateNull() {
                return this.IsNull(this.tableTrialRunSummary.PayBatchValueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayBatchValueDateNull() {
                this[this.tableTrialRunSummary.PayBatchValueDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayBatchRemarkNull() {
                return this.IsNull(this.tableTrialRunSummary.PayBatchRemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayBatchRemarkNull() {
                this[this.tableTrialRunSummary.PayBatchRemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecurringBasicSalaryNull() {
                return this.IsNull(this.tableTrialRunSummary.RecurringBasicSalaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecurringBasicSalaryNull() {
                this[this.tableTrialRunSummary.RecurringBasicSalaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasicSalaryNull() {
                return this.IsNull(this.tableTrialRunSummary.BasicSalaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasicSalaryNull() {
                this[this.tableTrialRunSummary.BasicSalaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveAllowanceNull() {
                return this.IsNull(this.tableTrialRunSummary.LeaveAllowanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveAllowanceNull() {
                this[this.tableTrialRunSummary.LeaveAllowanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOvertimeNull() {
                return this.IsNull(this.tableTrialRunSummary.OvertimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOvertimeNull() {
                this[this.tableTrialRunSummary.OvertimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBonusNull() {
                return this.IsNull(this.tableTrialRunSummary.BonusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBonusNull() {
                this[this.tableTrialRunSummary.BonusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionNull() {
                return this.IsNull(this.tableTrialRunSummary.CommissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionNull() {
                this[this.tableTrialRunSummary.CommissionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOthersNull() {
                return this.IsNull(this.tableTrialRunSummary.OthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOthersNull() {
                this[this.tableTrialRunSummary.OthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalIncomeNull() {
                return this.IsNull(this.tableTrialRunSummary.TotalIncomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalIncomeNull() {
                this[this.tableTrialRunSummary.TotalIncomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFundEENull() {
                return this.IsNull(this.tableTrialRunSummary.PFundEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFundEENull() {
                this[this.tableTrialRunSummary.PFundEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFundERNull() {
                return this.IsNull(this.tableTrialRunSummary.PFundERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFundERNull() {
                this[this.tableTrialRunSummary.PFundERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetIncomeNull() {
                return this.IsNull(this.tableTrialRunSummary.NetIncomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetIncomeNull() {
                this[this.tableTrialRunSummary.NetIncomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayMethodAutoPayNull() {
                return this.IsNull(this.tableTrialRunSummary.PayMethodAutoPayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayMethodAutoPayNull() {
                this[this.tableTrialRunSummary.PayMethodAutoPayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayMethodChequeNull() {
                return this.IsNull(this.tableTrialRunSummary.PayMethodChequeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayMethodChequeNull() {
                this[this.tableTrialRunSummary.PayMethodChequeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayMethodCashNull() {
                return this.IsNull(this.tableTrialRunSummary.PayMethodCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayMethodCashNull() {
                this[this.tableTrialRunSummary.PayMethodCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayMethodOthersNull() {
                return this.IsNull(this.tableTrialRunSummary.PayMethodOthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayMethodOthersNull() {
                this[this.tableTrialRunSummary.PayMethodOthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalWagesForMinWagesNull() {
                return this.IsNull(this.tableTrialRunSummary.TotalWagesForMinWagesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalWagesForMinWagesNull() {
                this[this.tableTrialRunSummary.TotalWagesForMinWagesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalWorkingHoursNull() {
                return this.IsNull(this.tableTrialRunSummary.TotalWorkingHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalWorkingHoursNull() {
                this[this.tableTrialRunSummary.TotalWorkingHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinWagesRequiredNull() {
                return this.IsNull(this.tableTrialRunSummary.MinWagesRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinWagesRequiredNull() {
                this[this.tableTrialRunSummary.MinWagesRequiredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrialRunSummaryRowChangeEvent : global::System.EventArgs {
            
            private TrialRunSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrialRunSummaryRowChangeEvent(TrialRunSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrialRunSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591