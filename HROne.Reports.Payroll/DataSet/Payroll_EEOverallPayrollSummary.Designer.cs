//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.Reports.Payroll.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Payroll_EEOverallPayrollSummary")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Payroll_EEOverallPayrollSummary : global::System.Data.DataSet {
        
        private EmpInfoDataTable tableEmpInfo;
        
        private OverallPaymentDataTable tableOverallPayment;
        
        private OverallContributionDataTable tableOverallContribution;
        
        private PaymentCodeDataTable tablePaymentCode;
        
        private GrandTotalPaymentCodeDataTable tableGrandTotalPaymentCode;
        
        private global::System.Data.DataRelation relationFK_EmpInfo_OverallPayment;
        
        private global::System.Data.DataRelation relationEmpInfo_Contribution;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Payroll_EEOverallPayrollSummary() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Payroll_EEOverallPayrollSummary(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EmpInfo"] != null)) {
                    base.Tables.Add(new EmpInfoDataTable(ds.Tables["EmpInfo"]));
                }
                if ((ds.Tables["OverallPayment"] != null)) {
                    base.Tables.Add(new OverallPaymentDataTable(ds.Tables["OverallPayment"]));
                }
                if ((ds.Tables["OverallContribution"] != null)) {
                    base.Tables.Add(new OverallContributionDataTable(ds.Tables["OverallContribution"]));
                }
                if ((ds.Tables["PaymentCode"] != null)) {
                    base.Tables.Add(new PaymentCodeDataTable(ds.Tables["PaymentCode"]));
                }
                if ((ds.Tables["GrandTotalPaymentCode"] != null)) {
                    base.Tables.Add(new GrandTotalPaymentCodeDataTable(ds.Tables["GrandTotalPaymentCode"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpInfoDataTable EmpInfo {
            get {
                return this.tableEmpInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OverallPaymentDataTable OverallPayment {
            get {
                return this.tableOverallPayment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OverallContributionDataTable OverallContribution {
            get {
                return this.tableOverallContribution;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentCodeDataTable PaymentCode {
            get {
                return this.tablePaymentCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GrandTotalPaymentCodeDataTable GrandTotalPaymentCode {
            get {
                return this.tableGrandTotalPaymentCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Payroll_EEOverallPayrollSummary cln = ((Payroll_EEOverallPayrollSummary)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EmpInfo"] != null)) {
                    base.Tables.Add(new EmpInfoDataTable(ds.Tables["EmpInfo"]));
                }
                if ((ds.Tables["OverallPayment"] != null)) {
                    base.Tables.Add(new OverallPaymentDataTable(ds.Tables["OverallPayment"]));
                }
                if ((ds.Tables["OverallContribution"] != null)) {
                    base.Tables.Add(new OverallContributionDataTable(ds.Tables["OverallContribution"]));
                }
                if ((ds.Tables["PaymentCode"] != null)) {
                    base.Tables.Add(new PaymentCodeDataTable(ds.Tables["PaymentCode"]));
                }
                if ((ds.Tables["GrandTotalPaymentCode"] != null)) {
                    base.Tables.Add(new GrandTotalPaymentCodeDataTable(ds.Tables["GrandTotalPaymentCode"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEmpInfo = ((EmpInfoDataTable)(base.Tables["EmpInfo"]));
            if ((initTable == true)) {
                if ((this.tableEmpInfo != null)) {
                    this.tableEmpInfo.InitVars();
                }
            }
            this.tableOverallPayment = ((OverallPaymentDataTable)(base.Tables["OverallPayment"]));
            if ((initTable == true)) {
                if ((this.tableOverallPayment != null)) {
                    this.tableOverallPayment.InitVars();
                }
            }
            this.tableOverallContribution = ((OverallContributionDataTable)(base.Tables["OverallContribution"]));
            if ((initTable == true)) {
                if ((this.tableOverallContribution != null)) {
                    this.tableOverallContribution.InitVars();
                }
            }
            this.tablePaymentCode = ((PaymentCodeDataTable)(base.Tables["PaymentCode"]));
            if ((initTable == true)) {
                if ((this.tablePaymentCode != null)) {
                    this.tablePaymentCode.InitVars();
                }
            }
            this.tableGrandTotalPaymentCode = ((GrandTotalPaymentCodeDataTable)(base.Tables["GrandTotalPaymentCode"]));
            if ((initTable == true)) {
                if ((this.tableGrandTotalPaymentCode != null)) {
                    this.tableGrandTotalPaymentCode.InitVars();
                }
            }
            this.relationFK_EmpInfo_OverallPayment = this.Relations["FK_EmpInfo_OverallPayment"];
            this.relationEmpInfo_Contribution = this.Relations["EmpInfo_Contribution"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Payroll_EEOverallPayrollSummary";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEmpInfo = new EmpInfoDataTable();
            base.Tables.Add(this.tableEmpInfo);
            this.tableOverallPayment = new OverallPaymentDataTable();
            base.Tables.Add(this.tableOverallPayment);
            this.tableOverallContribution = new OverallContributionDataTable();
            base.Tables.Add(this.tableOverallContribution);
            this.tablePaymentCode = new PaymentCodeDataTable();
            base.Tables.Add(this.tablePaymentCode);
            this.tableGrandTotalPaymentCode = new GrandTotalPaymentCodeDataTable();
            base.Tables.Add(this.tableGrandTotalPaymentCode);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_EmpInfo_OverallPayment", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOverallPayment.EmpIDColumn});
            this.tableOverallPayment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_EmpInfo_OverallPayment = new global::System.Data.DataRelation("FK_EmpInfo_OverallPayment", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOverallPayment.EmpIDColumn}, false);
            this.Relations.Add(this.relationFK_EmpInfo_OverallPayment);
            this.relationEmpInfo_Contribution = new global::System.Data.DataRelation("EmpInfo_Contribution", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOverallContribution.EmpIDColumn}, false);
            this.Relations.Add(this.relationEmpInfo_Contribution);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOverallPayment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOverallContribution() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaymentCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGrandTotalPaymentCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Payroll_EEOverallPayrollSummary ds = new Payroll_EEOverallPayrollSummary();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EmpInfoRowChangeEventHandler(object sender, EmpInfoRowChangeEvent e);
        
        public delegate void OverallPaymentRowChangeEventHandler(object sender, OverallPaymentRowChangeEvent e);
        
        public delegate void OverallContributionRowChangeEventHandler(object sender, OverallContributionRowChangeEvent e);
        
        public delegate void PaymentCodeRowChangeEventHandler(object sender, PaymentCodeRowChangeEvent e);
        
        public delegate void GrandTotalPaymentCodeRowChangeEventHandler(object sender, GrandTotalPaymentCodeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpNo;
            
            private global::System.Data.DataColumn columnEmpName;
            
            private global::System.Data.DataColumn columnCompanyCode;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnPositionDesc;
            
            private global::System.Data.DataColumn columnJoinDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoDataTable() {
                this.TableName = "EmpInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoColumn {
                get {
                    return this.columnEmpNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNameColumn {
                get {
                    return this.columnEmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyCodeColumn {
                get {
                    return this.columnCompanyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionDescColumn {
                get {
                    return this.columnPositionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinDateColumn {
                get {
                    return this.columnJoinDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow this[int index] {
                get {
                    return ((EmpInfoRow)(this.Rows[index]));
                }
            }
            
            public event EmpInfoRowChangeEventHandler EmpInfoRowChanging;
            
            public event EmpInfoRowChangeEventHandler EmpInfoRowChanged;
            
            public event EmpInfoRowChangeEventHandler EmpInfoRowDeleting;
            
            public event EmpInfoRowChangeEventHandler EmpInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpInfoRow(EmpInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow AddEmpInfoRow(int EmpID, string EmpNo, string EmpName, string CompanyCode, string CompanyName, string PositionDesc, System.DateTime JoinDate) {
                EmpInfoRow rowEmpInfoRow = ((EmpInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpID,
                        EmpNo,
                        EmpName,
                        CompanyCode,
                        CompanyName,
                        PositionDesc,
                        JoinDate};
                rowEmpInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpInfoRow);
                return rowEmpInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow FindByEmpID(int EmpID) {
                return ((EmpInfoRow)(this.Rows.Find(new object[] {
                            EmpID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpInfoDataTable cln = ((EmpInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpNo = base.Columns["EmpNo"];
                this.columnEmpName = base.Columns["EmpName"];
                this.columnCompanyCode = base.Columns["CompanyCode"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnPositionDesc = base.Columns["PositionDesc"];
                this.columnJoinDate = base.Columns["JoinDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpNo = new global::System.Data.DataColumn("EmpNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNo);
                this.columnEmpName = new global::System.Data.DataColumn("EmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpName);
                this.columnCompanyCode = new global::System.Data.DataColumn("CompanyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyCode);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnPositionDesc = new global::System.Data.DataColumn("PositionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionDesc);
                this.columnJoinDate = new global::System.Data.DataColumn("JoinDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpID}, true));
                this.columnEmpID.AllowDBNull = false;
                this.columnEmpID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow NewEmpInfoRow() {
                return ((EmpInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpInfoRowChanged != null)) {
                    this.EmpInfoRowChanged(this, new EmpInfoRowChangeEvent(((EmpInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpInfoRowChanging != null)) {
                    this.EmpInfoRowChanging(this, new EmpInfoRowChangeEvent(((EmpInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpInfoRowDeleted != null)) {
                    this.EmpInfoRowDeleted(this, new EmpInfoRowChangeEvent(((EmpInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpInfoRowDeleting != null)) {
                    this.EmpInfoRowDeleting(this, new EmpInfoRowChangeEvent(((EmpInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpInfoRow(EmpInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_EEOverallPayrollSummary ds = new Payroll_EEOverallPayrollSummary();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OverallPaymentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnPaymentCodeDisplaySeqNo;
            
            private global::System.Data.DataColumn columnIsTaxable;
            
            private global::System.Data.DataColumn columnAmount01;
            
            private global::System.Data.DataColumn columnAmount02;
            
            private global::System.Data.DataColumn columnAmount03;
            
            private global::System.Data.DataColumn columnAmount04;
            
            private global::System.Data.DataColumn columnAmount05;
            
            private global::System.Data.DataColumn columnAmount06;
            
            private global::System.Data.DataColumn columnAmount07;
            
            private global::System.Data.DataColumn columnAmount08;
            
            private global::System.Data.DataColumn columnAmount09;
            
            private global::System.Data.DataColumn columnAmount10;
            
            private global::System.Data.DataColumn columnAmount11;
            
            private global::System.Data.DataColumn columnAmount12;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallPaymentDataTable() {
                this.TableName = "OverallPayment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OverallPaymentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OverallPaymentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDisplaySeqNoColumn {
                get {
                    return this.columnPaymentCodeDisplaySeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTaxableColumn {
                get {
                    return this.columnIsTaxable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount01Column {
                get {
                    return this.columnAmount01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount02Column {
                get {
                    return this.columnAmount02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount03Column {
                get {
                    return this.columnAmount03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount04Column {
                get {
                    return this.columnAmount04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount05Column {
                get {
                    return this.columnAmount05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount06Column {
                get {
                    return this.columnAmount06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount07Column {
                get {
                    return this.columnAmount07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount08Column {
                get {
                    return this.columnAmount08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount09Column {
                get {
                    return this.columnAmount09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount10Column {
                get {
                    return this.columnAmount10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount11Column {
                get {
                    return this.columnAmount11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount12Column {
                get {
                    return this.columnAmount12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallPaymentRow this[int index] {
                get {
                    return ((OverallPaymentRow)(this.Rows[index]));
                }
            }
            
            public event OverallPaymentRowChangeEventHandler OverallPaymentRowChanging;
            
            public event OverallPaymentRowChangeEventHandler OverallPaymentRowChanged;
            
            public event OverallPaymentRowChangeEventHandler OverallPaymentRowDeleting;
            
            public event OverallPaymentRowChangeEventHandler OverallPaymentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOverallPaymentRow(OverallPaymentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallPaymentRow AddOverallPaymentRow(
                        EmpInfoRow parentEmpInfoRowByFK_EmpInfo_OverallPayment, 
                        string PaymentCode, 
                        int PaymentCodeDisplaySeqNo, 
                        bool IsTaxable, 
                        double Amount01, 
                        double Amount02, 
                        double Amount03, 
                        double Amount04, 
                        double Amount05, 
                        double Amount06, 
                        double Amount07, 
                        double Amount08, 
                        double Amount09, 
                        double Amount10, 
                        double Amount11, 
                        double Amount12) {
                OverallPaymentRow rowOverallPaymentRow = ((OverallPaymentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PaymentCode,
                        PaymentCodeDisplaySeqNo,
                        IsTaxable,
                        Amount01,
                        Amount02,
                        Amount03,
                        Amount04,
                        Amount05,
                        Amount06,
                        Amount07,
                        Amount08,
                        Amount09,
                        Amount10,
                        Amount11,
                        Amount12};
                if ((parentEmpInfoRowByFK_EmpInfo_OverallPayment != null)) {
                    columnValuesArray[0] = parentEmpInfoRowByFK_EmpInfo_OverallPayment[0];
                }
                rowOverallPaymentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOverallPaymentRow);
                return rowOverallPaymentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OverallPaymentDataTable cln = ((OverallPaymentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OverallPaymentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnPaymentCodeDisplaySeqNo = base.Columns["PaymentCodeDisplaySeqNo"];
                this.columnIsTaxable = base.Columns["IsTaxable"];
                this.columnAmount01 = base.Columns["Amount01"];
                this.columnAmount02 = base.Columns["Amount02"];
                this.columnAmount03 = base.Columns["Amount03"];
                this.columnAmount04 = base.Columns["Amount04"];
                this.columnAmount05 = base.Columns["Amount05"];
                this.columnAmount06 = base.Columns["Amount06"];
                this.columnAmount07 = base.Columns["Amount07"];
                this.columnAmount08 = base.Columns["Amount08"];
                this.columnAmount09 = base.Columns["Amount09"];
                this.columnAmount10 = base.Columns["Amount10"];
                this.columnAmount11 = base.Columns["Amount11"];
                this.columnAmount12 = base.Columns["Amount12"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnPaymentCodeDisplaySeqNo = new global::System.Data.DataColumn("PaymentCodeDisplaySeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDisplaySeqNo);
                this.columnIsTaxable = new global::System.Data.DataColumn("IsTaxable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTaxable);
                this.columnAmount01 = new global::System.Data.DataColumn("Amount01", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount01);
                this.columnAmount02 = new global::System.Data.DataColumn("Amount02", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount02);
                this.columnAmount03 = new global::System.Data.DataColumn("Amount03", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount03);
                this.columnAmount04 = new global::System.Data.DataColumn("Amount04", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount04);
                this.columnAmount05 = new global::System.Data.DataColumn("Amount05", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount05);
                this.columnAmount06 = new global::System.Data.DataColumn("Amount06", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount06);
                this.columnAmount07 = new global::System.Data.DataColumn("Amount07", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount07);
                this.columnAmount08 = new global::System.Data.DataColumn("Amount08", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount08);
                this.columnAmount09 = new global::System.Data.DataColumn("Amount09", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount09);
                this.columnAmount10 = new global::System.Data.DataColumn("Amount10", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount10);
                this.columnAmount11 = new global::System.Data.DataColumn("Amount11", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount11);
                this.columnAmount12 = new global::System.Data.DataColumn("Amount12", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount12);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallPaymentRow NewOverallPaymentRow() {
                return ((OverallPaymentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OverallPaymentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OverallPaymentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OverallPaymentRowChanged != null)) {
                    this.OverallPaymentRowChanged(this, new OverallPaymentRowChangeEvent(((OverallPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OverallPaymentRowChanging != null)) {
                    this.OverallPaymentRowChanging(this, new OverallPaymentRowChangeEvent(((OverallPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OverallPaymentRowDeleted != null)) {
                    this.OverallPaymentRowDeleted(this, new OverallPaymentRowChangeEvent(((OverallPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OverallPaymentRowDeleting != null)) {
                    this.OverallPaymentRowDeleting(this, new OverallPaymentRowChangeEvent(((OverallPaymentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOverallPaymentRow(OverallPaymentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_EEOverallPayrollSummary ds = new Payroll_EEOverallPayrollSummary();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OverallPaymentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OverallContributionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnAmount01;
            
            private global::System.Data.DataColumn columnAmount02;
            
            private global::System.Data.DataColumn columnAmount03;
            
            private global::System.Data.DataColumn columnAmount04;
            
            private global::System.Data.DataColumn columnAmount05;
            
            private global::System.Data.DataColumn columnAmount06;
            
            private global::System.Data.DataColumn columnAmount07;
            
            private global::System.Data.DataColumn columnAmount08;
            
            private global::System.Data.DataColumn columnAmount09;
            
            private global::System.Data.DataColumn columnAmount10;
            
            private global::System.Data.DataColumn columnAmount11;
            
            private global::System.Data.DataColumn columnAmount12;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallContributionDataTable() {
                this.TableName = "OverallContribution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OverallContributionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OverallContributionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount01Column {
                get {
                    return this.columnAmount01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount02Column {
                get {
                    return this.columnAmount02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount03Column {
                get {
                    return this.columnAmount03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount04Column {
                get {
                    return this.columnAmount04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount05Column {
                get {
                    return this.columnAmount05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount06Column {
                get {
                    return this.columnAmount06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount07Column {
                get {
                    return this.columnAmount07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount08Column {
                get {
                    return this.columnAmount08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount09Column {
                get {
                    return this.columnAmount09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount10Column {
                get {
                    return this.columnAmount10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount11Column {
                get {
                    return this.columnAmount11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Amount12Column {
                get {
                    return this.columnAmount12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallContributionRow this[int index] {
                get {
                    return ((OverallContributionRow)(this.Rows[index]));
                }
            }
            
            public event OverallContributionRowChangeEventHandler OverallContributionRowChanging;
            
            public event OverallContributionRowChangeEventHandler OverallContributionRowChanged;
            
            public event OverallContributionRowChangeEventHandler OverallContributionRowDeleting;
            
            public event OverallContributionRowChangeEventHandler OverallContributionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOverallContributionRow(OverallContributionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallContributionRow AddOverallContributionRow(EmpInfoRow parentEmpInfoRowByEmpInfo_Contribution, string PaymentCode, double Amount01, double Amount02, double Amount03, double Amount04, double Amount05, double Amount06, double Amount07, double Amount08, double Amount09, double Amount10, double Amount11, double Amount12) {
                OverallContributionRow rowOverallContributionRow = ((OverallContributionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PaymentCode,
                        Amount01,
                        Amount02,
                        Amount03,
                        Amount04,
                        Amount05,
                        Amount06,
                        Amount07,
                        Amount08,
                        Amount09,
                        Amount10,
                        Amount11,
                        Amount12};
                if ((parentEmpInfoRowByEmpInfo_Contribution != null)) {
                    columnValuesArray[0] = parentEmpInfoRowByEmpInfo_Contribution[0];
                }
                rowOverallContributionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOverallContributionRow);
                return rowOverallContributionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OverallContributionDataTable cln = ((OverallContributionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OverallContributionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnAmount01 = base.Columns["Amount01"];
                this.columnAmount02 = base.Columns["Amount02"];
                this.columnAmount03 = base.Columns["Amount03"];
                this.columnAmount04 = base.Columns["Amount04"];
                this.columnAmount05 = base.Columns["Amount05"];
                this.columnAmount06 = base.Columns["Amount06"];
                this.columnAmount07 = base.Columns["Amount07"];
                this.columnAmount08 = base.Columns["Amount08"];
                this.columnAmount09 = base.Columns["Amount09"];
                this.columnAmount10 = base.Columns["Amount10"];
                this.columnAmount11 = base.Columns["Amount11"];
                this.columnAmount12 = base.Columns["Amount12"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnAmount01 = new global::System.Data.DataColumn("Amount01", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount01);
                this.columnAmount02 = new global::System.Data.DataColumn("Amount02", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount02);
                this.columnAmount03 = new global::System.Data.DataColumn("Amount03", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount03);
                this.columnAmount04 = new global::System.Data.DataColumn("Amount04", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount04);
                this.columnAmount05 = new global::System.Data.DataColumn("Amount05", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount05);
                this.columnAmount06 = new global::System.Data.DataColumn("Amount06", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount06);
                this.columnAmount07 = new global::System.Data.DataColumn("Amount07", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount07);
                this.columnAmount08 = new global::System.Data.DataColumn("Amount08", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount08);
                this.columnAmount09 = new global::System.Data.DataColumn("Amount09", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount09);
                this.columnAmount10 = new global::System.Data.DataColumn("Amount10", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount10);
                this.columnAmount11 = new global::System.Data.DataColumn("Amount11", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount11);
                this.columnAmount12 = new global::System.Data.DataColumn("Amount12", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount12);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallContributionRow NewOverallContributionRow() {
                return ((OverallContributionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OverallContributionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OverallContributionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OverallContributionRowChanged != null)) {
                    this.OverallContributionRowChanged(this, new OverallContributionRowChangeEvent(((OverallContributionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OverallContributionRowChanging != null)) {
                    this.OverallContributionRowChanging(this, new OverallContributionRowChangeEvent(((OverallContributionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OverallContributionRowDeleted != null)) {
                    this.OverallContributionRowDeleted(this, new OverallContributionRowChangeEvent(((OverallContributionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OverallContributionRowDeleting != null)) {
                    this.OverallContributionRowDeleting(this, new OverallContributionRowChangeEvent(((OverallContributionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOverallContributionRow(OverallContributionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_EEOverallPayrollSummary ds = new Payroll_EEOverallPayrollSummary();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OverallContributionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaymentCodeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPaymentCodeID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnPaymentCodeDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeDataTable() {
                this.TableName = "PaymentCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaymentCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIDColumn {
                get {
                    return this.columnPaymentCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDescColumn {
                get {
                    return this.columnPaymentCodeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow this[int index] {
                get {
                    return ((PaymentCodeRow)(this.Rows[index]));
                }
            }
            
            public event PaymentCodeRowChangeEventHandler PaymentCodeRowChanging;
            
            public event PaymentCodeRowChangeEventHandler PaymentCodeRowChanged;
            
            public event PaymentCodeRowChangeEventHandler PaymentCodeRowDeleting;
            
            public event PaymentCodeRowChangeEventHandler PaymentCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaymentCodeRow(PaymentCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow AddPaymentCodeRow(int PaymentCodeID, int EmpID, string PaymentCode, string PaymentCodeDesc) {
                PaymentCodeRow rowPaymentCodeRow = ((PaymentCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PaymentCodeID,
                        EmpID,
                        PaymentCode,
                        PaymentCodeDesc};
                rowPaymentCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaymentCodeRow);
                return rowPaymentCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaymentCodeDataTable cln = ((PaymentCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaymentCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPaymentCodeID = base.Columns["PaymentCodeID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnPaymentCodeDesc = base.Columns["PaymentCodeDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPaymentCodeID = new global::System.Data.DataColumn("PaymentCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnPaymentCodeDesc = new global::System.Data.DataColumn("PaymentCodeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDesc);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PaymentCodeKey1", new global::System.Data.DataColumn[] {
                                this.columnPaymentCodeID,
                                this.columnEmpID}, false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow NewPaymentCodeRow() {
                return ((PaymentCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaymentCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaymentCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentCodeRowChanged != null)) {
                    this.PaymentCodeRowChanged(this, new PaymentCodeRowChangeEvent(((PaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentCodeRowChanging != null)) {
                    this.PaymentCodeRowChanging(this, new PaymentCodeRowChangeEvent(((PaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentCodeRowDeleted != null)) {
                    this.PaymentCodeRowDeleted(this, new PaymentCodeRowChangeEvent(((PaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentCodeRowDeleting != null)) {
                    this.PaymentCodeRowDeleting(this, new PaymentCodeRowChangeEvent(((PaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaymentCodeRow(PaymentCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_EEOverallPayrollSummary ds = new Payroll_EEOverallPayrollSummary();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GrandTotalPaymentCodeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPaymentCodeID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnPaymentCodeDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GrandTotalPaymentCodeDataTable() {
                this.TableName = "GrandTotalPaymentCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GrandTotalPaymentCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GrandTotalPaymentCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIDColumn {
                get {
                    return this.columnPaymentCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDescColumn {
                get {
                    return this.columnPaymentCodeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GrandTotalPaymentCodeRow this[int index] {
                get {
                    return ((GrandTotalPaymentCodeRow)(this.Rows[index]));
                }
            }
            
            public event GrandTotalPaymentCodeRowChangeEventHandler GrandTotalPaymentCodeRowChanging;
            
            public event GrandTotalPaymentCodeRowChangeEventHandler GrandTotalPaymentCodeRowChanged;
            
            public event GrandTotalPaymentCodeRowChangeEventHandler GrandTotalPaymentCodeRowDeleting;
            
            public event GrandTotalPaymentCodeRowChangeEventHandler GrandTotalPaymentCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGrandTotalPaymentCodeRow(GrandTotalPaymentCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GrandTotalPaymentCodeRow AddGrandTotalPaymentCodeRow(int PaymentCodeID, string PaymentCode, string PaymentCodeDesc) {
                GrandTotalPaymentCodeRow rowGrandTotalPaymentCodeRow = ((GrandTotalPaymentCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PaymentCodeID,
                        PaymentCode,
                        PaymentCodeDesc};
                rowGrandTotalPaymentCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGrandTotalPaymentCodeRow);
                return rowGrandTotalPaymentCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GrandTotalPaymentCodeDataTable cln = ((GrandTotalPaymentCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GrandTotalPaymentCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPaymentCodeID = base.Columns["PaymentCodeID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnPaymentCodeDesc = base.Columns["PaymentCodeDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPaymentCodeID = new global::System.Data.DataColumn("PaymentCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnPaymentCodeDesc = new global::System.Data.DataColumn("PaymentCodeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDesc);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPaymentCodeID}, false));
                this.columnPaymentCodeID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GrandTotalPaymentCodeRow NewGrandTotalPaymentCodeRow() {
                return ((GrandTotalPaymentCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GrandTotalPaymentCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GrandTotalPaymentCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GrandTotalPaymentCodeRowChanged != null)) {
                    this.GrandTotalPaymentCodeRowChanged(this, new GrandTotalPaymentCodeRowChangeEvent(((GrandTotalPaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GrandTotalPaymentCodeRowChanging != null)) {
                    this.GrandTotalPaymentCodeRowChanging(this, new GrandTotalPaymentCodeRowChangeEvent(((GrandTotalPaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GrandTotalPaymentCodeRowDeleted != null)) {
                    this.GrandTotalPaymentCodeRowDeleted(this, new GrandTotalPaymentCodeRowChangeEvent(((GrandTotalPaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GrandTotalPaymentCodeRowDeleting != null)) {
                    this.GrandTotalPaymentCodeRowDeleting(this, new GrandTotalPaymentCodeRowChangeEvent(((GrandTotalPaymentCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGrandTotalPaymentCodeRow(GrandTotalPaymentCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_EEOverallPayrollSummary ds = new Payroll_EEOverallPayrollSummary();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GrandTotalPaymentCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpInfoRow : global::System.Data.DataRow {
            
            private EmpInfoDataTable tableEmpInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpInfo = ((EmpInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tableEmpInfo.EmpIDColumn]));
                }
                set {
                    this[this.tableEmpInfo.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNo {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.EmpNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNo\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpName {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.EmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpName\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyCode {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.CompanyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyCode\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.CompanyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.PositionDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionDesc\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.PositionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime JoinDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.JoinDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JoinDate\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.JoinDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoNull() {
                return this.IsNull(this.tableEmpInfo.EmpNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoNull() {
                this[this.tableEmpInfo.EmpNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNameNull() {
                return this.IsNull(this.tableEmpInfo.EmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNameNull() {
                this[this.tableEmpInfo.EmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyCodeNull() {
                return this.IsNull(this.tableEmpInfo.CompanyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyCodeNull() {
                this[this.tableEmpInfo.CompanyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableEmpInfo.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableEmpInfo.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionDescNull() {
                return this.IsNull(this.tableEmpInfo.PositionDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionDescNull() {
                this[this.tableEmpInfo.PositionDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinDateNull() {
                return this.IsNull(this.tableEmpInfo.JoinDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinDateNull() {
                this[this.tableEmpInfo.JoinDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallPaymentRow[] GetOverallPaymentRows() {
                if ((this.Table.ChildRelations["FK_EmpInfo_OverallPayment"] == null)) {
                    return new OverallPaymentRow[0];
                }
                else {
                    return ((OverallPaymentRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EmpInfo_OverallPayment"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallContributionRow[] GetOverallContributionRows() {
                if ((this.Table.ChildRelations["EmpInfo_Contribution"] == null)) {
                    return new OverallContributionRow[0];
                }
                else {
                    return ((OverallContributionRow[])(base.GetChildRows(this.Table.ChildRelations["EmpInfo_Contribution"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OverallPaymentRow : global::System.Data.DataRow {
            
            private OverallPaymentDataTable tableOverallPayment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OverallPaymentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOverallPayment = ((OverallPaymentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableOverallPayment.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tableOverallPayment.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeDisplaySeqNo {
                get {
                    try {
                        return ((int)(this[this.tableOverallPayment.PaymentCodeDisplaySeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDisplaySeqNo\' in table \'OverallPayment\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.PaymentCodeDisplaySeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxable {
                get {
                    try {
                        return ((bool)(this[this.tableOverallPayment.IsTaxableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTaxable\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.IsTaxableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount01 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount01\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount02 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount02\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount03 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount03\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount04 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount04\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount05 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount05\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount06 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount06\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount07 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount07\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount08 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount08\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount09 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount09\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount10 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount10\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount11 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount11\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount12 {
                get {
                    try {
                        return ((double)(this[this.tableOverallPayment.Amount12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount12\' in table \'OverallPayment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallPayment.Amount12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow EmpInfoRow {
                get {
                    return ((EmpInfoRow)(this.GetParentRow(this.Table.ParentRelations["FK_EmpInfo_OverallPayment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EmpInfo_OverallPayment"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableOverallPayment.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableOverallPayment.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tableOverallPayment.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tableOverallPayment.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDisplaySeqNoNull() {
                return this.IsNull(this.tableOverallPayment.PaymentCodeDisplaySeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDisplaySeqNoNull() {
                this[this.tableOverallPayment.PaymentCodeDisplaySeqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTaxableNull() {
                return this.IsNull(this.tableOverallPayment.IsTaxableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTaxableNull() {
                this[this.tableOverallPayment.IsTaxableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount01Null() {
                return this.IsNull(this.tableOverallPayment.Amount01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount01Null() {
                this[this.tableOverallPayment.Amount01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount02Null() {
                return this.IsNull(this.tableOverallPayment.Amount02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount02Null() {
                this[this.tableOverallPayment.Amount02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount03Null() {
                return this.IsNull(this.tableOverallPayment.Amount03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount03Null() {
                this[this.tableOverallPayment.Amount03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount04Null() {
                return this.IsNull(this.tableOverallPayment.Amount04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount04Null() {
                this[this.tableOverallPayment.Amount04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount05Null() {
                return this.IsNull(this.tableOverallPayment.Amount05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount05Null() {
                this[this.tableOverallPayment.Amount05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount06Null() {
                return this.IsNull(this.tableOverallPayment.Amount06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount06Null() {
                this[this.tableOverallPayment.Amount06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount07Null() {
                return this.IsNull(this.tableOverallPayment.Amount07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount07Null() {
                this[this.tableOverallPayment.Amount07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount08Null() {
                return this.IsNull(this.tableOverallPayment.Amount08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount08Null() {
                this[this.tableOverallPayment.Amount08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount09Null() {
                return this.IsNull(this.tableOverallPayment.Amount09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount09Null() {
                this[this.tableOverallPayment.Amount09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount10Null() {
                return this.IsNull(this.tableOverallPayment.Amount10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount10Null() {
                this[this.tableOverallPayment.Amount10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount11Null() {
                return this.IsNull(this.tableOverallPayment.Amount11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount11Null() {
                this[this.tableOverallPayment.Amount11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount12Null() {
                return this.IsNull(this.tableOverallPayment.Amount12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount12Null() {
                this[this.tableOverallPayment.Amount12Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OverallContributionRow : global::System.Data.DataRow {
            
            private OverallContributionDataTable tableOverallContribution;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OverallContributionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOverallContribution = ((OverallContributionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableOverallContribution.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tableOverallContribution.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount01 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount01\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount02 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount02\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount03 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount03\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount04 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount04\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount05 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount05\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount06 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount06\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount07 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount07\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount08 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount08\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount09 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount09\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount10 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount10\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount11 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount11\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount12 {
                get {
                    try {
                        return ((double)(this[this.tableOverallContribution.Amount12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount12\' in table \'OverallContribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverallContribution.Amount12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow EmpInfoRow {
                get {
                    return ((EmpInfoRow)(this.GetParentRow(this.Table.ParentRelations["EmpInfo_Contribution"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EmpInfo_Contribution"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableOverallContribution.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableOverallContribution.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tableOverallContribution.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tableOverallContribution.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount01Null() {
                return this.IsNull(this.tableOverallContribution.Amount01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount01Null() {
                this[this.tableOverallContribution.Amount01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount02Null() {
                return this.IsNull(this.tableOverallContribution.Amount02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount02Null() {
                this[this.tableOverallContribution.Amount02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount03Null() {
                return this.IsNull(this.tableOverallContribution.Amount03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount03Null() {
                this[this.tableOverallContribution.Amount03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount04Null() {
                return this.IsNull(this.tableOverallContribution.Amount04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount04Null() {
                this[this.tableOverallContribution.Amount04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount05Null() {
                return this.IsNull(this.tableOverallContribution.Amount05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount05Null() {
                this[this.tableOverallContribution.Amount05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount06Null() {
                return this.IsNull(this.tableOverallContribution.Amount06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount06Null() {
                this[this.tableOverallContribution.Amount06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount07Null() {
                return this.IsNull(this.tableOverallContribution.Amount07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount07Null() {
                this[this.tableOverallContribution.Amount07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount08Null() {
                return this.IsNull(this.tableOverallContribution.Amount08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount08Null() {
                this[this.tableOverallContribution.Amount08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount09Null() {
                return this.IsNull(this.tableOverallContribution.Amount09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount09Null() {
                this[this.tableOverallContribution.Amount09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount10Null() {
                return this.IsNull(this.tableOverallContribution.Amount10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount10Null() {
                this[this.tableOverallContribution.Amount10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount11Null() {
                return this.IsNull(this.tableOverallContribution.Amount11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount11Null() {
                this[this.tableOverallContribution.Amount11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmount12Null() {
                return this.IsNull(this.tableOverallContribution.Amount12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmount12Null() {
                this[this.tableOverallContribution.Amount12Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaymentCodeRow : global::System.Data.DataRow {
            
            private PaymentCodeDataTable tablePaymentCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentCode = ((PaymentCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.PaymentCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeID\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentCode.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tablePaymentCode.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCodeDesc {
                get {
                    try {
                        return ((string)(this[this.tablePaymentCode.PaymentCodeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDesc\' in table \'PaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentCode.PaymentCodeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIDNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIDNull() {
                this[this.tablePaymentCode.PaymentCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tablePaymentCode.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tablePaymentCode.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tablePaymentCode.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDescNull() {
                return this.IsNull(this.tablePaymentCode.PaymentCodeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDescNull() {
                this[this.tablePaymentCode.PaymentCodeDescColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GrandTotalPaymentCodeRow : global::System.Data.DataRow {
            
            private GrandTotalPaymentCodeDataTable tableGrandTotalPaymentCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GrandTotalPaymentCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGrandTotalPaymentCode = ((GrandTotalPaymentCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeID {
                get {
                    try {
                        return ((int)(this[this.tableGrandTotalPaymentCode.PaymentCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeID\' in table \'GrandTotalPaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGrandTotalPaymentCode.PaymentCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tableGrandTotalPaymentCode.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'GrandTotalPaymentCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGrandTotalPaymentCode.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCodeDesc {
                get {
                    try {
                        return ((string)(this[this.tableGrandTotalPaymentCode.PaymentCodeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDesc\' in table \'GrandTotalPaymentCode\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGrandTotalPaymentCode.PaymentCodeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIDNull() {
                return this.IsNull(this.tableGrandTotalPaymentCode.PaymentCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIDNull() {
                this[this.tableGrandTotalPaymentCode.PaymentCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tableGrandTotalPaymentCode.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tableGrandTotalPaymentCode.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDescNull() {
                return this.IsNull(this.tableGrandTotalPaymentCode.PaymentCodeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDescNull() {
                this[this.tableGrandTotalPaymentCode.PaymentCodeDescColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpInfoRowChangeEvent : global::System.EventArgs {
            
            private EmpInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRowChangeEvent(EmpInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OverallPaymentRowChangeEvent : global::System.EventArgs {
            
            private OverallPaymentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallPaymentRowChangeEvent(OverallPaymentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallPaymentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OverallContributionRowChangeEvent : global::System.EventArgs {
            
            private OverallContributionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallContributionRowChangeEvent(OverallContributionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverallContributionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaymentCodeRowChangeEvent : global::System.EventArgs {
            
            private PaymentCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRowChangeEvent(PaymentCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GrandTotalPaymentCodeRowChangeEvent : global::System.EventArgs {
            
            private GrandTotalPaymentCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GrandTotalPaymentCodeRowChangeEvent(GrandTotalPaymentCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GrandTotalPaymentCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591