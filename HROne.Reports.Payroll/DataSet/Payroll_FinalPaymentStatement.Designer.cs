//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HROne.Reports.Payroll.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Payroll_FinalPaymentStatement")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Payroll_FinalPaymentStatement : global::System.Data.DataSet {
        
        private PaySlipDataTable tablePaySlip;
        
        private PaySlip_MPFDataTable tablePaySlip_MPF;
        
        private LeaveBalanceDataTable tableLeaveBalance;
        
        private PaySlip_ORSODataTable tablePaySlip_ORSO;
        
        private EmpInfoDataTable tableEmpInfo;
        
        private PaySlip_AllowanceDataTable tablePaySlip_Allowance;
        
        private PaySlip_DeductionDataTable tablePaySlip_Deduction;
        
        private global::System.Data.DataRelation relationEmpInfo_PaySlip;
        
        private global::System.Data.DataRelation relationPaySlip_LeaveBalance;
        
        private global::System.Data.DataRelation relationPaySlip_PaySlip_MPF;
        
        private global::System.Data.DataRelation relationPaySlip_PaySlip_ORSO;
        
        private global::System.Data.DataRelation relationEmpInfo_PaySlip_Allowance;
        
        private global::System.Data.DataRelation relationEmpInfo_PaySlip_Deduction;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Payroll_FinalPaymentStatement() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Payroll_FinalPaymentStatement(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PaySlip"] != null)) {
                    base.Tables.Add(new PaySlipDataTable(ds.Tables["PaySlip"]));
                }
                if ((ds.Tables["PaySlip_MPF"] != null)) {
                    base.Tables.Add(new PaySlip_MPFDataTable(ds.Tables["PaySlip_MPF"]));
                }
                if ((ds.Tables["LeaveBalance"] != null)) {
                    base.Tables.Add(new LeaveBalanceDataTable(ds.Tables["LeaveBalance"]));
                }
                if ((ds.Tables["PaySlip_ORSO"] != null)) {
                    base.Tables.Add(new PaySlip_ORSODataTable(ds.Tables["PaySlip_ORSO"]));
                }
                if ((ds.Tables["EmpInfo"] != null)) {
                    base.Tables.Add(new EmpInfoDataTable(ds.Tables["EmpInfo"]));
                }
                if ((ds.Tables["PaySlip_Allowance"] != null)) {
                    base.Tables.Add(new PaySlip_AllowanceDataTable(ds.Tables["PaySlip_Allowance"]));
                }
                if ((ds.Tables["PaySlip_Deduction"] != null)) {
                    base.Tables.Add(new PaySlip_DeductionDataTable(ds.Tables["PaySlip_Deduction"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaySlipDataTable PaySlip {
            get {
                return this.tablePaySlip;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaySlip_MPFDataTable PaySlip_MPF {
            get {
                return this.tablePaySlip_MPF;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LeaveBalanceDataTable LeaveBalance {
            get {
                return this.tableLeaveBalance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaySlip_ORSODataTable PaySlip_ORSO {
            get {
                return this.tablePaySlip_ORSO;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpInfoDataTable EmpInfo {
            get {
                return this.tableEmpInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaySlip_AllowanceDataTable PaySlip_Allowance {
            get {
                return this.tablePaySlip_Allowance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaySlip_DeductionDataTable PaySlip_Deduction {
            get {
                return this.tablePaySlip_Deduction;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Payroll_FinalPaymentStatement cln = ((Payroll_FinalPaymentStatement)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PaySlip"] != null)) {
                    base.Tables.Add(new PaySlipDataTable(ds.Tables["PaySlip"]));
                }
                if ((ds.Tables["PaySlip_MPF"] != null)) {
                    base.Tables.Add(new PaySlip_MPFDataTable(ds.Tables["PaySlip_MPF"]));
                }
                if ((ds.Tables["LeaveBalance"] != null)) {
                    base.Tables.Add(new LeaveBalanceDataTable(ds.Tables["LeaveBalance"]));
                }
                if ((ds.Tables["PaySlip_ORSO"] != null)) {
                    base.Tables.Add(new PaySlip_ORSODataTable(ds.Tables["PaySlip_ORSO"]));
                }
                if ((ds.Tables["EmpInfo"] != null)) {
                    base.Tables.Add(new EmpInfoDataTable(ds.Tables["EmpInfo"]));
                }
                if ((ds.Tables["PaySlip_Allowance"] != null)) {
                    base.Tables.Add(new PaySlip_AllowanceDataTable(ds.Tables["PaySlip_Allowance"]));
                }
                if ((ds.Tables["PaySlip_Deduction"] != null)) {
                    base.Tables.Add(new PaySlip_DeductionDataTable(ds.Tables["PaySlip_Deduction"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePaySlip = ((PaySlipDataTable)(base.Tables["PaySlip"]));
            if ((initTable == true)) {
                if ((this.tablePaySlip != null)) {
                    this.tablePaySlip.InitVars();
                }
            }
            this.tablePaySlip_MPF = ((PaySlip_MPFDataTable)(base.Tables["PaySlip_MPF"]));
            if ((initTable == true)) {
                if ((this.tablePaySlip_MPF != null)) {
                    this.tablePaySlip_MPF.InitVars();
                }
            }
            this.tableLeaveBalance = ((LeaveBalanceDataTable)(base.Tables["LeaveBalance"]));
            if ((initTable == true)) {
                if ((this.tableLeaveBalance != null)) {
                    this.tableLeaveBalance.InitVars();
                }
            }
            this.tablePaySlip_ORSO = ((PaySlip_ORSODataTable)(base.Tables["PaySlip_ORSO"]));
            if ((initTable == true)) {
                if ((this.tablePaySlip_ORSO != null)) {
                    this.tablePaySlip_ORSO.InitVars();
                }
            }
            this.tableEmpInfo = ((EmpInfoDataTable)(base.Tables["EmpInfo"]));
            if ((initTable == true)) {
                if ((this.tableEmpInfo != null)) {
                    this.tableEmpInfo.InitVars();
                }
            }
            this.tablePaySlip_Allowance = ((PaySlip_AllowanceDataTable)(base.Tables["PaySlip_Allowance"]));
            if ((initTable == true)) {
                if ((this.tablePaySlip_Allowance != null)) {
                    this.tablePaySlip_Allowance.InitVars();
                }
            }
            this.tablePaySlip_Deduction = ((PaySlip_DeductionDataTable)(base.Tables["PaySlip_Deduction"]));
            if ((initTable == true)) {
                if ((this.tablePaySlip_Deduction != null)) {
                    this.tablePaySlip_Deduction.InitVars();
                }
            }
            this.relationEmpInfo_PaySlip = this.Relations["EmpInfo_PaySlip"];
            this.relationPaySlip_LeaveBalance = this.Relations["PaySlip_LeaveBalance"];
            this.relationPaySlip_PaySlip_MPF = this.Relations["PaySlip_PaySlip_MPF"];
            this.relationPaySlip_PaySlip_ORSO = this.Relations["PaySlip_PaySlip_ORSO"];
            this.relationEmpInfo_PaySlip_Allowance = this.Relations["EmpInfo_PaySlip_Allowance"];
            this.relationEmpInfo_PaySlip_Deduction = this.Relations["EmpInfo_PaySlip_Deduction"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Payroll_FinalPaymentStatement";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Payroll_PaySlip.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePaySlip = new PaySlipDataTable();
            base.Tables.Add(this.tablePaySlip);
            this.tablePaySlip_MPF = new PaySlip_MPFDataTable();
            base.Tables.Add(this.tablePaySlip_MPF);
            this.tableLeaveBalance = new LeaveBalanceDataTable();
            base.Tables.Add(this.tableLeaveBalance);
            this.tablePaySlip_ORSO = new PaySlip_ORSODataTable();
            base.Tables.Add(this.tablePaySlip_ORSO);
            this.tableEmpInfo = new EmpInfoDataTable();
            base.Tables.Add(this.tableEmpInfo);
            this.tablePaySlip_Allowance = new PaySlip_AllowanceDataTable();
            base.Tables.Add(this.tablePaySlip_Allowance);
            this.tablePaySlip_Deduction = new PaySlip_DeductionDataTable();
            base.Tables.Add(this.tablePaySlip_Deduction);
            this.relationEmpInfo_PaySlip = new global::System.Data.DataRelation("EmpInfo_PaySlip", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePaySlip.EmpIDColumn}, false);
            this.Relations.Add(this.relationEmpInfo_PaySlip);
            this.relationPaySlip_LeaveBalance = new global::System.Data.DataRelation("PaySlip_LeaveBalance", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLeaveBalance.EmpIDColumn}, false);
            this.Relations.Add(this.relationPaySlip_LeaveBalance);
            this.relationPaySlip_PaySlip_MPF = new global::System.Data.DataRelation("PaySlip_PaySlip_MPF", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePaySlip_MPF.EmpIDColumn}, false);
            this.Relations.Add(this.relationPaySlip_PaySlip_MPF);
            this.relationPaySlip_PaySlip_ORSO = new global::System.Data.DataRelation("PaySlip_PaySlip_ORSO", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePaySlip_ORSO.EmpIDColumn}, false);
            this.Relations.Add(this.relationPaySlip_PaySlip_ORSO);
            this.relationEmpInfo_PaySlip_Allowance = new global::System.Data.DataRelation("EmpInfo_PaySlip_Allowance", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePaySlip_Allowance.EmpIDColumn}, false);
            this.Relations.Add(this.relationEmpInfo_PaySlip_Allowance);
            this.relationEmpInfo_PaySlip_Deduction = new global::System.Data.DataRelation("EmpInfo_PaySlip_Deduction", new global::System.Data.DataColumn[] {
                        this.tableEmpInfo.EmpIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePaySlip_Deduction.EmpIDColumn}, false);
            this.Relations.Add(this.relationEmpInfo_PaySlip_Deduction);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaySlip() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaySlip_MPF() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLeaveBalance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaySlip_ORSO() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaySlip_Allowance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaySlip_Deduction() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Payroll_FinalPaymentStatement ds = new Payroll_FinalPaymentStatement();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PaySlipRowChangeEventHandler(object sender, PaySlipRowChangeEvent e);
        
        public delegate void PaySlip_MPFRowChangeEventHandler(object sender, PaySlip_MPFRowChangeEvent e);
        
        public delegate void LeaveBalanceRowChangeEventHandler(object sender, LeaveBalanceRowChangeEvent e);
        
        public delegate void PaySlip_ORSORowChangeEventHandler(object sender, PaySlip_ORSORowChangeEvent e);
        
        public delegate void EmpInfoRowChangeEventHandler(object sender, EmpInfoRowChangeEvent e);
        
        public delegate void PaySlip_AllowanceRowChangeEventHandler(object sender, PaySlip_AllowanceRowChangeEvent e);
        
        public delegate void PaySlip_DeductionRowChangeEventHandler(object sender, PaySlip_DeductionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaySlipDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnPaymentTypeID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnPaymentCodeDesc;
            
            private global::System.Data.DataColumn columnPayMethod;
            
            private global::System.Data.DataColumn columnPayAmount;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnPaymentCodeDisplaySeqNo;
            
            private global::System.Data.DataColumn columnPaymentCodeIsMPF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipDataTable() {
                this.TableName = "PaySlip";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlipDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaySlipDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentTypeIDColumn {
                get {
                    return this.columnPaymentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDescColumn {
                get {
                    return this.columnPaymentCodeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayMethodColumn {
                get {
                    return this.columnPayMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayAmountColumn {
                get {
                    return this.columnPayAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDisplaySeqNoColumn {
                get {
                    return this.columnPaymentCodeDisplaySeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsMPFColumn {
                get {
                    return this.columnPaymentCodeIsMPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow this[int index] {
                get {
                    return ((PaySlipRow)(this.Rows[index]));
                }
            }
            
            public event PaySlipRowChangeEventHandler PaySlipRowChanging;
            
            public event PaySlipRowChangeEventHandler PaySlipRowChanged;
            
            public event PaySlipRowChangeEventHandler PaySlipRowDeleting;
            
            public event PaySlipRowChangeEventHandler PaySlipRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaySlipRow(PaySlipRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow AddPaySlipRow(EmpInfoRow parentEmpInfoRowByEmpInfo_PaySlip, int PaymentTypeID, string PaymentCode, string PaymentCodeDesc, string PayMethod, double PayAmount, string Remark, int PaymentCodeDisplaySeqNo, bool PaymentCodeIsMPF) {
                PaySlipRow rowPaySlipRow = ((PaySlipRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PaymentTypeID,
                        PaymentCode,
                        PaymentCodeDesc,
                        PayMethod,
                        PayAmount,
                        Remark,
                        PaymentCodeDisplaySeqNo,
                        PaymentCodeIsMPF};
                if ((parentEmpInfoRowByEmpInfo_PaySlip != null)) {
                    columnValuesArray[0] = parentEmpInfoRowByEmpInfo_PaySlip[0];
                }
                rowPaySlipRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaySlipRow);
                return rowPaySlipRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaySlipDataTable cln = ((PaySlipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaySlipDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnPaymentTypeID = base.Columns["PaymentTypeID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnPaymentCodeDesc = base.Columns["PaymentCodeDesc"];
                this.columnPayMethod = base.Columns["PayMethod"];
                this.columnPayAmount = base.Columns["PayAmount"];
                this.columnRemark = base.Columns["Remark"];
                this.columnPaymentCodeDisplaySeqNo = base.Columns["PaymentCodeDisplaySeqNo"];
                this.columnPaymentCodeIsMPF = base.Columns["PaymentCodeIsMPF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnPaymentTypeID = new global::System.Data.DataColumn("PaymentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentTypeID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnPaymentCodeDesc = new global::System.Data.DataColumn("PaymentCodeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDesc);
                this.columnPayMethod = new global::System.Data.DataColumn("PayMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayMethod);
                this.columnPayAmount = new global::System.Data.DataColumn("PayAmount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayAmount);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnPaymentCodeDisplaySeqNo = new global::System.Data.DataColumn("PaymentCodeDisplaySeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDisplaySeqNo);
                this.columnPaymentCodeIsMPF = new global::System.Data.DataColumn("PaymentCodeIsMPF", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsMPF);
                this.columnEmpID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow NewPaySlipRow() {
                return ((PaySlipRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaySlipRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaySlipRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaySlipRowChanged != null)) {
                    this.PaySlipRowChanged(this, new PaySlipRowChangeEvent(((PaySlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaySlipRowChanging != null)) {
                    this.PaySlipRowChanging(this, new PaySlipRowChangeEvent(((PaySlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaySlipRowDeleted != null)) {
                    this.PaySlipRowDeleted(this, new PaySlipRowChangeEvent(((PaySlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaySlipRowDeleting != null)) {
                    this.PaySlipRowDeleting(this, new PaySlipRowChangeEvent(((PaySlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaySlipRow(PaySlipRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_FinalPaymentStatement ds = new Payroll_FinalPaymentStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaySlipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaySlip_MPFDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnPeriodFr;
            
            private global::System.Data.DataColumn columnPeriodTo;
            
            private global::System.Data.DataColumn columnRelevantIncome;
            
            private global::System.Data.DataColumn columnMPFER;
            
            private global::System.Data.DataColumn columnMPFEE;
            
            private global::System.Data.DataColumn columnVCER;
            
            private global::System.Data.DataColumn columnVCEE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_MPFDataTable() {
                this.TableName = "PaySlip_MPF";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlip_MPFDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaySlip_MPFDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodFrColumn {
                get {
                    return this.columnPeriodFr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodToColumn {
                get {
                    return this.columnPeriodTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelevantIncomeColumn {
                get {
                    return this.columnRelevantIncome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFERColumn {
                get {
                    return this.columnMPFER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFEEColumn {
                get {
                    return this.columnMPFEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VCERColumn {
                get {
                    return this.columnVCER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VCEEColumn {
                get {
                    return this.columnVCEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_MPFRow this[int index] {
                get {
                    return ((PaySlip_MPFRow)(this.Rows[index]));
                }
            }
            
            public event PaySlip_MPFRowChangeEventHandler PaySlip_MPFRowChanging;
            
            public event PaySlip_MPFRowChangeEventHandler PaySlip_MPFRowChanged;
            
            public event PaySlip_MPFRowChangeEventHandler PaySlip_MPFRowDeleting;
            
            public event PaySlip_MPFRowChangeEventHandler PaySlip_MPFRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaySlip_MPFRow(PaySlip_MPFRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_MPFRow AddPaySlip_MPFRow(EmpInfoRow parentEmpInfoRowByPaySlip_PaySlip_MPF, System.DateTime PeriodFr, System.DateTime PeriodTo, double RelevantIncome, double MPFER, double MPFEE, double VCER, double VCEE) {
                PaySlip_MPFRow rowPaySlip_MPFRow = ((PaySlip_MPFRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PeriodFr,
                        PeriodTo,
                        RelevantIncome,
                        MPFER,
                        MPFEE,
                        VCER,
                        VCEE};
                if ((parentEmpInfoRowByPaySlip_PaySlip_MPF != null)) {
                    columnValuesArray[0] = parentEmpInfoRowByPaySlip_PaySlip_MPF[0];
                }
                rowPaySlip_MPFRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaySlip_MPFRow);
                return rowPaySlip_MPFRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaySlip_MPFDataTable cln = ((PaySlip_MPFDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaySlip_MPFDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnPeriodFr = base.Columns["PeriodFr"];
                this.columnPeriodTo = base.Columns["PeriodTo"];
                this.columnRelevantIncome = base.Columns["RelevantIncome"];
                this.columnMPFER = base.Columns["MPFER"];
                this.columnMPFEE = base.Columns["MPFEE"];
                this.columnVCER = base.Columns["VCER"];
                this.columnVCEE = base.Columns["VCEE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnPeriodFr = new global::System.Data.DataColumn("PeriodFr", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodFr);
                this.columnPeriodTo = new global::System.Data.DataColumn("PeriodTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodTo);
                this.columnRelevantIncome = new global::System.Data.DataColumn("RelevantIncome", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelevantIncome);
                this.columnMPFER = new global::System.Data.DataColumn("MPFER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFER);
                this.columnMPFEE = new global::System.Data.DataColumn("MPFEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFEE);
                this.columnVCER = new global::System.Data.DataColumn("VCER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVCER);
                this.columnVCEE = new global::System.Data.DataColumn("VCEE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVCEE);
                this.columnEmpID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_MPFRow NewPaySlip_MPFRow() {
                return ((PaySlip_MPFRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaySlip_MPFRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaySlip_MPFRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaySlip_MPFRowChanged != null)) {
                    this.PaySlip_MPFRowChanged(this, new PaySlip_MPFRowChangeEvent(((PaySlip_MPFRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaySlip_MPFRowChanging != null)) {
                    this.PaySlip_MPFRowChanging(this, new PaySlip_MPFRowChangeEvent(((PaySlip_MPFRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaySlip_MPFRowDeleted != null)) {
                    this.PaySlip_MPFRowDeleted(this, new PaySlip_MPFRowChangeEvent(((PaySlip_MPFRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaySlip_MPFRowDeleting != null)) {
                    this.PaySlip_MPFRowDeleting(this, new PaySlip_MPFRowChangeEvent(((PaySlip_MPFRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaySlip_MPFRow(PaySlip_MPFRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_FinalPaymentStatement ds = new Payroll_FinalPaymentStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaySlip_MPFDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LeaveBalanceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLeaveBalanceID;
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnLeaveBalanceEffectiveDate;
            
            private global::System.Data.DataColumn columnLeaveBalanceBF;
            
            private global::System.Data.DataColumn columnLeaveBalanceEntitled;
            
            private global::System.Data.DataColumn columnLeaveBalanceForfeiture;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnBalance;
            
            private global::System.Data.DataColumn columnTaken;
            
            private global::System.Data.DataColumn columnAdjust;
            
            private global::System.Data.DataColumn columnReserved;
            
            private global::System.Data.DataColumn columnStringFormat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceDataTable() {
                this.TableName = "LeaveBalance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LeaveBalanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LeaveBalanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceIDColumn {
                get {
                    return this.columnLeaveBalanceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceEffectiveDateColumn {
                get {
                    return this.columnLeaveBalanceEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceBFColumn {
                get {
                    return this.columnLeaveBalanceBF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceEntitledColumn {
                get {
                    return this.columnLeaveBalanceEntitled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceForfeitureColumn {
                get {
                    return this.columnLeaveBalanceForfeiture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TakenColumn {
                get {
                    return this.columnTaken;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustColumn {
                get {
                    return this.columnAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReservedColumn {
                get {
                    return this.columnReserved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StringFormatColumn {
                get {
                    return this.columnStringFormat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow this[int index] {
                get {
                    return ((LeaveBalanceRow)(this.Rows[index]));
                }
            }
            
            public event LeaveBalanceRowChangeEventHandler LeaveBalanceRowChanging;
            
            public event LeaveBalanceRowChangeEventHandler LeaveBalanceRowChanged;
            
            public event LeaveBalanceRowChangeEventHandler LeaveBalanceRowDeleting;
            
            public event LeaveBalanceRowChangeEventHandler LeaveBalanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLeaveBalanceRow(LeaveBalanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow AddLeaveBalanceRow(int LeaveBalanceID, EmpInfoRow parentEmpInfoRowByPaySlip_LeaveBalance, System.DateTime LeaveBalanceEffectiveDate, double LeaveBalanceBF, double LeaveBalanceEntitled, double LeaveBalanceForfeiture, string Name, string Description, double Balance, double Taken, double Adjust, double Reserved, string StringFormat) {
                LeaveBalanceRow rowLeaveBalanceRow = ((LeaveBalanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LeaveBalanceID,
                        null,
                        LeaveBalanceEffectiveDate,
                        LeaveBalanceBF,
                        LeaveBalanceEntitled,
                        LeaveBalanceForfeiture,
                        Name,
                        Description,
                        Balance,
                        Taken,
                        Adjust,
                        Reserved,
                        StringFormat};
                if ((parentEmpInfoRowByPaySlip_LeaveBalance != null)) {
                    columnValuesArray[1] = parentEmpInfoRowByPaySlip_LeaveBalance[0];
                }
                rowLeaveBalanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLeaveBalanceRow);
                return rowLeaveBalanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LeaveBalanceDataTable cln = ((LeaveBalanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LeaveBalanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLeaveBalanceID = base.Columns["LeaveBalanceID"];
                this.columnEmpID = base.Columns["EmpID"];
                this.columnLeaveBalanceEffectiveDate = base.Columns["LeaveBalanceEffectiveDate"];
                this.columnLeaveBalanceBF = base.Columns["LeaveBalanceBF"];
                this.columnLeaveBalanceEntitled = base.Columns["LeaveBalanceEntitled"];
                this.columnLeaveBalanceForfeiture = base.Columns["LeaveBalanceForfeiture"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnBalance = base.Columns["Balance"];
                this.columnTaken = base.Columns["Taken"];
                this.columnAdjust = base.Columns["Adjust"];
                this.columnReserved = base.Columns["Reserved"];
                this.columnStringFormat = base.Columns["StringFormat"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLeaveBalanceID = new global::System.Data.DataColumn("LeaveBalanceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceID);
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnLeaveBalanceEffectiveDate = new global::System.Data.DataColumn("LeaveBalanceEffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceEffectiveDate);
                this.columnLeaveBalanceBF = new global::System.Data.DataColumn("LeaveBalanceBF", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceBF);
                this.columnLeaveBalanceEntitled = new global::System.Data.DataColumn("LeaveBalanceEntitled", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceEntitled);
                this.columnLeaveBalanceForfeiture = new global::System.Data.DataColumn("LeaveBalanceForfeiture", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceForfeiture);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnTaken = new global::System.Data.DataColumn("Taken", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaken);
                this.columnAdjust = new global::System.Data.DataColumn("Adjust", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjust);
                this.columnReserved = new global::System.Data.DataColumn("Reserved", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved);
                this.columnStringFormat = new global::System.Data.DataColumn("StringFormat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStringFormat);
                this.columnLeaveBalanceID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow NewLeaveBalanceRow() {
                return ((LeaveBalanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LeaveBalanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LeaveBalanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LeaveBalanceRowChanged != null)) {
                    this.LeaveBalanceRowChanged(this, new LeaveBalanceRowChangeEvent(((LeaveBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LeaveBalanceRowChanging != null)) {
                    this.LeaveBalanceRowChanging(this, new LeaveBalanceRowChangeEvent(((LeaveBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LeaveBalanceRowDeleted != null)) {
                    this.LeaveBalanceRowDeleted(this, new LeaveBalanceRowChangeEvent(((LeaveBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LeaveBalanceRowDeleting != null)) {
                    this.LeaveBalanceRowDeleting(this, new LeaveBalanceRowChangeEvent(((LeaveBalanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLeaveBalanceRow(LeaveBalanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_FinalPaymentStatement ds = new Payroll_FinalPaymentStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LeaveBalanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaySlip_ORSODataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnPeriodFr;
            
            private global::System.Data.DataColumn columnPeriodTo;
            
            private global::System.Data.DataColumn columnRelevantIncome;
            
            private global::System.Data.DataColumn columnER;
            
            private global::System.Data.DataColumn columnEE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_ORSODataTable() {
                this.TableName = "PaySlip_ORSO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlip_ORSODataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaySlip_ORSODataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodFrColumn {
                get {
                    return this.columnPeriodFr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodToColumn {
                get {
                    return this.columnPeriodTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelevantIncomeColumn {
                get {
                    return this.columnRelevantIncome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ERColumn {
                get {
                    return this.columnER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EEColumn {
                get {
                    return this.columnEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_ORSORow this[int index] {
                get {
                    return ((PaySlip_ORSORow)(this.Rows[index]));
                }
            }
            
            public event PaySlip_ORSORowChangeEventHandler PaySlip_ORSORowChanging;
            
            public event PaySlip_ORSORowChangeEventHandler PaySlip_ORSORowChanged;
            
            public event PaySlip_ORSORowChangeEventHandler PaySlip_ORSORowDeleting;
            
            public event PaySlip_ORSORowChangeEventHandler PaySlip_ORSORowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaySlip_ORSORow(PaySlip_ORSORow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_ORSORow AddPaySlip_ORSORow(EmpInfoRow parentEmpInfoRowByPaySlip_PaySlip_ORSO, System.DateTime PeriodFr, System.DateTime PeriodTo, double RelevantIncome, double ER, double EE) {
                PaySlip_ORSORow rowPaySlip_ORSORow = ((PaySlip_ORSORow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PeriodFr,
                        PeriodTo,
                        RelevantIncome,
                        ER,
                        EE};
                if ((parentEmpInfoRowByPaySlip_PaySlip_ORSO != null)) {
                    columnValuesArray[0] = parentEmpInfoRowByPaySlip_PaySlip_ORSO[0];
                }
                rowPaySlip_ORSORow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaySlip_ORSORow);
                return rowPaySlip_ORSORow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaySlip_ORSODataTable cln = ((PaySlip_ORSODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaySlip_ORSODataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnPeriodFr = base.Columns["PeriodFr"];
                this.columnPeriodTo = base.Columns["PeriodTo"];
                this.columnRelevantIncome = base.Columns["RelevantIncome"];
                this.columnER = base.Columns["ER"];
                this.columnEE = base.Columns["EE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnPeriodFr = new global::System.Data.DataColumn("PeriodFr", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodFr);
                this.columnPeriodTo = new global::System.Data.DataColumn("PeriodTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodTo);
                this.columnRelevantIncome = new global::System.Data.DataColumn("RelevantIncome", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelevantIncome);
                this.columnER = new global::System.Data.DataColumn("ER", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnER);
                this.columnEE = new global::System.Data.DataColumn("EE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEE);
                this.columnEmpID.AllowDBNull = false;
                this.columnER.Caption = "VCER";
                this.columnEE.Caption = "VCEE";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_ORSORow NewPaySlip_ORSORow() {
                return ((PaySlip_ORSORow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaySlip_ORSORow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaySlip_ORSORow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaySlip_ORSORowChanged != null)) {
                    this.PaySlip_ORSORowChanged(this, new PaySlip_ORSORowChangeEvent(((PaySlip_ORSORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaySlip_ORSORowChanging != null)) {
                    this.PaySlip_ORSORowChanging(this, new PaySlip_ORSORowChangeEvent(((PaySlip_ORSORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaySlip_ORSORowDeleted != null)) {
                    this.PaySlip_ORSORowDeleted(this, new PaySlip_ORSORowChangeEvent(((PaySlip_ORSORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaySlip_ORSORowDeleting != null)) {
                    this.PaySlip_ORSORowDeleting(this, new PaySlip_ORSORowChangeEvent(((PaySlip_ORSORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaySlip_ORSORow(PaySlip_ORSORow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_FinalPaymentStatement ds = new Payroll_FinalPaymentStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaySlip_ORSODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnEmpNo;
            
            private global::System.Data.DataColumn columnEmpName;
            
            private global::System.Data.DataColumn columnEmpChineseName;
            
            private global::System.Data.DataColumn columnEmpHKID;
            
            private global::System.Data.DataColumn columnEmpDateOfJoin;
            
            private global::System.Data.DataColumn columnPayGroupDesc;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnPositionDesc;
            
            private global::System.Data.DataColumn columnBasicSalary;
            
            private global::System.Data.DataColumn columnYearOfServiceYear;
            
            private global::System.Data.DataColumn columnYearOfServiceMonth;
            
            private global::System.Data.DataColumn columnEmpTermResignDate;
            
            private global::System.Data.DataColumn columnEmpTermLastDate;
            
            private global::System.Data.DataColumn columnCessationReasonDesc;
            
            private global::System.Data.DataColumn columnPeriodFr;
            
            private global::System.Data.DataColumn columnPeriodTo;
            
            private global::System.Data.DataColumn columnPayrollPeriod;
            
            private global::System.Data.DataColumn columnMPFDate;
            
            private global::System.Data.DataColumn columnValueDate;
            
            private global::System.Data.DataColumn columnBankAccount;
            
            private global::System.Data.DataColumn columnHasMPF;
            
            private global::System.Data.DataColumn columnHasLeaveBalance;
            
            private global::System.Data.DataColumn columnHasORSO;
            
            private global::System.Data.DataColumn columnDepartment;
            
            private global::System.Data.DataColumn columnAnnualLeaveBalance;
            
            private global::System.Data.DataColumn columnLeaveBalanceAsOfDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoDataTable() {
                this.TableName = "EmpInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNoColumn {
                get {
                    return this.columnEmpNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNameColumn {
                get {
                    return this.columnEmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpChineseNameColumn {
                get {
                    return this.columnEmpChineseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpHKIDColumn {
                get {
                    return this.columnEmpHKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpDateOfJoinColumn {
                get {
                    return this.columnEmpDateOfJoin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayGroupDescColumn {
                get {
                    return this.columnPayGroupDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionDescColumn {
                get {
                    return this.columnPositionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasicSalaryColumn {
                get {
                    return this.columnBasicSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearOfServiceYearColumn {
                get {
                    return this.columnYearOfServiceYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearOfServiceMonthColumn {
                get {
                    return this.columnYearOfServiceMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpTermResignDateColumn {
                get {
                    return this.columnEmpTermResignDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpTermLastDateColumn {
                get {
                    return this.columnEmpTermLastDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CessationReasonDescColumn {
                get {
                    return this.columnCessationReasonDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodFrColumn {
                get {
                    return this.columnPeriodFr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodToColumn {
                get {
                    return this.columnPeriodTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayrollPeriodColumn {
                get {
                    return this.columnPayrollPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPFDateColumn {
                get {
                    return this.columnMPFDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueDateColumn {
                get {
                    return this.columnValueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankAccountColumn {
                get {
                    return this.columnBankAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasMPFColumn {
                get {
                    return this.columnHasMPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasLeaveBalanceColumn {
                get {
                    return this.columnHasLeaveBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasORSOColumn {
                get {
                    return this.columnHasORSO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartmentColumn {
                get {
                    return this.columnDepartment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnnualLeaveBalanceColumn {
                get {
                    return this.columnAnnualLeaveBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeaveBalanceAsOfDateColumn {
                get {
                    return this.columnLeaveBalanceAsOfDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow this[int index] {
                get {
                    return ((EmpInfoRow)(this.Rows[index]));
                }
            }
            
            public event EmpInfoRowChangeEventHandler EmpInfoRowChanging;
            
            public event EmpInfoRowChangeEventHandler EmpInfoRowChanged;
            
            public event EmpInfoRowChangeEventHandler EmpInfoRowDeleting;
            
            public event EmpInfoRowChangeEventHandler EmpInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpInfoRow(EmpInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow AddEmpInfoRow(
                        int EmpID, 
                        string EmpNo, 
                        string EmpName, 
                        string EmpChineseName, 
                        string EmpHKID, 
                        System.DateTime EmpDateOfJoin, 
                        string PayGroupDesc, 
                        string CompanyName, 
                        string PositionDesc, 
                        double BasicSalary, 
                        int YearOfServiceYear, 
                        int YearOfServiceMonth, 
                        System.DateTime EmpTermResignDate, 
                        System.DateTime EmpTermLastDate, 
                        string CessationReasonDesc, 
                        System.DateTime PeriodFr, 
                        System.DateTime PeriodTo, 
                        string PayrollPeriod, 
                        System.DateTime MPFDate, 
                        System.DateTime ValueDate, 
                        string BankAccount, 
                        bool HasMPF, 
                        bool HasLeaveBalance, 
                        bool HasORSO, 
                        string Department, 
                        double AnnualLeaveBalance, 
                        System.DateTime LeaveBalanceAsOfDate) {
                EmpInfoRow rowEmpInfoRow = ((EmpInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpID,
                        EmpNo,
                        EmpName,
                        EmpChineseName,
                        EmpHKID,
                        EmpDateOfJoin,
                        PayGroupDesc,
                        CompanyName,
                        PositionDesc,
                        BasicSalary,
                        YearOfServiceYear,
                        YearOfServiceMonth,
                        EmpTermResignDate,
                        EmpTermLastDate,
                        CessationReasonDesc,
                        PeriodFr,
                        PeriodTo,
                        PayrollPeriod,
                        MPFDate,
                        ValueDate,
                        BankAccount,
                        HasMPF,
                        HasLeaveBalance,
                        HasORSO,
                        Department,
                        AnnualLeaveBalance,
                        LeaveBalanceAsOfDate};
                rowEmpInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpInfoRow);
                return rowEmpInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow FindByEmpID(int EmpID) {
                return ((EmpInfoRow)(this.Rows.Find(new object[] {
                            EmpID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpInfoDataTable cln = ((EmpInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnEmpNo = base.Columns["EmpNo"];
                this.columnEmpName = base.Columns["EmpName"];
                this.columnEmpChineseName = base.Columns["EmpChineseName"];
                this.columnEmpHKID = base.Columns["EmpHKID"];
                this.columnEmpDateOfJoin = base.Columns["EmpDateOfJoin"];
                this.columnPayGroupDesc = base.Columns["PayGroupDesc"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnPositionDesc = base.Columns["PositionDesc"];
                this.columnBasicSalary = base.Columns["BasicSalary"];
                this.columnYearOfServiceYear = base.Columns["YearOfServiceYear"];
                this.columnYearOfServiceMonth = base.Columns["YearOfServiceMonth"];
                this.columnEmpTermResignDate = base.Columns["EmpTermResignDate"];
                this.columnEmpTermLastDate = base.Columns["EmpTermLastDate"];
                this.columnCessationReasonDesc = base.Columns["CessationReasonDesc"];
                this.columnPeriodFr = base.Columns["PeriodFr"];
                this.columnPeriodTo = base.Columns["PeriodTo"];
                this.columnPayrollPeriod = base.Columns["PayrollPeriod"];
                this.columnMPFDate = base.Columns["MPFDate"];
                this.columnValueDate = base.Columns["ValueDate"];
                this.columnBankAccount = base.Columns["BankAccount"];
                this.columnHasMPF = base.Columns["HasMPF"];
                this.columnHasLeaveBalance = base.Columns["HasLeaveBalance"];
                this.columnHasORSO = base.Columns["HasORSO"];
                this.columnDepartment = base.Columns["Department"];
                this.columnAnnualLeaveBalance = base.Columns["AnnualLeaveBalance"];
                this.columnLeaveBalanceAsOfDate = base.Columns["LeaveBalanceAsOfDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnEmpNo = new global::System.Data.DataColumn("EmpNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpNo);
                this.columnEmpName = new global::System.Data.DataColumn("EmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpName);
                this.columnEmpChineseName = new global::System.Data.DataColumn("EmpChineseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpChineseName);
                this.columnEmpHKID = new global::System.Data.DataColumn("EmpHKID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpHKID);
                this.columnEmpDateOfJoin = new global::System.Data.DataColumn("EmpDateOfJoin", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpDateOfJoin);
                this.columnPayGroupDesc = new global::System.Data.DataColumn("PayGroupDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayGroupDesc);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnPositionDesc = new global::System.Data.DataColumn("PositionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionDesc);
                this.columnBasicSalary = new global::System.Data.DataColumn("BasicSalary", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasicSalary);
                this.columnYearOfServiceYear = new global::System.Data.DataColumn("YearOfServiceYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearOfServiceYear);
                this.columnYearOfServiceMonth = new global::System.Data.DataColumn("YearOfServiceMonth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearOfServiceMonth);
                this.columnEmpTermResignDate = new global::System.Data.DataColumn("EmpTermResignDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpTermResignDate);
                this.columnEmpTermLastDate = new global::System.Data.DataColumn("EmpTermLastDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpTermLastDate);
                this.columnCessationReasonDesc = new global::System.Data.DataColumn("CessationReasonDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCessationReasonDesc);
                this.columnPeriodFr = new global::System.Data.DataColumn("PeriodFr", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodFr);
                this.columnPeriodTo = new global::System.Data.DataColumn("PeriodTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodTo);
                this.columnPayrollPeriod = new global::System.Data.DataColumn("PayrollPeriod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayrollPeriod);
                this.columnMPFDate = new global::System.Data.DataColumn("MPFDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPFDate);
                this.columnValueDate = new global::System.Data.DataColumn("ValueDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueDate);
                this.columnBankAccount = new global::System.Data.DataColumn("BankAccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankAccount);
                this.columnHasMPF = new global::System.Data.DataColumn("HasMPF", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasMPF);
                this.columnHasLeaveBalance = new global::System.Data.DataColumn("HasLeaveBalance", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasLeaveBalance);
                this.columnHasORSO = new global::System.Data.DataColumn("HasORSO", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasORSO);
                this.columnDepartment = new global::System.Data.DataColumn("Department", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartment);
                this.columnAnnualLeaveBalance = new global::System.Data.DataColumn("AnnualLeaveBalance", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnnualLeaveBalance);
                this.columnLeaveBalanceAsOfDate = new global::System.Data.DataColumn("LeaveBalanceAsOfDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveBalanceAsOfDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEmpID}, true));
                this.columnEmpID.AllowDBNull = false;
                this.columnEmpID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow NewEmpInfoRow() {
                return ((EmpInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpInfoRowChanged != null)) {
                    this.EmpInfoRowChanged(this, new EmpInfoRowChangeEvent(((EmpInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpInfoRowChanging != null)) {
                    this.EmpInfoRowChanging(this, new EmpInfoRowChangeEvent(((EmpInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpInfoRowDeleted != null)) {
                    this.EmpInfoRowDeleted(this, new EmpInfoRowChangeEvent(((EmpInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpInfoRowDeleting != null)) {
                    this.EmpInfoRowDeleting(this, new EmpInfoRowChangeEvent(((EmpInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpInfoRow(EmpInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_FinalPaymentStatement ds = new Payroll_FinalPaymentStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaySlip_AllowanceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnPaymentCodeDesc;
            
            private global::System.Data.DataColumn columnPayMethod;
            
            private global::System.Data.DataColumn columnPayAmount;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnPaymentCodeDisplaySeqNo;
            
            private global::System.Data.DataColumn columnPaymentCodeIsMPF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_AllowanceDataTable() {
                this.TableName = "PaySlip_Allowance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlip_AllowanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaySlip_AllowanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDescColumn {
                get {
                    return this.columnPaymentCodeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayMethodColumn {
                get {
                    return this.columnPayMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayAmountColumn {
                get {
                    return this.columnPayAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDisplaySeqNoColumn {
                get {
                    return this.columnPaymentCodeDisplaySeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsMPFColumn {
                get {
                    return this.columnPaymentCodeIsMPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_AllowanceRow this[int index] {
                get {
                    return ((PaySlip_AllowanceRow)(this.Rows[index]));
                }
            }
            
            public event PaySlip_AllowanceRowChangeEventHandler PaySlip_AllowanceRowChanging;
            
            public event PaySlip_AllowanceRowChangeEventHandler PaySlip_AllowanceRowChanged;
            
            public event PaySlip_AllowanceRowChangeEventHandler PaySlip_AllowanceRowDeleting;
            
            public event PaySlip_AllowanceRowChangeEventHandler PaySlip_AllowanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaySlip_AllowanceRow(PaySlip_AllowanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_AllowanceRow AddPaySlip_AllowanceRow(EmpInfoRow parentEmpInfoRowByEmpInfo_PaySlip_Allowance, string PaymentCode, string PaymentCodeDesc, string PayMethod, double PayAmount, string Remark, int PaymentCodeDisplaySeqNo, bool PaymentCodeIsMPF) {
                PaySlip_AllowanceRow rowPaySlip_AllowanceRow = ((PaySlip_AllowanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PaymentCode,
                        PaymentCodeDesc,
                        PayMethod,
                        PayAmount,
                        Remark,
                        PaymentCodeDisplaySeqNo,
                        PaymentCodeIsMPF};
                if ((parentEmpInfoRowByEmpInfo_PaySlip_Allowance != null)) {
                    columnValuesArray[0] = parentEmpInfoRowByEmpInfo_PaySlip_Allowance[0];
                }
                rowPaySlip_AllowanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaySlip_AllowanceRow);
                return rowPaySlip_AllowanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaySlip_AllowanceDataTable cln = ((PaySlip_AllowanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaySlip_AllowanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnPaymentCodeDesc = base.Columns["PaymentCodeDesc"];
                this.columnPayMethod = base.Columns["PayMethod"];
                this.columnPayAmount = base.Columns["PayAmount"];
                this.columnRemark = base.Columns["Remark"];
                this.columnPaymentCodeDisplaySeqNo = base.Columns["PaymentCodeDisplaySeqNo"];
                this.columnPaymentCodeIsMPF = base.Columns["PaymentCodeIsMPF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnPaymentCodeDesc = new global::System.Data.DataColumn("PaymentCodeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDesc);
                this.columnPayMethod = new global::System.Data.DataColumn("PayMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayMethod);
                this.columnPayAmount = new global::System.Data.DataColumn("PayAmount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayAmount);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnPaymentCodeDisplaySeqNo = new global::System.Data.DataColumn("PaymentCodeDisplaySeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDisplaySeqNo);
                this.columnPaymentCodeIsMPF = new global::System.Data.DataColumn("PaymentCodeIsMPF", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsMPF);
                this.columnEmpID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_AllowanceRow NewPaySlip_AllowanceRow() {
                return ((PaySlip_AllowanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaySlip_AllowanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaySlip_AllowanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaySlip_AllowanceRowChanged != null)) {
                    this.PaySlip_AllowanceRowChanged(this, new PaySlip_AllowanceRowChangeEvent(((PaySlip_AllowanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaySlip_AllowanceRowChanging != null)) {
                    this.PaySlip_AllowanceRowChanging(this, new PaySlip_AllowanceRowChangeEvent(((PaySlip_AllowanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaySlip_AllowanceRowDeleted != null)) {
                    this.PaySlip_AllowanceRowDeleted(this, new PaySlip_AllowanceRowChangeEvent(((PaySlip_AllowanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaySlip_AllowanceRowDeleting != null)) {
                    this.PaySlip_AllowanceRowDeleting(this, new PaySlip_AllowanceRowChangeEvent(((PaySlip_AllowanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaySlip_AllowanceRow(PaySlip_AllowanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_FinalPaymentStatement ds = new Payroll_FinalPaymentStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaySlip_AllowanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaySlip_DeductionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmpID;
            
            private global::System.Data.DataColumn columnPaymentCode;
            
            private global::System.Data.DataColumn columnPaymentCodeDesc;
            
            private global::System.Data.DataColumn columnPayMethod;
            
            private global::System.Data.DataColumn columnPayAmount;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnPaymentCodeDisplaySeqNo;
            
            private global::System.Data.DataColumn columnPaymentCodeIsMPF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_DeductionDataTable() {
                this.TableName = "PaySlip_Deduction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlip_DeductionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaySlip_DeductionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpIDColumn {
                get {
                    return this.columnEmpID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeColumn {
                get {
                    return this.columnPaymentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDescColumn {
                get {
                    return this.columnPaymentCodeDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayMethodColumn {
                get {
                    return this.columnPayMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayAmountColumn {
                get {
                    return this.columnPayAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeDisplaySeqNoColumn {
                get {
                    return this.columnPaymentCodeDisplaySeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentCodeIsMPFColumn {
                get {
                    return this.columnPaymentCodeIsMPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_DeductionRow this[int index] {
                get {
                    return ((PaySlip_DeductionRow)(this.Rows[index]));
                }
            }
            
            public event PaySlip_DeductionRowChangeEventHandler PaySlip_DeductionRowChanging;
            
            public event PaySlip_DeductionRowChangeEventHandler PaySlip_DeductionRowChanged;
            
            public event PaySlip_DeductionRowChangeEventHandler PaySlip_DeductionRowDeleting;
            
            public event PaySlip_DeductionRowChangeEventHandler PaySlip_DeductionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaySlip_DeductionRow(PaySlip_DeductionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_DeductionRow AddPaySlip_DeductionRow(EmpInfoRow parentEmpInfoRowByEmpInfo_PaySlip_Deduction, string PaymentCode, string PaymentCodeDesc, string PayMethod, double PayAmount, string Remark, int PaymentCodeDisplaySeqNo, bool PaymentCodeIsMPF) {
                PaySlip_DeductionRow rowPaySlip_DeductionRow = ((PaySlip_DeductionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PaymentCode,
                        PaymentCodeDesc,
                        PayMethod,
                        PayAmount,
                        Remark,
                        PaymentCodeDisplaySeqNo,
                        PaymentCodeIsMPF};
                if ((parentEmpInfoRowByEmpInfo_PaySlip_Deduction != null)) {
                    columnValuesArray[0] = parentEmpInfoRowByEmpInfo_PaySlip_Deduction[0];
                }
                rowPaySlip_DeductionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaySlip_DeductionRow);
                return rowPaySlip_DeductionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaySlip_DeductionDataTable cln = ((PaySlip_DeductionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaySlip_DeductionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpID = base.Columns["EmpID"];
                this.columnPaymentCode = base.Columns["PaymentCode"];
                this.columnPaymentCodeDesc = base.Columns["PaymentCodeDesc"];
                this.columnPayMethod = base.Columns["PayMethod"];
                this.columnPayAmount = base.Columns["PayAmount"];
                this.columnRemark = base.Columns["Remark"];
                this.columnPaymentCodeDisplaySeqNo = base.Columns["PaymentCodeDisplaySeqNo"];
                this.columnPaymentCodeIsMPF = base.Columns["PaymentCodeIsMPF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpID = new global::System.Data.DataColumn("EmpID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpID);
                this.columnPaymentCode = new global::System.Data.DataColumn("PaymentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCode);
                this.columnPaymentCodeDesc = new global::System.Data.DataColumn("PaymentCodeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDesc);
                this.columnPayMethod = new global::System.Data.DataColumn("PayMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayMethod);
                this.columnPayAmount = new global::System.Data.DataColumn("PayAmount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayAmount);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnPaymentCodeDisplaySeqNo = new global::System.Data.DataColumn("PaymentCodeDisplaySeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeDisplaySeqNo);
                this.columnPaymentCodeIsMPF = new global::System.Data.DataColumn("PaymentCodeIsMPF", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentCodeIsMPF);
                this.columnEmpID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_DeductionRow NewPaySlip_DeductionRow() {
                return ((PaySlip_DeductionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaySlip_DeductionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaySlip_DeductionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaySlip_DeductionRowChanged != null)) {
                    this.PaySlip_DeductionRowChanged(this, new PaySlip_DeductionRowChangeEvent(((PaySlip_DeductionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaySlip_DeductionRowChanging != null)) {
                    this.PaySlip_DeductionRowChanging(this, new PaySlip_DeductionRowChangeEvent(((PaySlip_DeductionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaySlip_DeductionRowDeleted != null)) {
                    this.PaySlip_DeductionRowDeleted(this, new PaySlip_DeductionRowChangeEvent(((PaySlip_DeductionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaySlip_DeductionRowDeleting != null)) {
                    this.PaySlip_DeductionRowDeleting(this, new PaySlip_DeductionRowChangeEvent(((PaySlip_DeductionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaySlip_DeductionRow(PaySlip_DeductionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll_FinalPaymentStatement ds = new Payroll_FinalPaymentStatement();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaySlip_DeductionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaySlipRow : global::System.Data.DataRow {
            
            private PaySlipDataTable tablePaySlip;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlipRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaySlip = ((PaySlipDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tablePaySlip.EmpIDColumn]));
                }
                set {
                    this[this.tablePaySlip.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentTypeID {
                get {
                    try {
                        return ((int)(this[this.tablePaySlip.PaymentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentTypeID\' in table \'PaySlip\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip.PaymentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'PaySlip\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCodeDesc {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip.PaymentCodeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDesc\' in table \'PaySlip\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip.PaymentCodeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayMethod {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip.PayMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayMethod\' in table \'PaySlip\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip.PayMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PayAmount {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip.PayAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayAmount\' in table \'PaySlip\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip.PayAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'PaySlip\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeDisplaySeqNo {
                get {
                    try {
                        return ((int)(this[this.tablePaySlip.PaymentCodeDisplaySeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDisplaySeqNo\' in table \'PaySlip\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip.PaymentCodeDisplaySeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PaymentCodeIsMPF {
                get {
                    try {
                        return ((bool)(this[this.tablePaySlip.PaymentCodeIsMPFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsMPF\' in table \'PaySlip\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip.PaymentCodeIsMPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow EmpInfoRow {
                get {
                    return ((EmpInfoRow)(this.GetParentRow(this.Table.ParentRelations["EmpInfo_PaySlip"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EmpInfo_PaySlip"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentTypeIDNull() {
                return this.IsNull(this.tablePaySlip.PaymentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentTypeIDNull() {
                this[this.tablePaySlip.PaymentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tablePaySlip.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tablePaySlip.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDescNull() {
                return this.IsNull(this.tablePaySlip.PaymentCodeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDescNull() {
                this[this.tablePaySlip.PaymentCodeDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayMethodNull() {
                return this.IsNull(this.tablePaySlip.PayMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayMethodNull() {
                this[this.tablePaySlip.PayMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayAmountNull() {
                return this.IsNull(this.tablePaySlip.PayAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayAmountNull() {
                this[this.tablePaySlip.PayAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tablePaySlip.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tablePaySlip.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDisplaySeqNoNull() {
                return this.IsNull(this.tablePaySlip.PaymentCodeDisplaySeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDisplaySeqNoNull() {
                this[this.tablePaySlip.PaymentCodeDisplaySeqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsMPFNull() {
                return this.IsNull(this.tablePaySlip.PaymentCodeIsMPFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsMPFNull() {
                this[this.tablePaySlip.PaymentCodeIsMPFColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaySlip_MPFRow : global::System.Data.DataRow {
            
            private PaySlip_MPFDataTable tablePaySlip_MPF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlip_MPFRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaySlip_MPF = ((PaySlip_MPFDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tablePaySlip_MPF.EmpIDColumn]));
                }
                set {
                    this[this.tablePaySlip_MPF.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodFr {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePaySlip_MPF.PeriodFrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodFr\' in table \'PaySlip_MPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_MPF.PeriodFrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePaySlip_MPF.PeriodToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodTo\' in table \'PaySlip_MPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_MPF.PeriodToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RelevantIncome {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_MPF.RelevantIncomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RelevantIncome\' in table \'PaySlip_MPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_MPF.RelevantIncomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MPFER {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_MPF.MPFERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFER\' in table \'PaySlip_MPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_MPF.MPFERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MPFEE {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_MPF.MPFEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFEE\' in table \'PaySlip_MPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_MPF.MPFEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VCER {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_MPF.VCERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VCER\' in table \'PaySlip_MPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_MPF.VCERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VCEE {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_MPF.VCEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VCEE\' in table \'PaySlip_MPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_MPF.VCEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow EmpInfoRow {
                get {
                    return ((EmpInfoRow)(this.GetParentRow(this.Table.ParentRelations["PaySlip_PaySlip_MPF"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PaySlip_PaySlip_MPF"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodFrNull() {
                return this.IsNull(this.tablePaySlip_MPF.PeriodFrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodFrNull() {
                this[this.tablePaySlip_MPF.PeriodFrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodToNull() {
                return this.IsNull(this.tablePaySlip_MPF.PeriodToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodToNull() {
                this[this.tablePaySlip_MPF.PeriodToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelevantIncomeNull() {
                return this.IsNull(this.tablePaySlip_MPF.RelevantIncomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelevantIncomeNull() {
                this[this.tablePaySlip_MPF.RelevantIncomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFERNull() {
                return this.IsNull(this.tablePaySlip_MPF.MPFERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFERNull() {
                this[this.tablePaySlip_MPF.MPFERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFEENull() {
                return this.IsNull(this.tablePaySlip_MPF.MPFEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFEENull() {
                this[this.tablePaySlip_MPF.MPFEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCERNull() {
                return this.IsNull(this.tablePaySlip_MPF.VCERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCERNull() {
                this[this.tablePaySlip_MPF.VCERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCEENull() {
                return this.IsNull(this.tablePaySlip_MPF.VCEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCEENull() {
                this[this.tablePaySlip_MPF.VCEEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LeaveBalanceRow : global::System.Data.DataRow {
            
            private LeaveBalanceDataTable tableLeaveBalance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LeaveBalanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLeaveBalance = ((LeaveBalanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LeaveBalanceID {
                get {
                    return ((int)(this[this.tableLeaveBalance.LeaveBalanceIDColumn]));
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    try {
                        return ((int)(this[this.tableLeaveBalance.EmpIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpID\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LeaveBalanceEffectiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLeaveBalance.LeaveBalanceEffectiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceEffectiveDate\' in table \'LeaveBalance\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceEffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeaveBalanceBF {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.LeaveBalanceBFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceBF\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceBFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeaveBalanceEntitled {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.LeaveBalanceEntitledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceEntitled\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceEntitledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeaveBalanceForfeiture {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.LeaveBalanceForfeitureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceForfeiture\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.LeaveBalanceForfeitureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLeaveBalance.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableLeaveBalance.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Balance {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.BalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Balance\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Taken {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.TakenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Taken\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.TakenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Adjust {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.AdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adjust\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.AdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Reserved {
                get {
                    try {
                        return ((double)(this[this.tableLeaveBalance.ReservedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reserved\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.ReservedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StringFormat {
                get {
                    try {
                        return ((string)(this[this.tableLeaveBalance.StringFormatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StringFormat\' in table \'LeaveBalance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLeaveBalance.StringFormatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow EmpInfoRow {
                get {
                    return ((EmpInfoRow)(this.GetParentRow(this.Table.ParentRelations["PaySlip_LeaveBalance"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PaySlip_LeaveBalance"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpIDNull() {
                return this.IsNull(this.tableLeaveBalance.EmpIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpIDNull() {
                this[this.tableLeaveBalance.EmpIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceEffectiveDateNull() {
                return this.IsNull(this.tableLeaveBalance.LeaveBalanceEffectiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceEffectiveDateNull() {
                this[this.tableLeaveBalance.LeaveBalanceEffectiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceBFNull() {
                return this.IsNull(this.tableLeaveBalance.LeaveBalanceBFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceBFNull() {
                this[this.tableLeaveBalance.LeaveBalanceBFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceEntitledNull() {
                return this.IsNull(this.tableLeaveBalance.LeaveBalanceEntitledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceEntitledNull() {
                this[this.tableLeaveBalance.LeaveBalanceEntitledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceForfeitureNull() {
                return this.IsNull(this.tableLeaveBalance.LeaveBalanceForfeitureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceForfeitureNull() {
                this[this.tableLeaveBalance.LeaveBalanceForfeitureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLeaveBalance.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLeaveBalance.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableLeaveBalance.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableLeaveBalance.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceNull() {
                return this.IsNull(this.tableLeaveBalance.BalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceNull() {
                this[this.tableLeaveBalance.BalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTakenNull() {
                return this.IsNull(this.tableLeaveBalance.TakenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTakenNull() {
                this[this.tableLeaveBalance.TakenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustNull() {
                return this.IsNull(this.tableLeaveBalance.AdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustNull() {
                this[this.tableLeaveBalance.AdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReservedNull() {
                return this.IsNull(this.tableLeaveBalance.ReservedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReservedNull() {
                this[this.tableLeaveBalance.ReservedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStringFormatNull() {
                return this.IsNull(this.tableLeaveBalance.StringFormatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStringFormatNull() {
                this[this.tableLeaveBalance.StringFormatColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaySlip_ORSORow : global::System.Data.DataRow {
            
            private PaySlip_ORSODataTable tablePaySlip_ORSO;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlip_ORSORow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaySlip_ORSO = ((PaySlip_ORSODataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tablePaySlip_ORSO.EmpIDColumn]));
                }
                set {
                    this[this.tablePaySlip_ORSO.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodFr {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePaySlip_ORSO.PeriodFrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodFr\' in table \'PaySlip_ORSO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_ORSO.PeriodFrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePaySlip_ORSO.PeriodToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodTo\' in table \'PaySlip_ORSO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_ORSO.PeriodToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RelevantIncome {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_ORSO.RelevantIncomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RelevantIncome\' in table \'PaySlip_ORSO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_ORSO.RelevantIncomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ER {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_ORSO.ERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ER\' in table \'PaySlip_ORSO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_ORSO.ERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EE {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_ORSO.EEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EE\' in table \'PaySlip_ORSO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_ORSO.EEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow EmpInfoRow {
                get {
                    return ((EmpInfoRow)(this.GetParentRow(this.Table.ParentRelations["PaySlip_PaySlip_ORSO"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PaySlip_PaySlip_ORSO"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodFrNull() {
                return this.IsNull(this.tablePaySlip_ORSO.PeriodFrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodFrNull() {
                this[this.tablePaySlip_ORSO.PeriodFrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodToNull() {
                return this.IsNull(this.tablePaySlip_ORSO.PeriodToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodToNull() {
                this[this.tablePaySlip_ORSO.PeriodToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelevantIncomeNull() {
                return this.IsNull(this.tablePaySlip_ORSO.RelevantIncomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelevantIncomeNull() {
                this[this.tablePaySlip_ORSO.RelevantIncomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsERNull() {
                return this.IsNull(this.tablePaySlip_ORSO.ERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetERNull() {
                this[this.tablePaySlip_ORSO.ERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEENull() {
                return this.IsNull(this.tablePaySlip_ORSO.EEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEENull() {
                this[this.tablePaySlip_ORSO.EEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpInfoRow : global::System.Data.DataRow {
            
            private EmpInfoDataTable tableEmpInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpInfo = ((EmpInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tableEmpInfo.EmpIDColumn]));
                }
                set {
                    this[this.tableEmpInfo.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpNo {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.EmpNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpNo\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpName {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.EmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpName\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpChineseName {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.EmpChineseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpChineseName\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpChineseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpHKID {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.EmpHKIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpHKID\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpHKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpDateOfJoin {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.EmpDateOfJoinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpDateOfJoin\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpDateOfJoinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayGroupDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.PayGroupDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayGroupDesc\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.PayGroupDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PositionDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.PositionDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PositionDesc\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.PositionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BasicSalary {
                get {
                    try {
                        return ((double)(this[this.tableEmpInfo.BasicSalaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasicSalary\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.BasicSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YearOfServiceYear {
                get {
                    try {
                        return ((int)(this[this.tableEmpInfo.YearOfServiceYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearOfServiceYear\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.YearOfServiceYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YearOfServiceMonth {
                get {
                    try {
                        return ((int)(this[this.tableEmpInfo.YearOfServiceMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearOfServiceMonth\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.YearOfServiceMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpTermResignDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.EmpTermResignDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpTermResignDate\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpTermResignDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EmpTermLastDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.EmpTermLastDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpTermLastDate\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.EmpTermLastDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CessationReasonDesc {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.CessationReasonDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CessationReasonDesc\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.CessationReasonDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodFr {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.PeriodFrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodFr\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.PeriodFrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PeriodTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.PeriodToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PeriodTo\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.PeriodToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayrollPeriod {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.PayrollPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayrollPeriod\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.PayrollPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MPFDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.MPFDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MPFDate\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.MPFDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValueDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.ValueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueDate\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.ValueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankAccount {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.BankAccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BankAccount\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.BankAccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasMPF {
                get {
                    try {
                        return ((bool)(this[this.tableEmpInfo.HasMPFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasMPF\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.HasMPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasLeaveBalance {
                get {
                    try {
                        return ((bool)(this[this.tableEmpInfo.HasLeaveBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasLeaveBalance\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.HasLeaveBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasORSO {
                get {
                    try {
                        return ((bool)(this[this.tableEmpInfo.HasORSOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasORSO\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.HasORSOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Department {
                get {
                    try {
                        return ((string)(this[this.tableEmpInfo.DepartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Department\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.DepartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AnnualLeaveBalance {
                get {
                    try {
                        return ((double)(this[this.tableEmpInfo.AnnualLeaveBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnnualLeaveBalance\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.AnnualLeaveBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LeaveBalanceAsOfDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmpInfo.LeaveBalanceAsOfDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeaveBalanceAsOfDate\' in table \'EmpInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpInfo.LeaveBalanceAsOfDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNoNull() {
                return this.IsNull(this.tableEmpInfo.EmpNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNoNull() {
                this[this.tableEmpInfo.EmpNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNameNull() {
                return this.IsNull(this.tableEmpInfo.EmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNameNull() {
                this[this.tableEmpInfo.EmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpChineseNameNull() {
                return this.IsNull(this.tableEmpInfo.EmpChineseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpChineseNameNull() {
                this[this.tableEmpInfo.EmpChineseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpHKIDNull() {
                return this.IsNull(this.tableEmpInfo.EmpHKIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpHKIDNull() {
                this[this.tableEmpInfo.EmpHKIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpDateOfJoinNull() {
                return this.IsNull(this.tableEmpInfo.EmpDateOfJoinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpDateOfJoinNull() {
                this[this.tableEmpInfo.EmpDateOfJoinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayGroupDescNull() {
                return this.IsNull(this.tableEmpInfo.PayGroupDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayGroupDescNull() {
                this[this.tableEmpInfo.PayGroupDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableEmpInfo.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableEmpInfo.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionDescNull() {
                return this.IsNull(this.tableEmpInfo.PositionDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionDescNull() {
                this[this.tableEmpInfo.PositionDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasicSalaryNull() {
                return this.IsNull(this.tableEmpInfo.BasicSalaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasicSalaryNull() {
                this[this.tableEmpInfo.BasicSalaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearOfServiceYearNull() {
                return this.IsNull(this.tableEmpInfo.YearOfServiceYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearOfServiceYearNull() {
                this[this.tableEmpInfo.YearOfServiceYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearOfServiceMonthNull() {
                return this.IsNull(this.tableEmpInfo.YearOfServiceMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearOfServiceMonthNull() {
                this[this.tableEmpInfo.YearOfServiceMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpTermResignDateNull() {
                return this.IsNull(this.tableEmpInfo.EmpTermResignDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpTermResignDateNull() {
                this[this.tableEmpInfo.EmpTermResignDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpTermLastDateNull() {
                return this.IsNull(this.tableEmpInfo.EmpTermLastDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpTermLastDateNull() {
                this[this.tableEmpInfo.EmpTermLastDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCessationReasonDescNull() {
                return this.IsNull(this.tableEmpInfo.CessationReasonDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCessationReasonDescNull() {
                this[this.tableEmpInfo.CessationReasonDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodFrNull() {
                return this.IsNull(this.tableEmpInfo.PeriodFrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodFrNull() {
                this[this.tableEmpInfo.PeriodFrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodToNull() {
                return this.IsNull(this.tableEmpInfo.PeriodToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodToNull() {
                this[this.tableEmpInfo.PeriodToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayrollPeriodNull() {
                return this.IsNull(this.tableEmpInfo.PayrollPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayrollPeriodNull() {
                this[this.tableEmpInfo.PayrollPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPFDateNull() {
                return this.IsNull(this.tableEmpInfo.MPFDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPFDateNull() {
                this[this.tableEmpInfo.MPFDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueDateNull() {
                return this.IsNull(this.tableEmpInfo.ValueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueDateNull() {
                this[this.tableEmpInfo.ValueDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankAccountNull() {
                return this.IsNull(this.tableEmpInfo.BankAccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankAccountNull() {
                this[this.tableEmpInfo.BankAccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasMPFNull() {
                return this.IsNull(this.tableEmpInfo.HasMPFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasMPFNull() {
                this[this.tableEmpInfo.HasMPFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasLeaveBalanceNull() {
                return this.IsNull(this.tableEmpInfo.HasLeaveBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasLeaveBalanceNull() {
                this[this.tableEmpInfo.HasLeaveBalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasORSONull() {
                return this.IsNull(this.tableEmpInfo.HasORSOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasORSONull() {
                this[this.tableEmpInfo.HasORSOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNull() {
                return this.IsNull(this.tableEmpInfo.DepartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNull() {
                this[this.tableEmpInfo.DepartmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnnualLeaveBalanceNull() {
                return this.IsNull(this.tableEmpInfo.AnnualLeaveBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnnualLeaveBalanceNull() {
                this[this.tableEmpInfo.AnnualLeaveBalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeaveBalanceAsOfDateNull() {
                return this.IsNull(this.tableEmpInfo.LeaveBalanceAsOfDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeaveBalanceAsOfDateNull() {
                this[this.tableEmpInfo.LeaveBalanceAsOfDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow[] GetPaySlipRows() {
                if ((this.Table.ChildRelations["EmpInfo_PaySlip"] == null)) {
                    return new PaySlipRow[0];
                }
                else {
                    return ((PaySlipRow[])(base.GetChildRows(this.Table.ChildRelations["EmpInfo_PaySlip"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow[] GetLeaveBalanceRows() {
                if ((this.Table.ChildRelations["PaySlip_LeaveBalance"] == null)) {
                    return new LeaveBalanceRow[0];
                }
                else {
                    return ((LeaveBalanceRow[])(base.GetChildRows(this.Table.ChildRelations["PaySlip_LeaveBalance"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_MPFRow[] GetPaySlip_MPFRows() {
                if ((this.Table.ChildRelations["PaySlip_PaySlip_MPF"] == null)) {
                    return new PaySlip_MPFRow[0];
                }
                else {
                    return ((PaySlip_MPFRow[])(base.GetChildRows(this.Table.ChildRelations["PaySlip_PaySlip_MPF"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_ORSORow[] GetPaySlip_ORSORows() {
                if ((this.Table.ChildRelations["PaySlip_PaySlip_ORSO"] == null)) {
                    return new PaySlip_ORSORow[0];
                }
                else {
                    return ((PaySlip_ORSORow[])(base.GetChildRows(this.Table.ChildRelations["PaySlip_PaySlip_ORSO"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_AllowanceRow[] GetPaySlip_AllowanceRows() {
                if ((this.Table.ChildRelations["EmpInfo_PaySlip_Allowance"] == null)) {
                    return new PaySlip_AllowanceRow[0];
                }
                else {
                    return ((PaySlip_AllowanceRow[])(base.GetChildRows(this.Table.ChildRelations["EmpInfo_PaySlip_Allowance"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_DeductionRow[] GetPaySlip_DeductionRows() {
                if ((this.Table.ChildRelations["EmpInfo_PaySlip_Deduction"] == null)) {
                    return new PaySlip_DeductionRow[0];
                }
                else {
                    return ((PaySlip_DeductionRow[])(base.GetChildRows(this.Table.ChildRelations["EmpInfo_PaySlip_Deduction"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaySlip_AllowanceRow : global::System.Data.DataRow {
            
            private PaySlip_AllowanceDataTable tablePaySlip_Allowance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlip_AllowanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaySlip_Allowance = ((PaySlip_AllowanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tablePaySlip_Allowance.EmpIDColumn]));
                }
                set {
                    this[this.tablePaySlip_Allowance.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip_Allowance.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'PaySlip_Allowance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Allowance.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCodeDesc {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip_Allowance.PaymentCodeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDesc\' in table \'PaySlip_Allowance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Allowance.PaymentCodeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayMethod {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip_Allowance.PayMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayMethod\' in table \'PaySlip_Allowance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Allowance.PayMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PayAmount {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_Allowance.PayAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayAmount\' in table \'PaySlip_Allowance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Allowance.PayAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip_Allowance.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'PaySlip_Allowance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Allowance.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeDisplaySeqNo {
                get {
                    try {
                        return ((int)(this[this.tablePaySlip_Allowance.PaymentCodeDisplaySeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDisplaySeqNo\' in table \'PaySlip_Allowance\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Allowance.PaymentCodeDisplaySeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PaymentCodeIsMPF {
                get {
                    try {
                        return ((bool)(this[this.tablePaySlip_Allowance.PaymentCodeIsMPFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsMPF\' in table \'PaySlip_Allowance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Allowance.PaymentCodeIsMPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow EmpInfoRow {
                get {
                    return ((EmpInfoRow)(this.GetParentRow(this.Table.ParentRelations["EmpInfo_PaySlip_Allowance"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EmpInfo_PaySlip_Allowance"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tablePaySlip_Allowance.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tablePaySlip_Allowance.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDescNull() {
                return this.IsNull(this.tablePaySlip_Allowance.PaymentCodeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDescNull() {
                this[this.tablePaySlip_Allowance.PaymentCodeDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayMethodNull() {
                return this.IsNull(this.tablePaySlip_Allowance.PayMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayMethodNull() {
                this[this.tablePaySlip_Allowance.PayMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayAmountNull() {
                return this.IsNull(this.tablePaySlip_Allowance.PayAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayAmountNull() {
                this[this.tablePaySlip_Allowance.PayAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tablePaySlip_Allowance.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tablePaySlip_Allowance.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDisplaySeqNoNull() {
                return this.IsNull(this.tablePaySlip_Allowance.PaymentCodeDisplaySeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDisplaySeqNoNull() {
                this[this.tablePaySlip_Allowance.PaymentCodeDisplaySeqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsMPFNull() {
                return this.IsNull(this.tablePaySlip_Allowance.PaymentCodeIsMPFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsMPFNull() {
                this[this.tablePaySlip_Allowance.PaymentCodeIsMPFColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaySlip_DeductionRow : global::System.Data.DataRow {
            
            private PaySlip_DeductionDataTable tablePaySlip_Deduction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlip_DeductionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaySlip_Deduction = ((PaySlip_DeductionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmpID {
                get {
                    return ((int)(this[this.tablePaySlip_Deduction.EmpIDColumn]));
                }
                set {
                    this[this.tablePaySlip_Deduction.EmpIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCode {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip_Deduction.PaymentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCode\' in table \'PaySlip_Deduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Deduction.PaymentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentCodeDesc {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip_Deduction.PaymentCodeDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDesc\' in table \'PaySlip_Deduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Deduction.PaymentCodeDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayMethod {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip_Deduction.PayMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayMethod\' in table \'PaySlip_Deduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Deduction.PayMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PayAmount {
                get {
                    try {
                        return ((double)(this[this.tablePaySlip_Deduction.PayAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayAmount\' in table \'PaySlip_Deduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Deduction.PayAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tablePaySlip_Deduction.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'PaySlip_Deduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Deduction.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentCodeDisplaySeqNo {
                get {
                    try {
                        return ((int)(this[this.tablePaySlip_Deduction.PaymentCodeDisplaySeqNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeDisplaySeqNo\' in table \'PaySlip_Deduction\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Deduction.PaymentCodeDisplaySeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PaymentCodeIsMPF {
                get {
                    try {
                        return ((bool)(this[this.tablePaySlip_Deduction.PaymentCodeIsMPFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentCodeIsMPF\' in table \'PaySlip_Deduction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaySlip_Deduction.PaymentCodeIsMPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow EmpInfoRow {
                get {
                    return ((EmpInfoRow)(this.GetParentRow(this.Table.ParentRelations["EmpInfo_PaySlip_Deduction"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EmpInfo_PaySlip_Deduction"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeNull() {
                return this.IsNull(this.tablePaySlip_Deduction.PaymentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeNull() {
                this[this.tablePaySlip_Deduction.PaymentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDescNull() {
                return this.IsNull(this.tablePaySlip_Deduction.PaymentCodeDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDescNull() {
                this[this.tablePaySlip_Deduction.PaymentCodeDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayMethodNull() {
                return this.IsNull(this.tablePaySlip_Deduction.PayMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayMethodNull() {
                this[this.tablePaySlip_Deduction.PayMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayAmountNull() {
                return this.IsNull(this.tablePaySlip_Deduction.PayAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayAmountNull() {
                this[this.tablePaySlip_Deduction.PayAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tablePaySlip_Deduction.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tablePaySlip_Deduction.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeDisplaySeqNoNull() {
                return this.IsNull(this.tablePaySlip_Deduction.PaymentCodeDisplaySeqNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeDisplaySeqNoNull() {
                this[this.tablePaySlip_Deduction.PaymentCodeDisplaySeqNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentCodeIsMPFNull() {
                return this.IsNull(this.tablePaySlip_Deduction.PaymentCodeIsMPFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentCodeIsMPFNull() {
                this[this.tablePaySlip_Deduction.PaymentCodeIsMPFColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaySlipRowChangeEvent : global::System.EventArgs {
            
            private PaySlipRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRowChangeEvent(PaySlipRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaySlip_MPFRowChangeEvent : global::System.EventArgs {
            
            private PaySlip_MPFRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_MPFRowChangeEvent(PaySlip_MPFRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_MPFRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LeaveBalanceRowChangeEvent : global::System.EventArgs {
            
            private LeaveBalanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRowChangeEvent(LeaveBalanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LeaveBalanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaySlip_ORSORowChangeEvent : global::System.EventArgs {
            
            private PaySlip_ORSORow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_ORSORowChangeEvent(PaySlip_ORSORow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_ORSORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpInfoRowChangeEvent : global::System.EventArgs {
            
            private EmpInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRowChangeEvent(EmpInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaySlip_AllowanceRowChangeEvent : global::System.EventArgs {
            
            private PaySlip_AllowanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_AllowanceRowChangeEvent(PaySlip_AllowanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_AllowanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaySlip_DeductionRowChangeEvent : global::System.EventArgs {
            
            private PaySlip_DeductionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_DeductionRowChangeEvent(PaySlip_DeductionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlip_DeductionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591